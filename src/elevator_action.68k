	.global	elevator_reset
	.global	elevator_irq

	.include	"elevator_action.inc"

		
	.macro	LOAD_D1_16_FROM_D1D2
	and.l	#0xFFFF,d1
	lsl.w	#8,d1
	move.b	d2,d1
	.endm
	
	.macro	LOAD_D3_16_FROM_D3D4
	and.l	#0xFFFF,d3
	lsl.w	#8,d3
	move.b	d4,d3
	.endm
	.macro	LOAD_D5_16_FROM_D5D6
	and.l	#0xFFFF,d5
	lsl.w	#8,d5
	move.b	d6,d5
	.endm
	.macro	LOAD_D1D2_FROM_D1_16
	move.b	d1,d2
	lsr.w	#8,d1
	.endm
	.macro	LOAD_D5D6_FROM_D5_16
	move.b	d5,d6
	lsr.w	#8,d5
	.endm
	.macro	LOAD_D3D4_FROM_D3_16
	move.b	d3,d4
	lsr.w	#8,d3
	.endm
	
	
	.macro CLEAR_XC_FLAGS
	move.w	d7,-(a7)
	moveq	#0,d7
	roxl.b	#1,d7
	movem.w	(a7)+,d7
	.endm

	
	.macro SET_XC_FLAGS
	move.w	d7,-(a7)
	st	d7
	roxl.b	#1,d7
	movem.w	(a7)+,d7
	.endm

	.macro	INVERT_XC_FLAGS
	jcs	0f
	SET_XC_FLAGS
	bra.b	1f
0:
	CLEAR_XC_FLAGS
1:
	.endm

	.macro	SET_X_FROM_C
	jcc	0f
	SET_XC_FLAGS
	bra.b	1f
0:
	CLEAR_XC_FLAGS
1:
	.endm
	.macro	SET_C_FROM_X
	move.w	d7,-(a7)
	roxl.b	#1,d7
	roxr.b	#1,d7
	movem.w	(a7)+,d7
	.endm

	.macro	STORE_POINTER  src,dest
	move.l	d7,-(a7)
	move.l	\src,d7
	sub.l	a6,d7
	add.l	#0x8000,d7 
	move.b	d7,\dest
	rol.w	#8,d7
	move.b	d7,1+\dest
	move.l	(a7)+,d7
	.endm

	.macro	LOAD_POINTER  src,dest
	move.l	d7,-(a7)
	moveq	#0,d7
	move.b	1+\src,d7
	rol.w	#8,d7
	move.b	\src,d7
	sub.l	#0x8000,d7
	.ifndef	RELEASE
	bcc		ok\@
	illegal
ok\@:
	.endc
	add.l	a6,d7
	move.l	d7,\dest
	move.l	(a7)+,d7
	.endm

	.macro	STORE_WORD  src,dest
	move.b	\src,\dest
	rol.w	#8,\src
	move.b	\src,1+\dest
	rol.w	#8,\src
	.endm

	.macro	LOAD_WORD  src,dest
	move.b	1+\src,\dest
	rol.w	#8,\dest
	move.b	\src,\dest
	.endm

	.include	"data_offsets.inc"
	.ifdef	__amiga__
	.include	"elevator_action_ram.68k"
	.align	2
	.endif
	
	* to trace at some virtual PCs, insert this macro
	
	.ifndef	RELEASE
	.macro	LOG_REGS	z80pc
	move.w	sr,-(a7)
	movem.l	a0/a2/a3/a5,-(a7)
	move.l	log_ptr,a5
	move.w	#0x\z80pc,(a5)+
	move.b	d0,(a5)+
	move.b	d1,(a5)+
	move.b	d2,(a5)+
	move.b	d3,(a5)+
	move.b	d4,(a5)+
	move.b	d5,(a5)+
	move.b	d6,(a5)+
	move.b	d7,(a5)+
	sub.l	a6,a0
	move.w	a0,(a5)+
	sub.l	a6,a2
	move.w	a2,(a5)+
	sub.l	a6,a3
	move.w	a3,(a5)+
	move.w	#0xDEAD,(a5)+
	move.l	a5,log_ptr
	movem.l	(a7)+,a0/a2/a3/a5
	move.w	(a7)+,sr
	.endm
	.endif
	
display_column_scroll_values:
	movem.l	d0-d1/d7/a0-a1,-(a7)
	move.w	#0xC740,d7
	moveq	#0,d1
0:
	move.b	d1,d0
	jbsr	osd_get_column_scroll
	jbsr	display_debug_value
	addq.w	#3,d7
	addq	#1,d1
	cmp.b	#8,d1
	bne		0b
	movem.l	(a7)+,d0-d1/d7/a0-a1
	rts
	

* < D0: hex value to display
* < D7: screen address

display_debug_value:
	movem.l	d0-d2/d7/a0-a1,-(a7)
	lea		hex_table(pc),a1
	moveq	#0,d2
	move.b	d0,d2
	moveq	#0,d1
	move.b	d0,d1
	lsr.b	#4,d1
	move.b	(a1,d1.w),d0
	move.l	a6,a0
	and.l	#0xFFFF,d7
	sub.l	#0x8000,d7
	add.l	d7,a0
	jbsr	osd_w_videoram
	addq	#1,a0
	and.b	#0xF,d2
	move.b	(a1,d2.w),d0
	jbsr	osd_w_videoram
	movem.l	(a7)+,d0-d2/d7/a0-a1
	rts
	
hex_table:
	.byte	0x10
	.byte	0x11
	.byte	0x12
	.byte	0x13
	.byte	0x14
	.byte	0x15
	.byte	0x16
	.byte	0x17
	.byte	0x18
	.byte	0x19
	.byte	0x1C	| A
	.byte	0x1F    | B (R)
	.byte	0x2E    | C
	.byte	0x30    | D
	.byte	0x1E    | E
	.byte	0x27    | F
	
*	map(0x0000, 0x5fff).rom()|
*	map(0x6000, 0x7fff).bankr(m_mainbank)|
*	map(0x8000, 0x87ff).ram()|
*	map(0x8800, 0x8800).mirror(0x07fe).rw(FUNC(taitosj_state::fake_data_r), FUNC(taitosj_state::fake_data_w))|
*	map(0x8801, 0x8801).mirror(0x07fe).r(FUNC(taitosj_state::fake_status_r))|
*	map(0x9000, 0xbfff).w(FUNC(taitosj_state::characterram_w)).share(m_characterram)|
*	map(0xc000, 0xc3ff).ram()|
*	map(0xc400, 0xc7ff).ram().share(m_videoram[0])|
*	map(0xc800, 0xcbff).ram().share(m_videoram[1])|
*	map(0xcc00, 0xcfff).ram().share(m_videoram[2])|
*	map(0xd000, 0xd05f).ram().share(m_colscrolly)| column scroll on 3 playfields, 0x20 values per layer
*	map(0xd100, 0xd1ff).ram().share(m_spriteram)|
*	map(0xd200, 0xd27f).mirror(0x0080).ram().share(m_paletteram)|
*	map(0xd300, 0xd300).mirror(0x00ff).writeonly().share(m_video_priority)|
*	map(0xd400, 0xd403).mirror(0x00f0).readonly().share(m_collision_reg)|  not used here!
*	map(0xd404, 0xd404).mirror(0x00f3).r(FUNC(taitosj_state::gfxrom_r))|
*	map(0xd408, 0xd408).mirror(0x00f0).portr("IN0")|
*	map(0xd409, 0xd409).mirror(0x00f0).portr("IN1")|
*	map(0xd40a, 0xd40a).mirror(0x00f0).portr("DSW1")|
*	map(0xd40b, 0xd40b).mirror(0x00f0).portr("IN2")|
*	map(0xd40c, 0xd40c).mirror(0x00f0).portr("IN3")|          // Service
*	map(0xd40d, 0xd40d).mirror(0x00f0).portr("IN4")|  not used
*	map(0xd40e, 0xd40f).mirror(0x00f0).w(m_ay[0], FUNC(ay8910_device::address_data_w))|
*	map(0xd40f, 0xd40f).mirror(0x00f0).r(m_ay[0], FUNC(ay8910_device::data_r))|   // DSW2 and DSW3
* main scroll
* D500: horiz scroll of layer 1 (score)
* D501: vertical scroll of layer 1 (score)
* D502: horiz scroll of layer 2 (building)
* D503: vertical scroll of layer 2 (building)
* D502: horiz scroll of layer 3 (elevators)
*	map(0xd500, 0xd505).mirror(0x00f0).writeonly().share(m_scroll)|
*	map(0xd506, 0xd507).mirror(0x00f0).writeonly().share(m_colorbank)|
*	map(0xd508, 0xd508).mirror(0x00f0).w(FUNC(taitosj_state::collision_reg_clear_w))| NOT USED!!
*	map(0xd509, 0xd50a).mirror(0x00f0).writeonly().share(m_gfxpointer)|
*	map(0xd50b, 0xd50b).mirror(0x00f0).w(FUNC(taitosj_state::soundlatch_w))|
*	map(0xd50c, 0xd50c).mirror(0x00f0).w(FUNC(taitosj_state::sound_semaphore2_w))|
*	map(0xd50d, 0xd50d).mirror(0x00f0).w("watchdog", FUNC(watchdog_timer_device::reset_w))|
*	map(0xd50e, 0xd50e).mirror(0x00f0).w(FUNC(taitosj_state::bankswitch_w))|
*	map(0xd50f, 0xd50f).mirror(0x00f0).nopw()|
*	map(0xd600, 0xd600).mirror(0x00ff).writeonly().share(m_video_mode)|

* moving door slot offsets
moving_door_x_00 = 0x0
moving_door_unknown_01 = 0x1
moving_door_floor_02 = 0x2
moving_door_unknown_03 = 0x3
moving_door_column_04 = 0x4
moving_door_timer_05 = 0x5   | 0xFF: slot is free
moving_door_type_06 = 0x6
moving_door_unknown_07 = 0x7

* character struct offsets
character_x_00 = 0x0
character_x_right_01 = 0x1
character_y_offset_down_02 = 0x2
character_y_offset_03 = 0x3
character_display_priority_04 = 0x4
character_delta_x_05 = 0x5
character_situation_06 = 0x6    | 0: ground, 1: in elevator, 2: on elevator, 3: ??, 4: in stairs, 5: ??
current_floor_07 = 0x7
associated_elevator_08 = 0x8	| for player & enemies
spawning_door_08 = 0x8			| for unspawned enemies, number of door to spawn from 0-7
enemy_state_09 = 0x9			| 0xFF: inactive, 0: active, 1: ??
exiting_room_timer_0a = 0xa
character_facing_direction_0b = 0xb
character_unknown_0c = 0xc
move_direction_0d = 0xd
enemy_unknown_timer_0e = 0xe
unknown_0f = 0xf
enemy_unknown_timer_10 = 0x10
enemy_aggressivity_13 = 0x13
player_unknown_13 = 0x13
enemy_shoot_timeout_19 = 0x19   | smaller: shoots more often

* elevator structs offsets (size=8)
current_floor_01 = 0x1
max_floor_02 = 0x2
min_floor_03 = 0x3
player_control_07 = 0x7		| when player can control elevator

* character situations
CS_ON_GROUND_00 = 0
CS_IN_ELEVATOR_01 = 1
CS_ABOVE_ELEVATOR_02 = 2
CS_FALLING_03 = 3
CS_IN_STAIRS_04 = 4
CS_IN_ROOM_05 = 5

* global game state
GS_UNKNOWN_00 = 0
GS_TITLE_01 = 1
GS_PUSH_START_03 = 3
GS_GAME_STARTING_04 = 4
GS_IN_GAME_05 = 5
GS_GROUND_FLOOR_REACHED_06 = 6
GS_NEXT_LIFE_07 = 7
GS_GAME_OVER_08 = 8
GS_INSERT_COIN_09 = 9

* utility functions
set_recorded_input:
	move.l 	a0,d5
	sub.l	#recorded_inputs_7A63,d5
	STORE_WORD	d5,recorded_input_rom_address_823C(a6)
	rts

get_recorded_input:
	LOAD_WORD	recorded_input_rom_address_823C(a6),d5             	| [$117b: ld   hl,($823C)]
	move.l		d5,a0
	add.l	#recorded_inputs_7A63,a0
	rts
	

load_d3d4_address_from_6bdc_in_a1:
	LOAD_D3_16_FROM_D3D4
	lea		table_6BDC,A1
	add.w	d3,a1
	.ifndef	RELEASE
	cmp.l	#end_table_6BDC,a1
	jcs		0f
	jbsr	osd_break
	tst		d3
	illegal
0:
	.endif
	rts
	
load_d5d6_address_from_6bdc_in_a0:
	LOAD_D5_16_FROM_D5D6
	lea		table_6BDC,A0
	add.w	d5,a0
	.ifndef	RELEASE
	cmp.l	#end_table_6BDC,a0
	jcs		0f
	jbsr	osd_break
	tst		d5
	illegal
0:
	.endif
	rts
	

	
play_sound:
	move.l	a0,-(a7)
	move.w	d1,-(a7)
	moveq	#0,d1
	move.b	D0,d1
	moveq 	#0,d0
	lea		sound_table(pc),a0
	move.b	(a0,d1.w),d0
	jmi		0f
	jbsr	osd_sound_start
1:
	move.w	(a7)+,d1
	move.l	(a7)+,a0
	rts
0:
	cmp.b	#-2,d0
	beq	2f
	**jbsr	osd_break
	jra	1b
2:
	* stop elevator sound
	*jbsr	osd_loop_stop
	jra		1b
	
sound_table:
	.byte	-1   | 0x00
	.byte	-1   | 0x01
	.byte	-1   | 0x02
	.byte	-1   | 0x03
	.byte	-1   | 0x04
	.byte	-1   | 0x05
	.byte	-1   | 0x06
	.byte	-1   | 0x07
	.byte	-1   | 0x08
	.byte	-1   | 0x09
	.byte	-1   | 0x0a
	.byte	-1   | 0x0b
	.byte	-1   | 0x0c
	.byte	-1   | 0x0d
	.byte	-1   | 0x0e
	.byte	-1   | 0x0f
	.byte	-1   | 0x10
	.byte	-1   | 0x11
	.byte	-1   | 0x12
	.byte	-1   | 0x13
	.byte	-1   | 0x14
	.byte	-1   | 0x15
	.byte	-1   | 0x16
	.byte	-1   | 0x17
	.byte	-1   | 0x18
	.byte	-1   | 0x19
	.byte	-1   | 0x1a
	.byte	-1   | 0x1b
	.byte	-1   | 0x1c
	.byte	-1   | 0x1d
	.byte	-1   | 0x1e
	.byte	-1   | 0x1f
	.byte	-1   | 0x20
	.byte	-1   | 0x21
	.byte	-1   | 0x22
	.byte	-1   | 0x23
	.byte	-1   | 0x24
	.byte	-1   | 0x25
	.byte	-1   | 0x26
	.byte	-1   | 0x27
	.byte	-1   | 0x28
	.byte	-1   | 0x29
	.byte	-1   | 0x2a
	.byte	-1   | 0x2b
	.byte	-1   | 0x2c
	.byte	-1   | 0x2d
	.byte	-1   | 0x2e
	.byte	-1   | 0x2f
	.byte	-1   | 0x30
	.byte	-1   | 0x31
	.byte	-1   | 0x32
	.byte	JUMPING_SND   | 0x33
	.byte	-1   | 0x34
	.byte	-1   | 0x35
	.byte	DOCUMENT_COLLECTED_SND   | 0x36
	.byte	RED_DOOR_OPENED_SND   | 0x37
	.byte	FORGOT_DOCUMENTS_SND   | 0x38 missing document (end sound)
	.byte	-1   | 0x39
	.byte	ENEMY_KILLED_SND  | 0x3a     enemy was shot
	.byte	-1   | 0x3b
	.byte	-1   | 0x3c
	.byte	-1   | 0x3d
	.byte	-1   | 0x3e
	.byte	-1   | 0x3f
	.byte	-1   | 0x40
	.byte	-1   | 0x41
	.byte	-1   | 0x42
	.byte	-1   | 0x43
	.byte	-1   | 0x44
	.byte	-1   | 0x45
	.byte	-1   | 0x46
	.byte	-1   | 0x47
	.byte	-1   | 0x48
	.byte	-1   | 0x49
	.byte	-1   | 0x4a
	.byte	-1   | 0x4b
	.byte	-1   | 0x4c
	.byte	-1   | 0x4d
	.byte	-1   | 0x4e
	.byte	-1   | 0x4f
	.byte	-1   | 0x50
	.byte	-1   | 0x51
	.byte	-1   | 0x52
	.byte	-1   | 0x53
	.byte	-1   | 0x54
	.byte	-1   | 0x55
	.byte	-1   | 0x56
	.byte	-1   | 0x57
	.byte	-1   | 0x58
	.byte	-1   | 0x59
	.byte	-1   | 0x5a
	.byte	-1   | 0x5b
	.byte	-1   | 0x5c
	.byte	-1   | 0x5d
	.byte	-1   | 0x5e
	.byte	-1   | 0x5f
	.byte	-2   | 0x60 sound stop
	.byte	-1   | 0x61
	.byte	UP_THE_STAIRS_SND   | 0x62
	.byte	DOWN_THE_STAIRS_SND   | 0x63
	.byte	-1   | 0x64 elevator move sound
	.byte	-2   | 0x65 sound stop
	.byte	WALK_SND   | 0x66
	.byte	-1   | 0x67
	.byte	-1   | 0x68
	.byte	-1   | 0x69
	.byte	-1   | 0x6a
	.byte	-1   | 0x6b
	.byte	-1   | 0x6c
	.byte	-1   | 0x6d
	.byte	-1   | 0x6e
	.byte	-1   | 0x6f
	.byte	-1   | 0x70
	.byte	-1   | 0x71
	.byte	-1   | 0x72
	.byte	-1   | 0x73
	.byte	-1   | 0x74
	.byte	-1   | 0x75
	.byte	-1   | 0x76
	.byte	-1   | 0x77
	.byte	-1   | 0x78
	.byte	-1   | 0x79
	.byte	-1   | 0x7a
	.byte	-1   | 0x7b
	.byte	-1   | 0x7c
	.byte	-1   | 0x7d
	.byte	-1   | 0x7e
	.byte	-1   | 0x7f
	.byte	-1   | 0x80
	.byte	-1   | 0x81
	.byte	-1   | 0x82
	.byte	-1   | 0x83
	.byte	-1   | 0x84
	.byte	-1   | 0x85
	.byte	-1   | 0x86
	.byte	-1   | 0x87
	.byte	-1   | 0x88
	.byte	-1   | 0x89
	.byte	-1   | 0x8a
	.byte	-1   | 0x8b
	.byte	-1   | 0x8c
	.byte	-1   | 0x8d
	.byte	-1   | 0x8e
	.byte	-1   | 0x8f
	.byte	-1   | 0x90
	.byte	PLAYER_SHOT_SND   | 0x91
	.byte	ENEMY_SHOT_SND   | 0x92
	.byte	BULLET_HITS_WALL_SND   | 0x93 bullet hits wall
	.byte	-1   | 0x94
	.byte	-1   | 0x95
	.byte	-1   | 0x96
	.byte	-1   | 0x97
	.byte	-1   | 0x98
	.byte	-1   | 0x99
	.byte	-1   | 0x9a
	.byte	-1   | 0x9b
	.byte	-1   | 0x9c
	.byte	-1   | 0x9d
	.byte	-1   | 0x9e
	.byte	-1   | 0x9f
	.byte	-1   | 0xa0
	.byte	-1   | 0xa1
	.byte	-1   | 0xa2
	.byte	-1   | 0xa3
	.byte	-1   | 0xa4
	.byte	-1   | 0xa5
	.byte	-1   | 0xa6
	.byte	-1   | 0xa7
	.byte	-1   | 0xa8
	.byte	-1   | 0xa9
	.byte	-1   | 0xaa
	.byte	-1   | 0xab
	.byte	-1   | 0xac
	.byte	-1   | 0xad
	.byte	-1   | 0xae
	.byte	-1   | 0xaf
	.byte	-1   | 0xb0
	.byte	-1   | 0xb1
	.byte	-1   | 0xb2
	.byte	-1   | 0xb3
	.byte	-1   | 0xb4
	.byte	-1   | 0xb5
	.byte	-1   | 0xb6
	.byte	-1   | 0xb7
	.byte	-1   | 0xb8
	.byte	-1   | 0xb9
	.byte	-1   | 0xba
	.byte	-1   | 0xbb
	.byte	-1   | 0xbc
	.byte	-1   | 0xbd
	.byte	-1   | 0xbe
	.byte	-1   | 0xbf
	.byte	-2   | 0xc0 seems to be: no sound
	.byte	CREDIT_SND   | 0xc1
	.byte	HOOK_SHOT_SND   | 0xc2 grappling hook
	.byte	PLAYER_FALLS_SND   | 0xc3
	.byte	PLAYER_KILLED_SND   | 0xc4
	.byte	PLAYER_CRUSHED_SND   | 0xc5  crushed 1
	.byte	-1   | 0xc6
	.byte	LAMP_FALLS_SND   | 0xc7
	.byte	-1   | 0xc8
	.byte	PLAYER_CRUSHED_2_SND   | 0xc9
	.byte	-1   | 0xca
	.byte	KICKING_ENEMY_SND   | 0xcb
	.byte	-1   | 0xcc
	.byte	-1   | 0xcd
	.byte	-1   | 0xce
	.byte	-1   | 0xcf
	.byte	-1   | 0xd0
	.byte	-1   | 0xd1
	.byte	-1   | 0xd2
	.byte	-1   | 0xd3
	.byte	-1   | 0xd4
	.byte	-1   | 0xd5
	.byte	-1   | 0xd6
	.byte	-1   | 0xd7
	.byte	-1   | 0xd8
	.byte	-1   | 0xd9
	.byte	-1   | 0xda
	.byte	-1   | 0xdb
	.byte	-1   | 0xdc
	.byte	-1   | 0xdd
	.byte	-1   | 0xde
	.byte	-1   | 0xdf
	.byte	-1   | 0xe0
	.byte	-1   | 0xe1
	.byte	-1   | 0xe2
	.byte	-1   | 0xe3
	.byte	-1   | 0xe4
	.byte	-1   | 0xe5
	.byte	-1   | 0xe6
	.byte	-1   | 0xe7
	.byte	-1   | 0xe8
	.byte	-1   | 0xe9
	.byte	-1   | 0xea
	.byte	-1   | 0xeb
	.byte	-1   | 0xec
	.byte	-1   | 0xed
	.byte	-1   | 0xee
	.byte	-1   | 0xef
	.byte	-1   | 0xf0
	.byte	-1   | 0xf1
	.byte	-1   | 0xf2
	.byte	-1   | 0xf3
	.byte	-1   | 0xf4
	.byte	-1   | 0xf5
	.byte	-1   | 0xf6
	.byte	-1   | 0xf7
	.byte	-1   | 0xf8
	.byte	-1   | 0xf9
	.byte	-1   | 0xfa
	.byte	-1   | 0xfb
	.byte	-1   | 0xfc
	.byte	-1   | 0xfd
	.byte	-1   | 0xfe
	.byte	-1   | 0xff
	
* < A2: ROM address
* < D5: ROM address
* we'll have to emulate the possible instructions put there
* then we'll have to jump to possible ROM routines that the game puts there
execute_dynamic_ram_code_8246:
	* do something in function of code that the game planted in RAM
	LOAD_WORD	dynamic_ram_code_8246(a6),d7
	cmp.w 	#0xE9DD,d7
	bne.b	0f
	cmp.w	#0x2F1F,a2
	bne.b	0f
	jbra	l_2f1f		| would execute jmp (ix), ix = $2F1F
0:
	* undiscovered cases (are there some?? don't think so)
	illegal
	NOP
	illegal
	rts
	
*TITLE_MOCKUP=  1
*GAME_MOCKUP = 1

elevator_reset:
	.ifdef	TITLE_MOCKUP
	moveq	#0,d0
	jbsr	osd_set_gfx_bank
	lea 	tv,a1
	lea		videoram_layer_1_C400(a6),a0
	move.w	#0xBFF,d1
0:
	move.b	(a1)+,d0
	jbsr	osd_w_videoram
	addq	#1,a0
	dbf		d1,0b
	
	moveq	#7,d1
	move.w	#0x50,d0
0:
	jbsr	osd_set_column_scroll
	*sub.w	#0x1,d0
	dbf	d1,0b
1:
	btst	#6,0xBFE001
	bne		1b
	illegal
tv:
	.include	"title_video.s"
	.endif
	
	.ifdef	GAME_MOCKUP
	moveq	#1,d0
	jbsr	osd_set_gfx_bank
	
	move.b	#0x80,D0
	jbsr	osd_set_main_scroll 
	lea 	tvg,a1
	lea		videoram_layer_1_C400(a6),a0
	lea		level_end(pc),a1
	move.w	#0x7FF,d1
0:
	move.b	(a1)+,d0
	jbsr	osd_w_videoram
	addq	#1,a0
	dbf		d1,0b
	
	move.b	#0xA0,D0
	jbsr	osd_set_main_scroll
	
	lea		videoram_layer_1_C400+0xB02-0x400(a6),a0
	moveq	#0,d0
	jbsr	osd_w_videoram
	addq	#1,a0
	jbsr	osd_w_videoram
	addq	#1,a0
	jbsr	osd_w_videoram
	
	add.w	#0x16,a0
	jbsr	osd_w_videoram
	addq	#1,a0
	jbsr	osd_w_videoram
	addq	#1,a0
	jbsr	osd_w_videoram
	
	lea		videoram_layer_1_C400+0xB22-0x400(a6),a0
	jbsr	osd_w_videoram
	addq	#1,a0
	jbsr	osd_w_videoram
	addq	#1,a0
	jbsr	osd_w_videoram
	add.w	#0x16,a0
	jbsr	osd_w_videoram
	addq	#1,a0
	jbsr	osd_w_videoram
	addq	#1,a0
	jbsr	osd_w_videoram
	
	moveq	#0,d1
	lea		level_end+0xC42,a0
0:
	move.b	(a0),d0
	addq	#1,a0
	jbsr	osd_set_column_scroll
	addq	#1,d1
	cmp		#7,d1
	bne		0b

	lea		sprite_mockup,a0
	lea		sprite_ram_d100,a1
	moveq	#0x1F,D0
0:
	move.l	(a0)+,(a1)+
	dbf		d0,0b
	jbsr	osd_update_sprites
1:
	btst	#6,0xBFE001
	bne		1b
	illegal
tvg:
	.include	"game_video.s"

level_end:
	.include	"level_end.s"
	
start_elev_mockup:
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0000
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0010
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0020
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0030
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0040
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0050
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0060
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0070
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0080
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0090
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x00a0
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x00b0
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x00c0
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x00d0
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3b,0x3b	|	0x00e0
.byte  0x3b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x00f0
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3b,0x3b	|	0x0100
.byte  0x3b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0110
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3b,0x3b	|	0x0120
.byte  0x3b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0130
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3b,0x3b	|	0x0140
.byte  0x3b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0150
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3b,0x3b	|	0x0160
.byte  0x3b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0170
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3a,0xfc	|	0x0180
.byte  0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0190
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x3f	|	0x01a0
.byte  0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x01b0
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x3f	|	0x01c0
.byte  0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x01d0
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x3f	|	0x01e0
.byte  0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x01f0
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x3f	|	0x0200
.byte  0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0210
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x3f	|	0x0220
.byte  0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0230
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x3f	|	0x0240
.byte  0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0250
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x3f	|	0x0260
.byte  0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0270
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x3f	|	0x0280
.byte  0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0290
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x3f	|	0x02a0
.byte  0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x02b0
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x3f	|	0x02c0
.byte  0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x02d0
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x3f	|	0x02e0
.byte  0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x02f0
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x3f	|	0x0300
.byte  0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0310
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0320
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0330
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0340
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0350
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0360
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0370
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0380
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0390
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x03a0
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x03b0
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x03c0
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x03d0
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x03e0
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x03f0


sprite_mockup:
.byte   0xF2,0xA6,0x04,0x02,0x4E,0x9A,0x00,0x4D
.rept	0x80
.byte	0
.endr

.byte  0x70,0x86,0x00,0x4e,0x39,0x93,0x01,0x51,0x3a,0xa3,0x01,0x5e,0x84,0x62,0x00,0x50	|	0x0000
.byte  0x84,0x72,0x00,0x5e,0x3a,0x30,0x04,0x66,0x3a,0x40,0x04,0x67,0x36,0x33,0x00,0x51	|	0x0010
.byte  0x35,0x43,0x00,0x5e,0x7c,0x69,0x00,0x72,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0020
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0030
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0040
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0050
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	|	0x0060
.byte  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x76,0x00,0x40	|	0x0070


	.endif
	
	
	jra	bootup_338f                        	| [$0000: jp   bootup_338f]

    	| [$0003: ld   hl,$8649]
     	| [$0006: ld   a,(hl)]
      	| [...]
    	| [$0007: ret  z] [...]

protection_crap_0008:
	not.b	d0                               	| [$0008: cpl]
	move.b	d0,l_8649(a6)                   	| [$0009: ld   ($8649),a]
	move.b	#0x9C,d0                        	| [$000c: ld   a,$9C]
	jbsr	rst_20                            	| [$000e: rst  $20]
	rts                                    	| [$000f: ret]

* < D0:
* updates protection_random_variable_8647 pseudo-randomly (it seems)

| [$0010: rlca]

                    	| [$0011: ld   hl,$8647]
| [$0014: ld   a,(hl)]

| [$0015: jr   c,$001B]
| [$0017: add  a,$F3]
| [$0019: sra  a]

| [$001b: add  a,$17]
| [$001d: ld   (hl),a]
                                    	| [$001e: ret]



rst_20:
* part of protection? probably used to install code put in RAM
* from alternate bank
* useless with bootleg
	       	| [$0020: push hl]
	         	| [$0021: call mcu_comm_routine_77CF]
	                      	| [$0024: rst  $10]
	       	| [$0025: pop  hl]
	rts                                    	| [$0026: ret]

* part of protection? probably used to install code put in RAM
* from alternate bank
* useless with bootleg
rst_28:
	rts
	      	| [$0028: and  $1F]
	       	| [$002a: rst  $20]
	    	| [$002b: ld   hl,protection_variable_8648]
	       	| [$002e: or   (hl)]
	     	| [$002f: ld   (hl),a]
	       	| [$0030: call mcu_comm_routine_77BD]
	    	| [$0033: ret]


                  	| [$0038: jp   elevator_irq_1199]

l_003b:
	move.b	(0x09,a2),d0                    	| [$003b: ld   a,(ix+$09)]
	addq.b	#1,d0                           	| [$003e: inc  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$003f: ret  z] [...]
0:
	move.b	(character_situation_06,a2),d0  	| [$0040: ld   a,(ix+character_situation_06)]
	cmp.b	#CS_FALLING_03,d0                	| [$0043: cp   CS_FALLING_03]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0045: ret  nc] [...]
0:
* either on ground, in or above elevator
	move.b	(0x10,a2),d0                    	| [$0046: ld   a,(ix+$10)]
												| [$0049: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$004a: ret  z] [...]
0:
	moveq	#0,d4
	move.b	(0x12,a2),d0                    	| [$004b: ld   a,(ix+$12)]
	and.b	#0x07,d0                         	| [$004e: and  $07]
	move.b	d0,d4                           	| [$0050: ld   e,a]
	cmp.b	#0x04,d0                         	| [$0051: cp   $04]
	jcs	l_0065                             	| [$0053: jr   c,$0065]
	move.b	(enemy_aggressivity_13,a2),d0   	| [$0055: ld   a,(ix+enemy_aggressivity_13)]
	add.b	d0,d0                            	| [$0058: add  a,a]
	add.b	d0,d0                            	| [$0059: add  a,a]
	add.b	d0,d0                            	| [$005a: add  a,a]
	sub.b	#0x50,d0                         	| [$005b: sub  $50]
	jcs	l_0060                             	| [$005d: jr   c,$0060]
	clr.b	d0                               	| [$005f: xor  a]
l_0060:
	neg.b	d0                               	| [$0060: neg]
	move.b	d0,(enemy_shoot_timeout_19,a2)                    	| [$0062: ld   (ix+$19),a]
l_0065:
	lea	jump_table_0070(pc),a0              	| [$0065: ld   a,e]
	add.w	d4,d4               	| [$0066: add  a,e]
	add.w	d4,d4               	| [$0067: add  a,e]
	move.l	(a0,d4.w),a0              	| [$0068: ld   e,a]
	                  	| [$0069: ld   d,$00]
	              	| [$006b: ld   hl,$0070] 112
	               	| [$006e: add  hl,de]

	jra	(a0)                               	| [$006f: jp   (hl)]

jump_table_0070:
	.long	l_0088                             	| [$0070: jp   $0088]
	.long	l_00b3                             	| [$0073: jp   $00B3]
	.long	l_00d3                             	| [$0076: jp   $00D3]
	.long	l_00f0                             	| [$0079: jp   $00F0]
	.long	l_0092                             	| [$007c: jp   $0092]
	.long	l_00be                             	| [$007f: jp   $00BE]
	.long	l_00db                             	| [$0082: jp   $00DB]
	.long	l_00f7                             	| [$0085: jp   $00F7]

l_0088:
	jbsr	l_0148                            	| [$0088: call $0148]
	moveq   #0,d3                               	| [$008b: ld   d,$00]
	move.b	d3,(0x11,a2)                    	| [$008d: ld   (ix+$11),d]
	jra	l_00a4                             	| [$0090: jr   $00A4]
l_0092:
	moveq   #0,d3                               	| [$0092: ld   d,$00]
	move.b	d3,(0x11,a2)                    	| [$0094: ld   (ix+$11),d]
	jbsr	l_0174                            	| [$0097: call $0174]
	move.b	l_8000(a6),d0                   	| [$009a: ld   a,($8000)]
	cmp.b	(0x10,a2),d0                     	| [$009d: cp   (ix+$10)]
	jne	l_00a4                             	| [$00a0: jr   nz,$00A4]
	move.b	#0x20,d3                        	| [$00a2: ld   d,$20]
l_00a4:
	move.b	(0x09,a2),d0                    	| [$00a4: ld   a,(ix+$09)]
	cmp.b	#0x02,d0                         	| [$00a7: cp   $02]
	jcs	l_00af                             	| [$00a9: jr   c,$00AF]
	move.b	#0x08,d0                        	| [$00ab: ld   a,$08]
	or.b	d3,d0                             	| [$00ad: or   d]
	move.b	d0,d3                           	| [$00ae: ld   d,a]
l_00af:
	jbsr	l_0134                            	| [$00af: call $0134]
	rts                                    	| [$00b2: ret]
l_00b3:
	jbsr	l_0148                            	| [$00b3: call $0148]
	moveq   #0,d3                               	| [$00b6: ld   d,$00]
	move.b	d3,(0x11,a2)                    	| [$00b8: ld   (ix+$11),d]
	jra	dynamic_ram_code_85ef                         	| [$00bb: jp   $85EF]
l_00be:
	moveq   #0,d3                               	| [$00be: ld   d,$00]
	move.b	d3,(0x11,a2)                    	| [$00c0: ld   (ix+$11),d]
	jbsr	l_0174                            	| [$00c3: call $0174]
	move.b	l_8000(a6),d0                   	| [$00c6: ld   a,($8000)]
	cmp.b	(0x10,a2),d0                     	| [$00c9: cp   (ix+$10)]
	jeq	l_00d0                             	| [$00cc: jr   z,$00D0]
	move.b	#0x20,d3                        	| [$00ce: ld   d,$20]
l_00d0:
	jra	dynamic_ram_code_85ef     	| [$00d0: jp   $85EF]
l_00d3:
	moveq   #0,d3                               	| [$00d3: ld   d,$00]
	move.b	d3,(0x11,a2)                    	| [$00d5: ld   (ix+$11),d]
	jra	dynamic_ram_code_85cf                         	| [$00d8: jp   $85CF]
l_00db:
	moveq   #0,d3                               	| [$00db: ld   d,$00]
	move.b	d3,(0x11,a2)                    	| [$00dd: ld   (ix+$11),d]
	jbsr	l_0174                            	| [$00e0: call $0174]
	move.b	l_8000(a6),d0                   	| [$00e3: ld   a,($8000)]
	cmp.b	(0x10,a2),d0                     	| [$00e6: cp   (ix+$10)]
	jeq	l_00ed                             	| [$00e9: jr   z,$00ED]
	move.b	#0x20,d3                        	| [$00eb: ld   d,$20]
l_00ed:
	jra	dynamic_ram_code_85cf                         	| [$00ed: jp   $85CF]
l_00f0:
	moveq   #0,d3                               	| [$00f0: ld   d,$00]
	move.b	d3,(0x11,a2)                    	| [$00f2: ld   (ix+$11),d]
	jra	l_0109                             	| [$00f5: jr   $0109]
l_00f7:
	moveq   #0,d3                               	| [$00f7: ld   d,$00]
	move.b	d3,(0x11,a2)                    	| [$00f9: ld   (ix+$11),d]
	jbsr	l_0174                            	| [$00fc: call $0174]
	move.b	l_8000(a6),d0                   	| [$00ff: ld   a,($8000)]
	cmp.b	(0x10,a2),d0                     	| [$0102: cp   (ix+$10)]
	jne	l_0109                             	| [$0105: jr   nz,$0109]
	move.b	#0x20,d3                        	| [$0107: ld   d,$20]
l_0109:
	move.b	(0x09,a2),d0                    	| [$0109: ld   a,(ix+$09)]
	move.b	#0x08,d1                        	| [$010c: ld   b,$08]
	cmp.b	#0x02,d0                         	| [$010e: cp   $02]
	jcc	l_011b                             	| [$0110: jr   nc,$011B]
	move.b	(0x0b,a2),d0                    	| [$0112: ld   a,(ix+$0b)]
	move.b	#0x01,d1                        	| [$0115: ld   b,$01]
	tst.b	d0                             	| [$0117: or   a]
	jeq	l_011b                             	| [$0118: jr   z,$011B]
	addq.b	#1,d1                           	| [$011a: inc  b]
l_011b:
	move.b	d1,d0                           	| [$011b: ld   a,b]
	or.b	d3,d0                             	| [$011c: or   d]
	move.b	d0,d3                           	| [$011d: ld   d,a]
	jbsr	l_0134                            	| [$011e: call $0134]
	move.b	(character_delta_x_05,a2),d0    	| [$0121: ld   a,(ix+character_delta_x_05)]
	                             	| [$0124: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$0125: ret  z] [...]
0:
	roxl.b	#2,d0                           	| [$0126: rla] * 2
	and.b	#0x01,d0                         	| [$0128: and  $01]
	cmp.b	(0x0b,a2),d0                     	| [$012a: cp   (ix+$0b)]
	beq.b	0f                               	| [...]
	rts                                    	| [$012d: ret  nz] [...]
0:
	eor.b	#0x01,d0                         	| [$012e: xor  $01]
	move.b	d0,(0x0b,a2)                    	| [$0130: ld   (ix+$0b),a]
	rts                                    	| [$0133: ret]
l_0134:
	move.b	(0x17,a2),d0                    	| [$0134: ld   a,(ix+$17)]
	                             	| [$0137: or   a]
	jeq	l_0143                             	| [$0138: jr   z,$0143]
	jmi	l_0141                             	| [$013a: jp   m,$0141]
	move.b	#0x08,d0                        	| [$013d: ld   a,$08]
	jra	l_0143                             	| [$013f: jr   $0143]
l_0141:
	move.b	#0x04,d0                        	| [$0141: ld   a,$04]
l_0143:
	or.b	d3,d0                             	| [$0143: or   d]
	move.b	d0,(move_direction_0d,a2)       	| [$0144: ld   (ix+move_direction_0d),a]
	rts                                    	| [$0147: ret]
l_0148:
	move.b	(0x0f,a2),d0                    	| [$0148: ld   a,(ix+$0f)]
	                             	| [$014b: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$014c: ret  nz] [...]
0:
	move.b	(0x0e,a2),d0                    	| [$014d: ld   a,(ix+$0e)]
	                             	| [$0150: or   a]
	jne	l_015f                             	| [$0151: jr   nz,$015F]
	move.b	(0x10,a2),d0                    	| [$0153: ld   a,(ix+$10)]
	cmp.b	#0x0A,d0                         	| [$0156: cp   $0A]
	jeq	l_016b                             	| [$0158: jr   z,$016B]
	cmp.b	#0x14,d0                         	| [$015a: cp   $14]
	jeq	l_016b                             	| [$015c: jr   z,$016B]
	rts                                    	| [$015e: ret]
l_015f:
	move.b	(0x10,a2),d0                    	| [$015f: ld   a,(ix+$10)]
	cmp.b	#0x07,d0                         	| [$0162: cp   $07]
	jeq	l_016b                             	| [$0164: jr   z,$016B]
	cmp.b	#0x0E,d0                         	| [$0166: cp   $0E]
	jeq	l_016b                             	| [$0168: jr   z,$016B]
	rts                                    	| [$016a: ret]
l_016b:
	move.b	(0x0b,a2),d0                    	| [$016b: ld   a,(ix+$0b)]
	eor.b	#0x01,d0                         	| [$016e: xor  $01]
	move.b	d0,(0x0b,a2)                    	| [$0170: ld   (ix+$0b),a]
	rts                                    	| [$0173: ret]

l_0174:
	jbsr	pseudo_random_with_regsave_1DF5                	| [$0174: call pseudo_random_with_regsave_1DF5]
	cmp.b	#0x0C,d0                         	| [$0177: cp   $0C]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0179: ret  nc] [...]
0:
	move.b	#0xFF,(0x11,a2)                 	| [$017a: ld   (ix+$11),$FF]
	rts                                    	| [$017e: ret]

handle_main_scrolling_017F:
	jbsr	adjust_scrolling_speed_direction_0186                            	| [$017f: call $0186]
	jbsr	update_scrolling_playfield_0206                            	| [$0182: call $0206]
	rts                                    	| [$0185: ret]

* see which scroll delta we must apply. For instance on top floor or on bottom
* floor at some point the scrolling stops updating and character isn't at the center
* of the screen anymore y-wise

adjust_scrolling_speed_direction_0186:
	clr.b	d0                               	| [$0186: xor  a]
	move.b	d0,scroll_speed_8004(a6)        	| [$0187: ld   (scroll_speed_8004),a] default: no speed
	jbsr	stabilize_view_handle_falls_01BA  	| [$018a: call stabilize_view_handle_falls_01BA]
	tst.b	d7
	beq.b	0f                               	| [...]
	rts                                    	| [$018d: ret  c]
0:
	move.b	d6,d0                           	| [$018e: ld   a,l]
	sub.b	#0x6E,d0                         	| [$018f: sub  $6E]
	bne.b	0f                               	| [...]
	rts                                    	| [$0191: ret  z] [...]
0:
	jcs	l_01a0                             	| [$0192: jr   c,$01A0]
	move.b	bottom_floor_horizon_8003(a6),d0                   	| [$0194: ld   a,($8003)]
	cmp.b	#0x1D,d0                         	| [$0197: cp   $1D]
	bne.b	0f                               	| [...]
	rts                                    	| [$0199: ret  z] [...]
0:
	* scroll up
	move.b	#0x02,d0                        	| [$019a: ld   a,$02]
	move.b	d0,scroll_speed_8004(a6)        	| [$019c: ld   (scroll_speed_8004),a]
	rts                                    	| [$019f: ret]
l_01a0:
	move.b	bottom_floor_horizon_8003(a6),d0                   	| [$01a0: ld   a,($8003)]
	addq.b	#1,d0                           	| [$01a3: inc  a]
	jne	l_01b4                             	| [$01a4: jp   nz,$01B4]
	* FF: bottom of the building
	move.b	bottom_floor_fine_horizon_8002(a6),d0                   	| [$01a7: ld   a,($8002)]
											| [$01aa: or   a]
	jne	l_01b4                             	| [$01ab: jp   nz,$01B4]
	* 00: just before reaching bottom floor
	move.b	l_8001(a6),d0                   	| [$01ae: ld   a,($8001)]
	subq.b	#0x02,d0                        	| [$01b1: sub  $02]
	bpl.b	0f                               	| [...]
	rts                                    	| [$01b3: ret  m] [...]
0:
l_01b4:
	* scroll down
	move.b	#0xFE,d0                        	| [$01b4: ld   a,$FE]
	move.b	d0,scroll_speed_8004(a6)        	| [$01b6: ld   (scroll_speed_8004),a]
	rts                                    	| [$01b9: ret]

* if disabled, game scrolls down and restarts, seems to make up that scrolling down!
stabilize_view_handle_falls_01BA:
	lea	player_structure_851A(a6),a2       	| [$01ba: ld   ix,player_structure_851A]
	move.b	(character_situation_06,a2),d0  	| [$01be: ld   a,(ix+character_situation_06)]
											| [$01c1: or   a]
	jeq	player_falling_01DA                	| [$01c2: jr   z,player_falling_01DA]
	subq.b	#1,d0                           	| [$01c4: dec  a]
	jeq	player_inside_elevator_01E4        	| [$01c5: jr   z,player_inside_elevator_01E4]
	subq.b	#1,d0                           	| [$01c7: dec  a]
	jeq	player_above_elevator_01ED         	| [$01c8: jr   z,player_above_elevator_01ED]
	cmp.b	#CS_IN_ROOM_05-2,d0              	| [$01ca: cp   CS_IN_ROOM_05-2]
	jeq	l_01da                             	| [$01cc: jp   z,$01DA]
	move.b	(0x07,a2),d1                    	| [$01cf: ld   b,(ix+$07)]
	clr.b	d2                               	| [$01d2: ld   c,$00]
	move.b	(character_y_offset_03,a2),d3   	| [$01d4: ld   d,(ix+character_y_offset_03)]
	jra	compute_delta_height_1e6c                             	| [$01d7: jp   $1E6C]

* player falls
player_falling_01DA:
l_01da:
	move.b	(0x07,a2),d1                    	| [$01da: ld   b,(ix+$07)]
	clr.b	d2                               	| [$01dd: ld   c,$00]
	move.b	#0x06,d3                        	| [$01df: ld   d,$06]
	jra	compute_delta_height_1e6c                             	| [$01e1: jp   $1E6C]

player_inside_elevator_01E4:
	jbsr	load_character_elevator_structure_62CE	| [$01e4: call load_character_elevator_structure_62CE]
	move.b	(0x01,a3),d1                    	| [$01e7: ld   b,(iy+$01)]
	jra	player_in_or_on_elevator_01F4      	| [$01ea: jp   player_in_or_on_elevator_01F4]

player_above_elevator_01ED:
	jbsr	load_character_elevator_structure_62CE	| [$01ed: call load_character_elevator_structure_62CE]
	move.b	(0x01,a3),d1                    	| [$01f0: ld   b,(iy+$01)]
	addq.b	#1,d1                           	| [$01f3: inc  b]
player_in_or_on_elevator_01F4:
	clr.b	d2                               	| [$01f4: ld   c,$00]
	move.b	(a3),d0                    	| [$01f6: ld   a,(iy+$00)]
	move.b	d0,d3                           	| [$01f9: ld   d,a]
	move.b	(0x08,a2),d0                    	| [$01fa: ld   a,(ix+$08)]
	roxl.b	#1,d0                           	| [$01fd: rla]
	jcc	compute_delta_height_1e6c                             	| [$01fe: jp   nc,$1E6C]
	subq.b	#2,d1                           	| [$0201: dec  b] * 2
	jra	compute_delta_height_1e6c                             	| [$0203: jp   $1E6C]

update_scrolling_playfield_0206:
	clr.b	d0                               	| [$0206: xor  a]
	move.b	d0,l_8007(a6)                   	| [$0207: ld   ($8007),a]
	move.b	scroll_speed_8004(a6),d0        	| [$020a: ld   a,(scroll_speed_8004)]
											| [$020e: ld   b,$00]
	move.b	d0,d1                           	| [$020d: ld   c,a]
	ext.w	d1                         	| [$0210: rla]
	                        	| [$0211: jr   nc,$0215]
	* sign extend
	                         	| [$0213: ld   b,$FF]
l_0215:
	LOAD_WORD	absolute_height_802A(a6),d5             	| [$0215: ld   hl,($802A)]
	add.w	d1,d5                            	| [$0218: add  hl,bc]
	STORE_WORD	d5,absolute_height_802A(a6)            	| [$0219: ld   ($802A),hl]
	move.w	#0xDF,d3                          	| [$021c: ld   de,$00DF]
	add.w	d3,d5                            	| [$021f: add  hl,de]
	STORE_WORD	d5,l_8028(a6)            	| [$0220: ld   ($8028),hl]
	LOAD_D1D2_FROM_D1_16
	move.b	main_scroll_value_8005(a6),d0   	| [$0223: ld   a,(main_scroll_value_8005)]
	sub.b	d2,d0                            	| [$0226: sub  c] c = d1 lsb
	
	
	move.b	d0,main_scroll_value_8005(a6)   	| [$0227: ld   (main_scroll_value_8005),a]
	move.b	d2,d0                           	| [$022a: ld   a,c]
												| [$022b: or   a]
	bne.b	0f                               	| [...]
	rts                                    	    | [$022c: ret  z] [...]
0:
	jpl	update_bottom_horizon_027d              | [$022d: jp   p,$027D]
	* can only update bottom horizon by decreasing
	lea	l_8001(a6),a0                      	    | [$0230: ld   hl,$8001]
	move.b	(a0),d0                         	| [$0233: ld   a,(hl)] we need D0 for later!
	add.b	d2,d0								| [$0234: add  a,c]
	                         	                | [$0235: ld   (hl),a] we defer the store
	bcc.b	0f                               	| [...]
	move.b	d0,(a0)
	rts                                    	    | [$0236: ret  c] [...]
0:
	move.b	d0,(a0)
	add.b	#0x08,d0                         	| [$0237: add  a,$08]
	move.b	d0,(a0)+                         	| [$0239: ld   (hl),a]
	                           	                | [$023a: inc  hl]
	subq.b	#1,(a0)                         	| [$023b: dec  (hl)] bottom_floor_fine_horizon_8002
	jpl	l_0244                             	    | [$023c: jp   p,$0244]
	* we reached 0: reload fine horizon with 5
	move.b	#0x05,(a0)                      	| [$023f: ld   (hl),$05]
	* and decrease floor horizon                | [$0241: inc  hl]
	subq.b	#1,(1,a0)                         	| [$0242: dec  (hl)] bottom_floor_horizon_8003
	                           	                | [$0243: dec  hl]
l_0244:
	move.b	(a0)+,d2                         	| [$0244: ld   c,(hl)]
	                           	                | [$0245: inc  hl]
	move.b	(a0),d1                         	| [$0246: ld   b,(hl)]
l_0247:
	move.b	#0x66,d0                        	| [$0247: ld   a,$66]
	sub.b	d1,d0                            	| [$0249: sub  b]
	sub.b	d1,d0                            	| [$024a: sub  b]
	sub.b	d1,d0                            	| [$024b: sub  b]
	add.b	d0,d0                            	| [$024c: add  a,a]
	sub.b	d2,d0                            	| [$024d: sub  c]
* compute proper address in gfx rom
	moveq	#0,d5                               	| [$024f: ld   h,$00]
	move.b	d0,d5                           	| [$024e: ld   l,a]
	lsl.w	#5,d5                            	| [$0251: add  hl,hl]
												| [$0252: add  hl,hl]
												| [$0253: add  hl,hl]
												| [$0254: add  hl,hl]
												| [$0255: add  hl,hl] times 32
	exg	d3,d5                              	| [$0256: ex   de,hl]
	lea		gfxrom+0x5F80,a0                          	| [$0257: ld   hl,$5F80] start in gfx rom
	add.w	d3,a0                            	| [$025a: add  hl,de]
	move.w	d3,-(sp)                        	| [$025b: push de]
											| [$025c: ld   (gfx_pointer_d509),hl]
	lea	scroll_row_8008(a6),a1             	| [$025f: ld   de,scroll_row_8008]
											| [$0262: ld   hl,gfx_rom_D404]
* copy 32 bytes of gfx rom to ram, value read from D404 changes at each read!!!
* reads a row of building data from gfx rom to RAM
	move.b	#0x20,d1                        	| [$0265: ld   b,$20]
l_0267:
	move.b	(a0)+,(a1)+                         	| [$0267: ld   a,(hl)]
	                         	| [$0268: ld   (de),a]
	                           	| [$0269: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_0267                             	| [$026a: djnz $0267]
	move.w	(sp)+,d5                        	| [$026c: pop  hl]
	rol.w	#8,d5
	move.w	d5,d0                           	| [$026d: ld   a,h]
	and.b	#0x03,d0                         	| [$026e: and  $03]
	add.b	#0xC8,d0                         	| [$0270: add  a,$C8]
	move.b	d0,d5                           	| [$0272: ld   h,a]
	rol.w	#8,d5
	STORE_WORD	d5,scroll_tile_pointer_8006(a6)	| [$0273: ld   (scroll_tile_pointer_8006),hl]
	jbsr	add_dynamic_tiles_if_needed_029c                            	| [$0276: call $029C]
	jbsr	l_0387                            	| [$0279: call $0387]
	rts                                    	| [$027c: ret]

* can only increase horizon values
update_bottom_horizon_027d:
	lea	l_8001(a6),a0                      	| [$027d: ld   hl,$8001]
	move.b	(a0),d0                         	| [$0280: ld   a,(hl)]
	add.b	d2,d0                            	| [$0281: add  a,c]
	move.b	d0,(a0)                         	| [$0282: ld   (hl),a]
	sub.b	#0x08,d0                         	| [$0283: sub  $08]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0285: ret  c] [...]
0:
	move.b	d0,(a0)+                         	| [$0286: ld   (hl),a]
												| [$0287: inc  hl] now pointing on $8002
	addq.b	#1,(a0)                         	| [$0288: inc  (hl)] increment value
	move.b	(a0),d0                         	| [$0289: ld   a,(hl)]
	subq.b	#0x06,d0                        	| [$028a: sub  $06]
	jcs	l_0293                             	    | [$028c: jp   c,$0293]
	move.b	d0,(a0)                         	| [$028f: ld   (hl),a]
	                           	| [$0290: inc  hl] now pointing on bottom_floor_horizon_8003
	addq.b	#1,(1,a0)                         	| [$0291: inc  (hl)] increment bottom_floor_horizon_8003
	                           	| [$0292: dec  hl] now pointing on $8002
l_0293:
	move.b	(a0)+,d2                         	| [$0293: ld   c,(hl)]
	                           	| [$0294: inc  hl] now pointing on $8003
	move.b	(a0),d0                         	| [$0295: ld   a,(hl)]
	addq.b	#0x05,d0                        	| [$0296: add  a,$05]
	move.b	d0,d1                           	| [$0298: ld   b,a]
	jra	l_0247                             	| [$0299: jp   $0247]

* add red doors & broken lamps to ROM scroll data if needed
add_dynamic_tiles_if_needed_029c:
	move.b	scroll_tile_pointer_8006+1(a6),d0	| [$029c: ld   a,(scroll_tile_pointer_8006+1)]
	                             	| [$029f: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$02a0: ret  z] [...]
0:
	LOAD_WORD	bottom_floor_fine_horizon_8002(a6),d5             	| [$02a1: ld   hl,($8002)]
	* D5: XXYY: XX = current floor - 2 (bottom horizon), YY = fine position in-between floors
	move.b	scroll_speed_8004(a6),d0        	| [$02a4: ld   a,(scroll_speed_8004)]
	                             	| [$02a7: or   a]
	jmi	l_02af                             	| [$02a8: jp   m,$02AF]
	                           	| [$02ab: ld   a,h]
	add.w	#0x0500,d5          | [$02ac: add  a,$05] current floor + 3 instead
	                           	| [$02ae: ld   h,a]
l_02af:
	move.b	d5,d2                           	| [$02af: ld   c,l] save fine value
	move.w	d5,d0                           	| [$02b0: ld   a,h]
	rol.w	#8,d0                               | horizon in term of floor number
	cmp.b	#0x08,d0                         	| [$02b1: cp   $08]
	jcs	l_0340                             	| [$02b3: jp   c,$0340]
	cmp.b	#0x1F,d0                         	| [$02b6: cp   $1F]
	bcs.b	0f                               	| [...]
	rts                                    	| [$02b8: ret  nc] [...]
0:
	moveq	#0,d4                               | [$02ba: ld   d,$00]
	move.b	d0,d4                           	| [$02b9: ld   e,a]
	move.b	d2,d0                           	| [$02bc: ld   a,c]
	cmp.b	#0x05,d0                         	| [$02bd: cp   $05]
	jeq	l_02c6                             	| [$02bf: jp   z,$02C6]
	jbsr	add_red_door_tiles_to_scroll_data_02ca                            	| [$02c2: call $02CA]
	rts                                    	| [$02c5: ret]
l_02c6:
	jbsr	display_broken_lamp_if_needed_035f                            	| [$02c6: call $035F]
	rts                                    	| [$02c9: ret]

* < D4: floor number 0-31 (horizon up or bottom depending on scroll direction)
add_red_door_tiles_to_scroll_data_02ca:
	lea	red_door_position_array_8210(a6),a0	| [$02ca: ld   hl,red_door_position_array_8210]
	add.w	d4,a0                            	| [$02cd: add  hl,de]
	move.b	(a0),d0                         	| [$02ce: ld   a,(hl)]
	cmp.b	#0x08,d0                         	| [$02cf: cp   $08]
	bcs.b	0f                               	| [...]
	rts                                    	| [$02d1: ret  nc] [...]
0:	lea	scroll_row_8008(a6),a0             	| [$02d2: ld   hl,scroll_row_8008]
	move.b	d0,d1                           	| [$02d5: ld   b,a]
	movem.w	d3/d4,-(sp)                    	| [$02d6: push de]
	add.b	d0,d0                            	| [$02d7: add  a,a]
	add.b	d1,d0                            	| [$02d8: add  a,b]
	addq.b	#0x04,d0                        	| [$02d9: add  a,$04]
	moveq	#0,d4
	move.b	d0,d4                           	| [$02db: ld   e,a]
	add.w	d4,a0                            	| [$02dc: add  hl,de]
	movem.w	(sp)+,d3/d4                    	| [$02dd: pop  de]
l_02de:
	move.b	d2,d0                           	| [$02de: ld   a,c]
	                             	| [$02df: or   a]
	jeq	l_0322                             	| [$02e0: jp   z,$0322]
	cmp.b	#0x03,d0                         	| [$02e3: cp   $03]
	jeq	l_0309                             	| [$02e5: jp   z,$0309]
	jcc	l_030f                             	| [$02e8: jp   nc,$030F]
	subq.b	#1,d0                           	| [$02eb: dec  a]
	jeq	l_0309                             	| [$02ec: jp   z,$0309]
	move.b	#0x04,d2                        	| [$02ef: ld   c,$04]
	move.b	d4,d0                           	| [$02f1: ld   a,e]
	cmp.b	#0x14,d0                         	| [$02f2: cp   $14]
	jne	l_02f8                             	| [$02f4: jr   nz,$02F8]
	move.b	#0x06,d2                        	| [$02f6: ld   c,$06]
l_02f8:
	move.b	d1,d0                           	| [$02f8: ld   a,b]
	cmp.b	d2,d0                            	| [$02f9: cp   c]
	jcc	l_0303                             	| [$02fa: jp   nc,$0303]
	* draw mid part of red door, handle to the left
	move.b	#0x83,(a0)+                      	| [$02fd: ld   (hl),$83]
	                           	| [$02ff: inc  hl]
	move.b	#0x82,(a0)                      	| [$0300: ld   (hl),$82]
	rts                                    	| [$0302: ret]
l_0303:
	* draw mid part of red door, handle to the right
	move.b	#0x82,(a0)+                      	| [$0303: ld   (hl),$82]
	                           	| [$0305: inc  hl]
	move.b	#0x84,(a0)                      	| [$0306: ld   (hl),$84]
	rts                                    	| [$0308: ret]
l_0309:
	* draw lower part of red door
	move.b	#0x82,(a0)+                      	| [$0309: ld   (hl),$82]
	                           	| [$030b: inc  hl]
	move.b	#0x82,(a0)                      	| [$030c: ld   (hl),$82]
	rts                                    	| [$030e: ret]
l_030f:
	* upper part of door, dark floor
	move.b	#0x9E,d1                        	| [$030f: ld   b,$9E]
	move.b	d4,d0                           	| [$0311: ld   a,e]
	* check if dark floor
	cmp.b	#0x10,d0                         	| [$0312: cp   $10]
	jcc	l_031e                             	| [$0314: jp   nc,$031E]
	cmp.b	#0x0B,d0                         	| [$0317: cp   $0B]
	jcs	l_031e                             	| [$0319: jp   c,$031E]
	* draw upper part of door, normal floor
	move.b	#0x80,d1                        	| [$031c: ld   b,$80]
l_031e:
	move.b	d1,(a0)+                         	| [$031e: ld   (hl),b]
	                           	| [$031f: inc  hl]
	move.b	d1,(a0)                         	| [$0320: ld   (hl),b]
	rts                                    	| [$0321: ret]

l_0322:
	move.b	#0xE0,d2                        	| [$0322: ld   c,$E0]
	subq.w	#1,a0                           	| [$0324: dec  hl]
	move.b	d1,d0                           	| [$0325: ld   a,b]
	cmp.b	#0x04,d0                         	| [$0326: cp   $04]
	jcs	l_032e                             	| [$0328: jr   c,$032E]
	move.b	#0xE2,d2                        	| [$032a: ld   c,$E2]
	addq.w	#2,a0                           	| [$032c: inc  hl] * 2
l_032e:
	move.b	d4,d0                           	| [$032e: ld   a,e]
	cmp.b	#0x0B,d0                         	| [$032f: cp   $0B]
	jcs	l_033b                             	| [$0331: jr   c,$033B]
	cmp.b	#0x10,d0                         	| [$0333: cp   $10]
	jcc	l_033b                             	| [$0335: jr   nc,$033B]
	move.b	d2,d0                           	| [$0337: ld   a,c]
	addq.b	#0x04,d0                        	| [$0338: add  a,$04]
	move.b	d0,d2                           	| [$033a: ld   c,a]
l_033b:
	move.b	d2,(a0)+                         	| [$033b: ld   (hl),c]
												| [$033c: inc  hl]
	addq.b	#1,d2                           	| [$033d: inc  c]
	move.b	d2,(a0)                         	| [$033e: ld   (hl),c]
	rts                                    	| [$033f: ret]
l_0340:
	tst.b	d0                             	| [$0340: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$0341: ret  z] [...]
0:
	moveq   #0,d3                               	| [$0343: ld   d,$00]
	move.b	d0,d3                           	| [$0342: ld   e,a]
	move.b	d2,d0                           	| [$0345: ld   a,c]
	cmp.b	#0x05,d0                         	| [$0346: cp   $05]
	bne.b	0f                               	| [...]
	rts                                    	| [$0348: ret  z] [...]
0:
	lea	red_door_position_array_8210(a6),a0	| [$0349: ld   hl,red_door_position_array_8210]
	add.w	d3,a0                            	| [$034c: add  hl,de]
	move.b	(a0),d0                         	| [$034d: ld   a,(hl)]
	move.b	d0,d1                           	| [$034e: ld   b,a]
	cmp.b	#0x08,d0                         	| [$034f: cp   $08]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0351: ret  nc] [...]
0:
	lea	l_800B(a6),a0                      	| [$0352: ld   hl,$800B]
	tst.b	d0								| [$0355: or   a]
	jeq	l_02de                             	| [$0356: jp   z,$02DE]
	lea	l_8022(a6),a0                      	| [$0359: ld   hl,$8022]
	jra	l_02de                             	| [$035c: jp   $02DE]

display_broken_lamp_if_needed_035f:
	moveq	#0,d0
	move.b	d4,d0                           	| [$035f: ld   a,e]
	sub.b	#0x08,d0                         	| [$0360: sub  $08]
	move.w	d0,d4                           	| [$0362: ld   e,a]
	cmp.b	#0x03,d0                         	| [$0363: cp   $03]
	jcs	l_036b                             	| [$0365: jp   c,$036B]
	cmp.b	#0x08,d0                         	| [$0368: cp   $08]
	bcc.b	l_036b                               	| [...]
	rts                                    	| [$036a: ret  c] [...]
l_036b:
	lea	l_81DA(a6),a0                      	| [$036b: ld   hl,$81DA]
	add.w	d4,a0                            	| [$036e: add  hl,de]
	move.b	(a0),d1                         	| [$036f: ld   b,(hl)]
	move.b	d4,d0                           	| [$0370: ld   a,e]
	* load broken lamp tile instead
	move.b	#0x97,d0                        	| [$0373: ld   a,$97]
	cmp.b	#0x0C,d4                         	| [$0371: cp   $0C] switched instructions, preserve flags!
	jeq	l_0380                             	| [$0375: jp   z,$0380]
	btst.b	#0,d1                           	| [$0378: bit  0,b]
	jne	l_0380                             	| [$037a: jp   nz,$0380]
	move.b	d0,l_801D(a6)                   	| [$037d: ld   ($801D),a]
l_0380:
	btst.b	#1,d1                           	| [$0380: bit  1,b]
	beq.b	0f                               	| [...]
	rts                                    	| [$0382: ret  nz] [...]
0:
	move.b	d0,l_8011(a6)                   	| [$0383: ld   ($8011),a]
	rts                                    	| [$0386: ret]

l_0387:
	move.b	scroll_speed_8004(a6),d0        	| [$0387: ld   a,(scroll_speed_8004)]
	                             	| [$038a: or   a]
	bmi.b	0f                               	| [...]
	rts                                    	| [$038b: ret  p] [...]
0:
	LOAD_WORD	bottom_floor_fine_horizon_8002(a6),d5             	| [$038c: ld   hl,($8002)]
	LOAD_D5D6_FROM_D5_16
	
	subq.b	#0x1,d5                           	| [$038f: dec  h]
	jeq	l_03ac                             	| [$0390: jp   z,$03AC]
	addq.b	#0x1,d5                           	| [$0393: inc  h]
	beq.b	0f                               	| [...]
	rts                                    	| [$0394: ret  nz] [...]
0:
	subq.b	#1,d6                           	| [$0395: dec  l]
	bpl.b	0f                               	| [...]
	rts                                    	| [$0396: ret  m] [...]
0:
	move.b	l_802D(a6),d0                   	| [$0397: ld   a,($802D)]
	add.b	d0,d0                            	| [$039a: add  a,a]
	add.b	d0,d0                            	| [$039b: add  a,a]
	moveq   #0,d3                               	| [$039c: ld   d,$00]
	move.b	d0,d3                           	| [$039e: ld   e,a]
	lea	l_800E(a6),a0                      	| [$039f: ld   hl,$800E]
	add.w	d3,a0                            	| [$03a2: add  hl,de]
 	clr.b	(a0)+                             	| [$03a3: ld   (hl),$00]
	                           	| [$03a5: inc  hl]
	clr.b	(a0)+                             	| [$03a6: ld   (hl),$00]
	                           	| [$03a8: inc  hl]
	clr.b	(a0)                             	| [$03a9: ld   (hl),$00]
	rts                                    	| [$03ab: ret]
l_03ac:
	subq.b	#1,d6                           	| [$03ac: dec  l]
	bmi.b	0f                               	| [...]
	rts                                    	| [$03ad: ret  p] [...]
0:
	move.b	l_802D(a6),d0                   	| [$03ae: ld   a,($802D)]
	add.b	d0,d0                            	| [$03b1: add  a,a]
	add.b	d0,d0                            	| [$03b2: add  a,a]
	clr.w	d3                               	| [$03b3: ld   d,$00]
	move.b	d0,d3                           	| [$03b5: ld   e,a]
	lea	l_800E(a6),a0                      	| [$03b6: ld   hl,$800E]
	add.w	d3,a0                            	| [$03b9: add  hl,de]
	move.b	#0x4D,(a0)+                      	| [$03ba: ld   (hl),$4D]
										| [$03bc: inc  hl]
	clr.b	(a0)+                             	| [$03bd: ld   (hl),$00]
	                           	| [$03bf: inc  hl]
	move.b	#0x4E,(a0)                      	| [$03c0: ld   (hl),$4E]
	rts                                    	| [$03c2: ret]

* update hardware scroll value & tile data (if needed, if speed != 0)
update_main_scrolling_03C3:
	move.b	scroll_speed_8004(a6),d0        	| [$03c3: ld   a,(scroll_speed_8004)] 2 (down), 0 (not moving), -2 (up)
	                             	| [$03c6: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$03c7: ret  z] [...]
0:
* set main scroll value for main view (building stories)
	move.b	main_scroll_value_8005(a6),d0   	| [$03c8: ld   a,(main_scroll_value_8005)]
	        	| [$03cb: ld   hl,main_scroll_columns_D020]
	            | [$03ce: ld   b,$20]
	* all columns set to the same value, different scroll values not used for building
	jbsr   osd_set_main_scroll        | [$03d0: ld   (hl),a]
										| [$03d1: inc  hl]
	                           	| [...]
	                             	| [$03d2: djnz $03D0]
	LOAD_WORD	scroll_tile_pointer_8006(a6),d5	| [$03d4: ld   hl,(scroll_tile_pointer_8006)]
	ror.w	#8,d5
	move.b	d5,d0                           	| [$03d7: ld   a,h]
	ror.w	#8,d5
	tst.b	d0                             	| [$03d8: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$03d9: ret  z] [...]
0:
	sub.w	#0x8000,d5
	add.l	a6,d5					| add ram base
	exg	a0,d5                              	| [$03da: ex   de,hl]
* set top row with new tiles
	lea	scroll_row_8008(a6),a1             	| [$03db: ld   hl,scroll_row_8008]
	move.w	#0x1F,d1
0:
    move.b    (a1)+,d0
	jbsr	osd_w_videoram                   | [$03de: ldi] and the 31 other ldi calls!
	addq.w	#1,a0
	dbf		d1,0b
	rts                                    	| [$041e: ret]

l_041f:
	lea	opening_door_flag_array_8377(a6),a0                      	| [$041f: ld   hl,$8377]
	move.b	player_structure_851A+current_floor_07(a6),d0	| [$0422: ld   a,(player_structure_851A+current_floor_07)]
	move.b	d0,d2                           	| [$0425: ld   c,a]
	subq.b	#1,d2                           	| [$0426: dec  c]
	move.b	#0x03,d1                        	| [$0427: ld   b,$03]
l_0429:
	move.b	(a0),d0                         	| [$0429: ld   a,(hl)]
	cmp.b	#0x03,d0                         	| [$042a: cp   $03]
	jcc	l_0434                             	| [$042c: jr   nc,$0434]
	addq.w	#1,a0                           	| [$042e: inc  hl]
	addq.b	#1,d2                           	| [$042f: inc  c]
	subq.b	#1,d1                           	| [...]
	jne	l_0429                             	| [$0430: djnz $0429]
	move.b	#0x28,d2                        	| [$0432: ld   c,$28]
l_0434:
	move.b	l_8530(a6),d0                   	| [$0434: ld   a,($8530)]
	move.b	d0,d3                           	| [$0437: ld   d,a]
	move.b	#0x04,d1                        	| [$0438: ld   b,$04] 4 enemies
	lea	enemy_1_853A(a6),a2                	| [$043a: ld   ix,enemy_1_853A]
* start loop on enemies
l_043e:
	move.b	(0x09,a2),d0                    	| [$043e: ld   a,(ix+$09)]
	cmp.b	#0x05,d0                         	| [$0441: cp   $05]
	jcc	l_0468                             	| [$0443: jr   nc,$0468]
	move.b	(0x0f,a2),d0                    	| [$0445: ld   a,(ix+$0f)]
	                             	| [$0448: or   a]
	jne	l_0468                             	| [$0449: jr   nz,$0468]
	move.b	(0x1c,a2),d0                    	| [$044b: ld   a,(ix+$1c)]
	cmp.b	#0x0C,d0                         	| [$044e: cp   $0C]
	jeq	l_0468                             	| [$0450: jr   z,$0468]
	move.b	(character_situation_06,a2),d0  	| [$0452: ld   a,(ix+character_situation_06)]
	                             	| [$0455: or   a]
	jne	l_0468                             	| [$0456: jr   nz,$0468]
* enemy on ground (not in elevator)
	move.b	(0x07,a2),d0                    	| [$0458: ld   a,(ix+$07)]
	cmp.b	d2,d0                            	| [$045b: cp   c]
	jeq	l_0472                             	| [$045c: jr   z,$0472]
	move.b	(0x16,a2),d0                    	| [$045e: ld   a,(ix+$16)]
	sub.b	d3,d0                            	| [$0461: sub  d]
	jcs	l_0468                             	| [$0462: jr   c,$0468]
	cmp.b	#0x50,d0                         	| [$0464: cp   $50]
	jcc	l_0472                             	| [$0466: jr   nc,$0472]
l_0468:
	move.b	d3,d0                           	| [$0468: ld   a,d]
	move.w	#0x0020,d3                      	| [$0469: ld   de,$0020] 32
	add.w	d3,a2                            	| [$046c: add  ix,de]
	move.b	d0,d3                           	| [$046e: ld   d,a]
	subq.b	#1,d1                           	| [...]
	jne	l_043e                             	| [$046f: djnz $043E]
	rts                                    	| [$0471: ret]
l_0472:
	move.b	(0x07,a2),d0                    	| [$0472: ld   a,(ix+$07)]
	cmp.b	#0x08,d0                         	| [$0475: cp   $08]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0477: ret  c] [...]
0:
	cmp.b	#0x14,d0                         	| [$0478: cp   $14]
	bne.b	0f                               	| [...]
	rts                                    	| [$047a: ret  z] [...]
0:
	move.b	d0,d4                           	| [$047b: ld   e,a]
	move.b	(character_x_00,a2),d0          	| [$047c: ld   a,(ix+character_x_00)]
	move.b	d0,d2                           	| [$047f: ld   c,a]
	cmp.b	#0x10,d0                         	| [$0480: cp   $10]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0482: ret  c] [...]
0:
	cmp.b	#0xE0,d0                         	| [$0483: cp   $E0]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0485: ret  nc] [...]
0:
	clr.w	d3                               	| [$0486: ld   d,$00]
	move.b	d4,d3
	lea	red_door_position_array_8210(a6),a0	| [$0488: ld   hl,red_door_position_array_8210]
	add.w	d3,a0                            	| [$048b: add  hl,de]
	moveq	#0,d1
	move.b	(a0),d1                         	| [$048c: ld   b,(hl)]
	* don't add 1, we use dbf						| [$048d: inc  b]
												| [$048e: xor  a]
	st.b	d0                           	| [$048f: dec  a]
l_0490:
	roxr.b	#1,d0                           	| [$0490: rra]
	dbf	d1,l_0490                             	| [$0491: djnz $0490]
	
	lea	l_81F1(a6),a0                      	| [$0493: ld   hl,$81F1]
	add.w	d3,a0                            	| [$0496: add  hl,de]
	and.b	(a0),d0                          	| [$0497: and  (hl)]
	move.b	d0,d3                           	| [$0498: ld   d,a]
	move.b	d2,d0                           	| [$0499: ld   a,c]
	add.b	(character_x_right_01,a2),d0     	| [$049a: add  a,(ix+character_x_right_01)]
	roxr.b	#1,d0                           	| [$049d: rra]
	move.b	d0,d2                           	| [$049e: ld   c,a]
	cmp.b	#0x7B,d0                         	| [$049f: cp   $7B]
	jcc	l_04be                             	| [$04a1: jr   nc,$04BE]
	move.b	#0x04,d1                        	| [$04a3: ld   b,$04]
	clr.b	d4                               	| [$04a5: ld   e,$00]
	move.b	#0x08,d0                        	| [$04a7: ld   a,$08]
l_04a9:
	add.b	#0x18,d0                         	| [$04a9: add  a,$18]
	rol.b	#1,d3                            	| [$04ab: rlc  d]
	jcc	l_04b2                             	| [$04ad: jr   nc,$04B2]
	cmp.b	d2,d0                            	| [$04af: cp   c]
	jcc	l_04d9                             	| [$04b0: jr   nc,$04D9]
l_04b2:
	addq.b	#1,d4                           	| [$04b2: inc  e]
	subq.b	#1,d1                           	| [...]
	jne	l_04a9                             	| [$04b3: djnz $04A9]
l_04b5:
	subq.b	#1,d4                           	| [$04b5: dec  e]
	ror.b	#1,d3                            	| [$04b6: rrc  d]
	jcs	l_04d9                             	| [$04b8: jr   c,$04D9]
	sub.b	#0x18,d0                         	| [$04ba: sub  $18]
	jra	l_04b5                             	| [$04bc: jr   $04B5]
l_04be:
	move.b	#0x04,d1                        	| [$04be: ld   b,$04]
	move.b	#0x07,d4                        	| [$04c0: ld   e,$07]
	move.b	#0xF0,d0                        	| [$04c2: ld   a,$F0]
l_04c4:
	sub.b	#0x18,d0                         	| [$04c4: sub  $18]
	ror.b	#1,d3                            	| [$04c6: rrc  d]
	jcc	l_04cd                             	| [$04c8: jr   nc,$04CD]
	cmp.b	d2,d0                            	| [$04ca: cp   c]
	jcs	l_04d9                             	| [$04cb: jr   c,$04D9]
l_04cd:
	subq.b	#1,d4                           	| [$04cd: dec  e]
	subq.b	#1,d1                           	| [...]
	jne	l_04c4                             	| [$04ce: djnz $04C4]
l_04d0:
	addq.b	#1,d4                           	| [$04d0: inc  e]
	rol.b	#1,d3                            	| [$04d1: rlc  d]
	jcs	l_04d9                             	| [$04d3: jr   c,$04D9]
	add.b	#0x18,d0                         	| [$04d5: add  a,$18]
	jra	l_04d0                             	| [$04d7: jr   $04D0]
l_04d9:
	subq.b	#0x04,d0                        	| [$04d9: sub  $04]
	move.b	d0,(0x1a,a2)                    	| [$04db: ld   (ix+$1a),a]
	move.b	#0x0C,(0x1c,a2)                 	| [$04de: ld   (ix+$1c),$0C]
	move.b	d4,(0x1d,a2)                    	| [$04e2: ld   (ix+$1d),e]
	rts                                    	| [$04e5: ret]
l_04e6:
	move.b	(0x12,a2),d0                    	| [$04e6: ld   a,(ix+$12)]
	and.b	#0x03,d0                         	| [$04e9: and  $03]
	cmp.b	#0x03,d0                         	| [$04eb: cp   $03]
	jne	l_050f                             	| [$04ed: jr   nz,$050F]
	jbsr	l_0529                            	| [$04ef: call $0529]
	move.b	#0x0A,d1                        	| [$04f2: ld   b,$0A]
	move.b	(0x10,a2),d0                    	| [$04f4: ld   a,(ix+$10)]
	                             	| [$04f7: or   a]
	jeq	l_04fc                             	| [$04f8: jr   z,$04FC]
	move.b	#0x07,d1                        	| [$04fa: ld   b,$07]
l_04fc:
	move.b	d1,d2                           	| [$04fc: ld   c,b]
	jbsr	pseudo_random_with_regsave_1DF5                	| [$04fd: call pseudo_random_with_regsave_1DF5]
	cmp.b	#0x40,d0                         	| [$0500: cp   $40]
	jcs	l_0507                             	| [$0502: jr   c,$0507]
	move.b	d2,d0                           	| [$0504: ld   a,c]
	add.b	d0,d0                            	| [$0505: add  a,a]
	move.b	d0,d2                           	| [$0506: ld   c,a]
l_0507:
	jbsr	get_random_value_1e3e                            	| [$0507: call $1E3E]
	add.b	d2,d0                            	| [$050a: add  a,c]
	move.b	d0,(0x10,a2)                    	| [$050b: ld   (ix+$10),a]
	rts                                    	| [$050e: ret]
l_050f:
	move.b	#0x03,(0x12,a2)                 	| [$050f: ld   (ix+$12),$03]
	move.b	#0x0A,d1                        	| [$0513: ld   b,$0A]
	move.b	#0x14,d2                        	| [$0515: ld   c,$14]
	move.b	(0x0e,a2),d0                    	| [$0517: ld   a,(ix+$0e)]
	                             	| [$051a: or   a]
	jeq	l_0521                             	| [$051b: jr   z,$0521]
	move.b	#0x08,d1                        	| [$051d: ld   b,$08]
	move.b	#0x0F,d2                        	| [$051f: ld   c,$0F]
l_0521:
	jbsr	get_random_value_1e3e                            	| [$0521: call $1E3E]
	add.b	d2,d0                            	| [$0524: add  a,c]
	move.b	d0,(0x10,a2)                    	| [$0525: ld   (ix+$10),a]
	rts                                    	| [$0528: ret]

l_0529:
	lea	table_0548,a0                      	| [$0529: ld   hl,table_0548]
	move.b	(0x0e,a2),d0                    	| [$052c: ld   a,(ix+$0e)]
	                             	| [$052f: or   a]
	jeq	l_0535                             	| [$0530: jr   z,$0535]
	lea	table_0548+0x10,a0                          	| [$0532: ld   hl,$0558]
l_0535:
	move.b	(enemy_aggressivity_13,a2),d4   	| [$0535: ld   e,(ix+enemy_aggressivity_13)]
	moveq   #0,d3                               	| [$0538: ld   d,$00]
	move.b	d4,d3
	add.w	d3,a0                            	| [$053a: add  hl,de]
 	jbsr	pseudo_random_with_regsave_1DF5                	| [$053b: call pseudo_random_with_regsave_1DF5]
	moveq	#0,d1                               	| [$053f: ld   b,$00]
	cmp.b	(a0),d0                          	| [$053e: cp   (hl)]
	jcc	l_0544                             	| [$0541: jr   nc,$0544]
	addq.b	#1,d1                           	| [$0543: inc  b]
l_0544:
	move.b	d1,(0x12,a2)                    	| [$0544: ld   (ix+$12),b]
	rts                                    	| [$0547: ret]

table_0548:
	.byte	0x00
	.byte	0x00
	.byte	0x10,0x10
	.byte	0x20,0x20
	.byte	0x30,0x30
	.byte	0x40
	.byte	0x40
	.byte	0x50
	.byte	0x50
	.byte	0x60
	.byte	0x60
	.byte	0x70
	.byte	0x70
	.byte	0x00
	.byte	0x10,0x20
	.byte	0x30,0x40
	.byte	0x50
	.byte	0x60
	.byte	0x70
	.byte	0x80
	.byte	0x90
	.byte	0xA0
	.byte	0xB0
	.byte	0xC0
	.byte	0xD0
	.byte	0xE0
	.byte	0xF0
	.align	2

* < C set if enemy should shoot
should_enemy_shoot_0568:
	move.b	(enemy_unknown_timer_0e,a2),d0                    	| [$0568: ld   a,(ix+$0e)]
	                             	            | [$056b: or   a]
	jne	l_057e                             	    | [$056c: jr   nz,$057E]
	* compute X distance between player and enemy
	move.b	player_structure_851A(a6),d0    	| [$056e: ld   a,(player_structure_851A)]
	sub.b	(character_x_00,a2),d0           	| [$0571: sub  (ix+character_x_00)]
	INVERT_XC_FLAGS                        	    | [$0574: ccf]
	roxl.b	#1,d0                           	| [$0575: rla]
	and.b	#0x01,d0                         	| [$0576: and  $01]
	cmp.b	(character_facing_direction_0b,a2),d0      | [$0578: cp   (ix+$0b)]
	jne	enemy_doesnt_shoot_058e         | [$057b: jp   nz,$058E] don't shoot, enemy is not seeing player / would shoot on the opposite direction

l_057e:
	move.b	player_structure_851A+character_situation_06(a6),d0	| [$057e: ld   a,(player_structure_851A+character_situation_06)]
	cmp.b	#CS_FALLING_03,d0                	| [$0581: cp   CS_FALLING_03]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0583: ret  nc] [...]
0:
* walking, elevator or falling
	jbsr	l_05e1                            	| [$0584: call $05E1]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0587: ret  nc] [...]
0:
	jbsr	does_facing_enemy_see_player_0590     | [$0588: call $0590]
	rts                                    	| [$058b: ret]

enemy_shoots_058c:
	SET_XC_FLAGS                           	| [$058c: scf]
	rts                                    	| [$058d: ret]
enemy_doesnt_shoot_058e:
	clr.b	d0                              | [$058e: xor  a]
	rts                                    	| [$058f: ret]

does_facing_enemy_see_player_0590:
	move.b	player_structure_851A+current_floor_07(a6),d0   	| [$0590: ld   a,(player_structure_851A+0x07)]
	move.b	d0,d1                           	| [$0593: ld   b,a]
	cmp.b	#0x12,d0                         	| [$0594: cp   $12]
	jne	l_05ae                             	| [$0596: jr   nz,$05AE]
	* floor 18 is special: there's a wall in the middle
	move.b	player_structure_851A(a6),d0    	| [$0598: ld   a,(player_structure_851A)]
	cmp.b	#0x7D,d0                         	| [$059b: cp   $7D]
	jcs	l_05c8                             	| [$059d: jr   c,$05C8]
	move.b	(current_floor_07,a2),d0                    	| [$059f: ld   a,(ix+$07)]
	cmp.b	#0x12,d0                         	| [$05a2: cp   $12]
	jne	enemy_doesnt_shoot_058e                 | [$05a4: jp   nz,$058E]
	move.b	(character_x_00,a2),d0          	| [$05a7: ld   a,(ix+character_x_00)]
	cmp.b	#0x7D,d0                         	| [$05aa: cp   $7D]
	INVERT_XC_FLAGS                        	| [$05ac: ccf]
	rts                                    	| [$05ad: ret]
l_05ae:
	move.b	d1,d0                           	| [$05ae: ld   a,b]
	cmp.b	#0x14,d0                         	| [$05af: cp   $14]
	jne	l_05c8                             	| [$05b1: jr   nz,$05C8]
	move.b	player_structure_851A(a6),d0    	| [$05b3: ld   a,(player_structure_851A)]
	cmp.b	#0xAC,d0                         	| [$05b6: cp   $AC]
	jcs	l_05c8                             	| [$05b8: jr   c,$05C8]
	move.b	(current_floor_07,a2),d0          | [$05ba: ld   a,(ix+$07)]
	* floor 20 is special: there's a wall on 2/thirds on the right
	cmp.b	#0x14,d0                         	| [$05bd: cp   $14]
	jne	enemy_doesnt_shoot_058e                	| [$05bf: jr   nz,$058E] player & enemy on different rooms on floor 20!
	move.b	(character_x_00,a2),d0          	| [$05c1: ld   a,(ix+character_x_00)]
	cmp.b	#0xAC,d0                         	| [$05c4: cp   $AC]
	INVERT_XC_FLAGS                        	| [$05c6: ccf]
	rts                                    	| [$05c7: ret]
l_05c8:
	move.b	(current_floor_07,a2),d0           | [$05c8: ld   a,(ix+$07)]
	move.b	d0,d1                           	| [$05cb: ld   b,a]
	cmp.b	#0x12,d0                         	| [$05cc: cp   $12] 
	jne	l_05d6                             	    | [$05ce: jr   nz,$05D6]
	* player & enemy can be on different rooms on floor 18!
	move.b	(character_x_00,a2),d0          	| [$05d0: ld   a,(ix+character_x_00)]
	cmp.b	#0x7D,d0                         	| [$05d3: cp   $7D]
	rts                                    	| [$05d5: ret]
l_05d6:
	move.b	d1,d0                           	| [$05d6: ld   a,b]
	cmp.b	#0x14,d0                         	| [$05d7: cp   $14]
	jne	enemy_shoots_058c                             	| [$05d9: jr   nz,$058C]
	move.b	(character_x_00,a2),d0          	| [$05db: ld   a,(ix+character_x_00)]
	cmp.b	#0xAC,d0                         	| [$05de: cp   $AC]
	rts                                    	| [$05e0: ret]
l_05e1:
	move.b	l_8530(a6),d0                   	| [$05e1: ld   a,($8530)]
	cmp.b	(0x16,a2),d0                     	| [$05e4: cp   (ix+$16)]
	jcs	l_05ed                             	| [$05e7: jr   c,$05ED]
	cmp.b	(0x15,a2),d0                     	| [$05e9: cp   (ix+$15)]
	rts                                    	| [$05ec: ret]
l_05ed:
	move.b	l_852F(a6),d0                   	| [$05ed: ld   a,($852F)]
	cmp.b	(0x16,a2),d0                     	| [$05f0: cp   (ix+$16)]
	INVERT_XC_FLAGS                        	| [$05f3: ccf]
	rts                                    	| [$05f4: ret]

l_05f5:
	jbsr	pseudo_random_with_regsave_1DF5                	| [$05f5: call pseudo_random_with_regsave_1DF5]
	lea	odds_table_0659,a0                          	| [$05f8: ld   hl,$0659]
	moveq   #0,d3                               	| [$05fe: ld   d,$00]
	move.b	(enemy_aggressivity_13,a2),d3   	| [$05fb: ld   e,(ix+enemy_aggressivity_13)]
	add.w	d3,a0                            	| [$0600: add  hl,de]
	cmp.b	(a0),d0                          	| [$0601: cp   (hl)]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0602: ret  nc] [...]
0:
	* special attack (which one???) on random
	lea	l_82FD(a6),a3                      	| [$0603: ld   iy,$82FD]
	move.b	(character_x_right_01,a2),d0    	| [$0607: ld   a,(ix+character_x_right_01)]
	add.b	(character_x_00,a2),d0           	| [$060a: add  a,(ix+character_x_00)]
	roxr.b	#1,d0                           	| [$060d: rr   a]
	move.b	d0,d2                           	| [$060f: ld   c,a]
	move.b	#0x03,d1                        	| [$0610: ld   b,$03]
	move.w	#0x0008,d3                      	| [$0612: ld   de,$0008] 8
l_0615:
	move.b	(0x02,a3),d0                    	| [$0615: ld   a,(iy+$02)]
	addq.b	#1,d0                           	| [$0618: inc  a]
	jeq	l_063d                             	| [$0619: jr   z,$063D]
	move.b	(a3),d0                    	| [$061b: ld   a,(iy+$00)]
	cmp.b	(0x07,a2),d0                     	| [$061e: cp   (ix+$07)]
	jne	l_063d                             	| [$0621: jr   nz,$063D]
	move.b	(0x01,a3),d0                    	| [$0623: ld   a,(iy+$01)]
	cmp.b	#0x1F,d0                         	| [$0626: cp   $1F]
	jcc	l_063d                             	| [$0628: jr   nc,$063D]
	cmp.b	#0x0C,d0                         	| [$062a: cp   $0C]
	jcs	l_063d                             	| [$062c: jr   c,$063D]
	move.b	(character_display_priority_04,a3),d0      	| [$062e: ld   a,(iy+character_display_priority_04)]
	add.b	(0x03,a3),d0                     	| [$0631: add  a,(iy+$03)]
	sub.b	d2,d0                            	| [$0634: sub  c]
	jcc	l_0639                             	| [$0635: jr   nc,$0639]
	neg.b	d0                               	| [$0637: neg]
l_0639:
	cmp.b	#0x14,d0                         	| [$0639: cp   $14]
	jcs	l_0642                             	| [$063b: jr   c,$0642]
l_063d:
	add.w	d3,a3                            	| [$063d: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_0615                             	| [$063f: djnz $0615]
	rts                                    	| [$0641: ret]
l_0642:
	move.b	(0x01,a3),d0                    	| [$0642: ld   a,(iy+$01)]
	move.b	#0x01,d1                        	| [$0645: ld   b,$01]
	cmp.b	#0x15,d0                         	| [$0647: cp   $15]
	jcc	l_064c                             	| [$0649: jr   nc,$064C]
	addq.b	#1,d1                           	| [$064b: inc  b]
l_064c:
	move.b	(0x12,a2),d0                    	| [$064c: ld   a,(ix+$12)]
	and.b	#0x04,d0                         	| [$064f: and  $04]
	or.b	d1,d0                             	| [$0651: or   b]
	move.b	d0,(0x12,a2)                    	| [$0652: ld   (ix+$12),a]
	jbsr	l_0669                            	| [$0655: call $0669]
	rts                                    	| [$0658: ret]

odds_table_0659:
	.byte	0x00
	.byte	0x00
	.byte	0x02
	.byte	0x02
	.byte	0x04
	.byte	0x08
	.byte	0x10,0x10
	.byte	0x20,0x20
	.byte	0x40
	.byte	0x40
	.byte	0x60
	.byte	0x80
	.byte	0xC4,0xFF
	.align	2

l_0669:
	move.b	(0x12,a2),d0                    	| [$0669: ld   a,(ix+$12)]
	and.b	#0x03,d0                         	| [$066c: and  $03]
	cmp.b	#0x02,d0                         	| [$066e: cp   $02]
	beq.b	0f                               	| [...]
	rts                                    	| [$0670: ret  nz] [...]
0:
	move.b	(character_x_00,a2),d0          	| [$0671: ld   a,(ix+character_x_00)]
	cmp.b	#0x10,d0                         	| [$0674: cp   $10]
	jcs	l_06aa                             	| [$0676: jr   c,$06AA]
	cmp.b	#0xF0,d0                         	| [$0678: cp   $F0]
	jcc	l_06aa                             	| [$067a: jr   nc,$06AA]
	move.b	(current_floor_07,a2),d0                    	| [$067c: ld   a,(ix+$07)]
	                             	| [$067f: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$0680: ret  z] [...]
0:
	cmp.b	#0x06,d0                         	| [$0681: cp   $06]
	jcs	l_068c                             	| [$0683: jr   c,$068C]
	jeq	l_0697                             	| [$0685: jr   z,$0697]
	cmp.b	#0x07,d0                         	| [$0687: cp   $07]
	jeq	l_06a1                             	| [$0689: jr   z,$06A1]
	rts                                    	| [$068b: ret]
l_068c:
	move.b	(character_x_00,a2),d0          	| [$068c: ld   a,(ix+character_x_00)]
	cmp.b	#0x41,d0                         	| [$068f: cp   $41]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0691: ret  c] [...]
0:
	cmp.b	#0xB4,d0                         	| [$0692: cp   $B4]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0694: ret  nc] [...]
0:
	jra	l_06aa                             	| [$0695: jr   $06AA]
l_0697:
	move.b	(character_x_00,a2),d0          	| [$0697: ld   a,(ix+character_x_00)]
	cmp.b	#0x41,d0                         	| [$069a: cp   $41]
	bcc.b	0f                               	| [...]
	rts                                    	| [$069c: ret  c] [...]
0:
	cmp.b	#0x5A,d0                         	| [$069d: cp   $5A]
	jcs	l_06aa                             	| [$069f: jr   c,$06AA]
l_06a1:
	move.b	(character_x_00,a2),d0          	| [$06a1: ld   a,(ix+character_x_00)]
	cmp.b	#0xA0,d0                         	| [$06a4: cp   $A0]
	bcc.b	0f                               	| [...]
	rts                                    	| [$06a6: ret  c] [...]
0:
	cmp.b	#0xB4,d0                         	| [$06a7: cp   $B4]
	bcs.b	0f                               	| [...]
	rts                                    	| [$06a9: ret  nc] [...]
0:
l_06aa:
	move.b	(0x12,a2),d0                    	| [$06aa: ld   a,(ix+$12)]
	and.b	#0x04,d0                         	| [$06ad: and  $04]
	addq.b	#1,d0                           	| [$06af: inc  a]
	move.b	d0,(0x12,a2)                    	| [$06b0: ld   (ix+$12),a]
	rts                                    	| [$06b3: ret]
l_06b4:
	jbsr	l_0755                            	| [$06b4: call $0755]
	move.b	l_8030(a6),d0                   	| [$06b7: ld   a,($8030)]
	cmp.b	#0x0C,d0                         	| [$06ba: cp   $0C]
	jeq	l_06fc                             	| [$06bc: jp   z,$06FC]
	jbsr	l_078f                            	| [$06bf: call $078F]
	subq.b	#1,d3                           	| [$06c2: dec  d]
	jne	l_06d1                             	| [$06c3: jp   nz,$06D1]
	move.b	#0x04,d1                        	| [$06c6: ld   b,$04]
	move.b	(0x04,a2),d0                    	| [$06c8: ld   a,(ix+$04)]
	sub.b	(character_y_offset_03,a2),d0    	| [$06cb: sub  (ix+character_y_offset_03)]
	jra	l_07cd                             	| [$06ce: jp   $07CD]
l_06d1:
	move.b	(character_x_right_01,a2),d0    	| [$06d1: ld   a,(ix+character_x_right_01)]
	cmp.b	#0x06,d0                         	| [$06d4: cp   $06]
	jcc	l_06f6                             	| [$06d6: jp   nc,$06F6]
	move.b	(0x05,a3),d0                    	| [$06d9: ld   a,(iy+$05)]
	cmp.b	(0x04,a2),d0                     	| [$06dc: cp   (ix+$04)]
	jcc	l_06e7                             	| [$06df: jp   nc,$06E7]
	move.b	#0x04,d1                        	| [$06e2: ld   b,$04]
	jra	l_07cd                             	| [$06e4: jp   $07CD]
l_06e7:
	move.b	(0x04,a2),d0                    	| [$06e7: ld   a,(ix+$04)]
	cmp.b	(character_display_priority_04,a3),d0       	| [$06ea: cp   (iy+character_display_priority_04)]
	bcs.b	0f                               	| [...]
	rts                                    	| [$06ed: ret  nc] [...]
0:
	move.b	(character_display_priority_04,a3),d0      	| [$06ee: ld   a,(iy+character_display_priority_04)]
	move.b	#0x04,d1                        	| [$06f1: ld   b,$04]
	jra	l_07cd                             	| [$06f3: jp   $07CD]
l_06f6:
	move.b	(character_x_00,a2),d0          	| [$06f6: ld   a,(ix+character_x_00)]
	cmp.b	#0x1F,d0                         	| [$06f9: cp   $1F]
	beq.b	0f                               	| [...]
	rts                                    	| [$06fb: ret  nz] [...]
0:
l_06fc:
	move.b	(character_y_offset_03,a2),d0   	| [$06fc: ld   a,(ix+character_y_offset_03)]
	                             	| [$06ff: or   a]
	jpl	l_0729                             	| [$0700: jp   p,$0729]
	lea	l_802F(a6),a0                      	| [$0703: ld   hl,$802F]
	move.b	(a0),d4                         	| [$0706: ld   e,(hl)]
	move.b	(0x04,a2),d0                    	| [$0707: ld   a,(ix+$04)]
	sub.b	(character_y_offset_03,a2),d0    	| [$070a: sub  (ix+character_y_offset_03)]
	add.b	(character_y_offset_03,a2),d0    	| [$070d: add  a,(ix+character_y_offset_03)]
	jcc	l_074f                             	| [$0710: jp   nc,$074F]
	cmp.b	d4,d0                            	| [$0713: cp   e]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0714: ret  nc] [...]
0:
	                           	| [$0715: dec  hl]
	move.b	-(a0),d0                         	| [$0716: ld   a,(hl)]
	cmp.b	#0x0B,d0                         	| [$0717: cp   $0B]
	jeq	l_074f                             	| [$0719: jp   z,$074F]
	jbsr	l_078f                            	| [$071c: call $078F]
	subq.b	#1,d3                           	| [$071f: dec  d]
	beq.b	0f                               	| [...]
	rts                                    	| [$0720: ret  nz] [...]
0:
	move.b	(0x05,a3),d0                    	| [$0721: ld   a,(iy+$05)]
	move.b	#0x04,d1                        	| [$0724: ld   b,$04]
	jra	l_07cd                             	| [$0726: jp   $07CD]
l_0729:
	lea	l_8031(a6),a0                      	| [$0729: ld   hl,$8031]
	move.b	(a0),d4                         	| [$072c: ld   e,(hl)]
	move.b	(0x04,a2),d0                    	| [$072d: ld   a,(ix+$04)]
	sub.b	(character_y_offset_03,a2),d0    	| [$0730: sub  (ix+character_y_offset_03)]
	add.b	(character_y_offset_03,a2),d0    	| [$0733: add  a,(ix+character_y_offset_03)]
	jcs	l_074f                             	| [$0736: jp   c,$074F]
	cmp.b	d4,d0                            	| [$0739: cp   e]
	bcc.b	0f                               	| [...]
	rts                                    	| [$073a: ret  c] [...]
0:
	addq.w	#1,a0                           	| [$073b: inc  hl]
	move.b	(a0),d0                         	| [$073c: ld   a,(hl)]
	cmp.b	#0x0B,d0                         	| [$073d: cp   $0B]
	jeq	l_074f                             	| [$073f: jp   z,$074F]
	jbsr	l_078f                            	| [$0742: call $078F]
	subq.b	#1,d3                           	| [$0745: dec  d]
	beq.b	0f                               	| [...]
	rts                                    	| [$0746: ret  nz] [...]
0:
	move.b	(character_display_priority_04,a3),d0      	| [$0747: ld   a,(iy+character_display_priority_04)]
	move.b	#0x04,d1                        	| [$074a: ld   b,$04]
	jra	l_07cd                             	| [$074c: jp   $07CD]
l_074f:
	move.b	d4,d0                           	| [$074f: ld   a,e]
	move.b	#0x04,d1                        	| [$0750: ld   b,$04]
	jra	l_07cd                             	| [$0752: jp   $07CD]
l_0755:
	jbsr	l_077a                            	| [$0755: call $077A]
	move.b	#0x0B,d2                        	| [$0758: ld   c,$0B]
	addq.w	#1,a0                           	| [$075a: inc  hl]
	move.b	(a0)+,d1                         	| [$075b: ld   b,(hl)]
	                           	| [$075c: inc  hl]
	move.b	(0x04,a2),d0                    	| [$075d: ld   a,(ix+$04)]
	sub.b	(character_y_offset_03,a2),d0    	| [$0760: sub  (ix+character_y_offset_03)]
l_0763:
	cmp.b	(a0),d0                          	| [$0763: cp   (hl)]
	jcs	l_076e                             	| [$0764: jp   c,$076E]
	addq.w	#1,a0                           	| [$0767: inc  hl]
	move.b	d1,d2                           	| [$0768: ld   c,b]
	move.b	(a0)+,d1                         	| [$0769: ld   b,(hl)]
	                           	| [$076a: inc  hl]
	jra	l_0763                             	| [$076b: jp   $0763]
l_076e:
	lea	l_8032(a6),a1                      	| [$076e: ld   de,$8032]
	move.b	d2,d0                           	| [$0771: ld   a,c]
	addq.w	#1,a0                           	| [$0772: inc  hl]
	move.w	#0x0004,d1                      	| [$0773: ld   bc,$0004] 4
	jbsr	lddr                              	| [$0776: lddr]
	move.b	d0,(a1)                         	| [$0778: ld   (de),a]
	rts                                    	| [$0779: ret]

l_077a:
	lea	l_81CE(a6),a0                      	| [$077a: ld   hl,$81CE]
	move.b	(character_x_00,a2),d0          	| [$077d: ld   a,(ix+character_x_00)]
	                             	| [$0780: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$0781: ret  z] [...]
0:
	add.b	d0,d0                            	| [$0782: add  a,a]
	add.b	d0,d0                            	| [$0783: add  a,a]
	clr.w	d5                               	| [$0785: ld   h,$00]
	move.b	d0,d5                           	| [$0784: ld   l,a]
	lsl.w	#3,d5                            	| [$0787: add  hl,hl]
 	                            	| [$0788: add  hl,hl]
 	                            	| [$0789: add  hl,hl]
 	lea	table_16E3(pc),a0                      	| [$078a: ld   de,table_16E3]
	add.w	d5,a0                            	| [$078d: add  hl,de]
	rts                                    	| [$078e: ret]

l_078f:
	jbsr	l_07c0                            	| [$078f: call $07C0]
	moveq   #0,d3                               	| [$0792: ld   d,$00]
	move.b	(character_x_00,a2),d0          	| [$0794: ld   a,(ix+character_x_00)]
	addq.b	#0x02,d0                        	| [$0797: add  a,$02]
	sub.b	(0x01,a3),d0                     	| [$0799: sub  (iy+$01)]
	bcc.b	0f                               	| [...]
	rts                                    	| [$079c: ret  c] [...]
0:
	move.b	d0,d2                           	| [$079d: ld   c,a]
	move.b	(character_x_right_01,a2),d0    	| [$079e: ld   a,(ix+character_x_right_01)]
	sub.b	(a3),d0                     	| [$07a1: sub  (iy+$00)]
	jcc	l_07ab                             	| [$07a4: jp   nc,$07AB]
	add.b	#0x30,d0                         	| [$07a7: add  a,$30]
	subq.b	#1,d2                           	| [$07a9: dec  c]
	bpl.b	0f                               	| [...]
	rts                                    	| [$07aa: ret  m] [...]
0:
l_07ab:
	cmp.b	#0x06,d0                         	| [$07ab: cp   $06]
	bcs.b	0f                               	| [...]
	rts                                    	| [$07ad: ret  nc] [...]
0:
	move.b	d2,d0                           	| [$07ae: ld   a,c]
	cmp.b	#0x04,d0                         	| [$07af: cp   $04]
	bcs.b	0f                               	| [...]
	rts                                    	| [$07b1: ret  nc] [...]
0:
	move.b	#0x01,d3                        	| [$07b2: ld   d,$01]
	move.b	(0x06,a3),d0                    	| [$07b4: ld   a,(iy+$06)]
	                             	| [$07b7: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$07b8: ret  nz] [...]
0:
	move.b	d2,d0                           	| [$07b9: ld   a,c]
	cmp.b	#0x02,d0                         	| [$07ba: cp   $02]
	bcs.b	0f                               	| [...]
	rts                                    	| [$07bc: ret  nc] [...]
0:
	moveq   #0,d3                               	| [$07bd: ld   d,$00]
	rts                                    	| [$07bf: ret]
l_07c0:
	lsl.b	#3,d0                            	| [$07c0: add  a,a]
	                            	| [$07c1: add  a,a]
	                            	| [$07c2: add  a,a]
	clr.w	d3                               	| [$07c4: ld   d,$00]
	move.b	d0,d3                           	| [$07c3: ld   e,a]
	lea	elevator_array_837D(a6),a3         	| [$07c6: ld   iy,elevator_array_837D]
	add.w	d3,a3                            	| [$07ca: add  iy,de]
	rts                                    	| [$07cc: ret]
l_07cd:
	move.b	d0,d2                           	| [$07cd: ld   c,a]
	move.b	(character_y_offset_03,a2),d0   	| [$07ce: ld   a,(ix+character_y_offset_03)]
												| [$07d1: or   a]
	jpl	l_07dc                             	| [$07d2: jp   p,$07DC]
	move.b	l_8338(a6),d0                   	| [$07d5: ld   a,($8338)]
	cmp.b	d2,d0                            	| [$07d8: cp   c]
	jcs	l_07e1                             	| [$07d9: jp   c,$07E1]
l_07dc:
	move.b	l_8338(a6),d0                   	| [$07dc: ld   a,($8338)]
	cmp.b	d2,d0                            	| [$07df: cp   c]
	bcc.b	0f                               	| [...]
	rts                                    	| [$07e0: ret  c] [...]
0:
l_07e1:
	move.b	d2,d0                           	| [$07e1: ld   a,c]
	move.b	d0,l_8338(a6)                   	| [$07e2: ld   ($8338),a]
	move.b	d1,d0                           	| [$07e5: ld   a,b]
	move.b	d0,l_8339(a6)                   	| [$07e6: ld   ($8339),a]
	STORE_POINTER	a3,bullet_sprite_ram_address_833A(a6)            	| [$07e9: ld   ($833A),iy]
	rts                                    	| [$07ed: ret]
l_07ee:
	move.b	(character_x_right_01,a2),d0    	| [$07ee: ld   a,(ix+character_x_right_01)]
	cmp.b	#0x06,d0                         	| [$07f1: cp   $06]
	bcc.b	0f                               	| [...]
	rts                                    	| [$07f3: ret  c] [...]
0:
	cmp.b	#0x22,d0                         	| [$07f4: cp   $22]
	bcs.b	0f                               	| [...]
	rts                                    	| [$07f6: ret  nc] [...]
0:
	lea	moving_door_slot_80AD(a6),a3                      	| [$07f7: ld   iy,$80AD]
	move.b	l_8154(a6),d0                   	| [$07fb: ld   a,($8154)]
	jbsr	l_0808                            	| [$07fe: call $0808]
	lea	moving_door_slot_80B5(a6),a3                      	| [$0801: ld   iy,$80B5]
	move.b	l_815E(a6),d0                   	| [$0805: ld   a,($815E)]
l_0808:
	cmp.b	#0x60,d0                         	| [$0808: cp   $60]
	bne.b	0f                               	| [...]
	rts                                    	| [$080a: ret  z] [...]
0:
	addq.b	#1,d0                           	| [$080b: inc  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$080c: ret  z] [...]
0:
	move.b	(0x05,a3),d0                    	| [$080d: ld   a,(iy+$05)]
	                             	| [$0810: or   a]
	bpl.b	0f                               	| [...]
	rts                                    	| [$0811: ret  m] [...]
0:
	cmp.b	#0x01,d0                         	| [$0812: cp   $01]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0814: ret  c] [...]
0:
	move.b	(0x02,a3),d0                    	| [$0815: ld   a,(iy+$02)]
	cmp.b	(character_x_00,a2),d0           	| [$0818: cp   (ix+character_x_00)]
	beq.b	0f                               	| [...]
	rts                                    	| [$081b: ret  nz] [...]
0:
	move.b	(character_y_offset_03,a2),d3   	| [$081c: ld   d,(ix+character_y_offset_03)]
	move.b	d3,d0                           	| [$081f: ld   a,d]
												| [$0820: or   a]
	jpl	l_0838                             	| [$0821: jp   p,$0838]
	move.b	(0x04,a2),d0                    	| [$0824: ld   a,(ix+$04)]
	move.b	d0,d4                           	| [$0827: ld   e,a]
	sub.b	(character_y_offset_03,a2),d0    	| [$0828: sub  (ix+character_y_offset_03)]
	move.b	d0,d3                           	| [$082b: ld   d,a]
	move.b	(0x01,a3),d0                    	| [$082c: ld   a,(iy+$01)]
	cmp.b	d3,d0                            	| [$082f: cp   d]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0830: ret  nc] [...]
0:
	cmp.b	d4,d0                            	| [$0831: cp   e]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0832: ret  c] [...]
0:
	move.b	#0x04,d1                        	| [$0833: ld   b,$04]
	jra	l_07cd                             	| [$0835: jp   $07CD]
l_0838:
	move.b	(0x04,a2),d0                    	| [$0838: ld   a,(ix+$04)]
	move.b	d0,d4                           	| [$083b: ld   e,a]
	sub.b	(character_y_offset_03,a2),d0    	| [$083c: sub  (ix+character_y_offset_03)]
	move.b	d0,d3                           	| [$083f: ld   d,a]
	move.b	(a3),d0                    	| [$0840: ld   a,(iy+$00)]
	cmp.b	d3,d0                            	| [$0843: cp   d]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0844: ret  c] [...]
0:
	cmp.b	d4,d0                            	| [$0845: cp   e]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0846: ret  nc] [...]
0:
	move.b	#0x04,d1                        	| [$0847: ld   b,$04]
	jra	l_07cd                             	| [$0849: jp   $07CD]
l_084c:
	move.b	lamp_shot_state_8240(a6),d0     	| [$084c: ld   a,(lamp_shot_state_8240)]
	addq.b	#1,d0                           	| [$084f: inc  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$0850: ret  nz] [...]
0:
	move.b	(character_x_right_01,a2),d0    	| [$0851: ld   a,(ix+character_x_right_01)]
	cmp.b	#0x2A,d0                         	| [$0854: cp   $2A]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0856: ret  c] [...]
0:
	move.b	(0x04,a2),d4                    	| [$0857: ld   e,(ix+$04)]
	move.b	d4,d0                           	| [$085a: ld   a,e]
	sub.b	(character_y_offset_03,a2),d0    	| [$085b: sub  (ix+character_y_offset_03)]
	move.b	d0,d3                           	| [$085e: ld   d,a]
	sub.b	d4,d0                            	| [$085f: sub  e]
	jmi	l_087c                             	| [$0860: jp   m,$087C]
	move.b	#0x4F,d2                        	| [$0863: ld   c,$4F]
	move.b	#0x02,d1                        	| [$0865: ld   b,$02]
	move.b	d2,d0                           	| [$0867: ld   a,c]
	cmp.b	d3,d0                            	| [$0868: cp   d]
	jcc	l_0870                             	| [$0869: jp   nc,$0870]
	cmp.b	d4,d0                            	| [$086c: cp   e]
	bcs.b	0f                               	| [...]
	jbsr	l_0895                            	| [$086d: call nc,$0895]
0:
l_0870:
	move.b	#0xAF,d2                        	| [$0870: ld   c,$AF]
	move.b	#0x01,d1                        	| [$0872: ld   b,$01]
	move.b	d2,d0                           	| [$0874: ld   a,c]
	cmp.b	d3,d0                            	| [$0875: cp   d]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0876: ret  nc] [...]
0:
	cmp.b	d4,d0                            	| [$0877: cp   e]
	jcc	l_0895                             	| [$0878: jp   nc,$0895]
	rts                                    	| [$087b: ret]
l_087c:
	move.b	#0xA8,d2                        	| [$087c: ld   c,$A8]
	move.b	#0x01,d1                        	| [$087e: ld   b,$01]
	move.b	d2,d0                           	| [$0880: ld   a,c]
	cmp.b	d3,d0                            	| [$0881: cp   d]
	jcs	l_0889                             	| [$0882: jp   c,$0889]
	cmp.b	d4,d0                            	| [$0885: cp   e]
	bcc.b	0f                               	| [...]
	jbsr	l_0895                            	| [$0886: call c,$0895]
0:
l_0889:
	move.b	#0x48,d2                        	| [$0889: ld   c,$48]
	move.b	#0x02,d1                        	| [$088b: ld   b,$02]
	move.b	d2,d0                           	| [$088d: ld   a,c]
	cmp.b	d3,d0                            	| [$088e: cp   d]
	bcc.b	0f                               	| [...]
	rts                                    	| [$088f: ret  c] [...]
0:
	cmp.b	d4,d0                            	| [$0890: cp   e]
	jcs	l_0895                             	| [$0891: jp   c,$0895]
	rts                                    	| [$0894: ret]
l_0895:
	move.b	(character_x_00,a2),d0          	| [$0895: ld   a,(ix+character_x_00)]
	sub.b	#0x08,d0                         	| [$0898: sub  $08]
	bcc.b	0f                               	| [...]
	rts                                    	| [$089a: ret  c] [...]
0:
	cmp.b	#0x17,d0                         	| [$089b: cp   $17]
	bcs.b	0f                               	| [...]
	rts                                    	| [$089d: ret  nc] [...]
0:
	jbsr	exx                               	| [$089e: exx]
	lea	l_81DA(a6),a0                      	| [$089f: ld   hl,$81DA]
	moveq   #0,d3                               	| [$08a3: ld   d,$00]
	move.b	d0,d3                           	| [$08a2: ld   e,a]
	add.w	d3,a0                            	| [$08a5: add  hl,de]
	move.b	(a0),d0                         	| [$08a6: ld   a,(hl)]
	jbsr	exx                               	| [$08a7: exx]
	and.b	d1,d0                            	| [$08a8: and  b]
	bne.b	0f                               	| [...]
	rts                                    	| [$08a9: ret  z] [...]
0:
	move.b	#0x03,d1                        	| [$08aa: ld   b,$03]
	lea	l_823E(a6),a3                      	| [$08ac: ld   iy,$823E]
	move.b	d2,d0                           	| [$08b0: ld   a,c]
	jra	l_07cd                             	| [$08b1: jp   $07CD]
l_08b4:
	move.b	(current_floor_07,a2),d0                    	| [$08b4: ld   a,(ix+$07)]
	                             	| [$08b7: or   a]
	jeq	enemies_shot_collision_08D2        	| [$08b8: jp   z,enemies_shot_collision_08D2]
	move.b	copy_of_dip_switches_3_8250(a6),d0	| [$08bb: ld   a,(copy_of_dip_switches_3_8250)]
	btst.b	#6,d0                           	| [$08be: bit  6,a]
	beq.b	0f                               	| [...]
	rts                                    	| [$08c0: ret  nz] [...]
0:
	lea	player_structure_851A(a6),a3       	| [$08c1: ld   iy,player_structure_851A]
	jbsr	enemy_shot_collision_08F8         	| [$08c5: call enemy_shot_collision_08F8]
	move.b	l_8339(a6),d0                   	| [$08c8: ld   a,($8339)]
	                             	| [$08cb: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$08cc: ret  z] [...]
0:
	clr.b	d0                               	| [$08cd: xor  a]
	move.b	d0,l_82EB(a6)                   	| [$08ce: ld   ($82EB),a]
	rts                                    	| [$08d1: ret]

enemies_shot_collision_08D2:
	lea	enemy_1_853A(a6),a3                	| [$08d2: ld   iy,enemy_1_853A]
	jbsr	enemy_shot_collision_08F8         	| [$08d6: call enemy_shot_collision_08F8]
	lea	enemy_2_855A(a6),a3                	| [$08d9: ld   iy,enemy_2_855A]
	jbsr	enemy_shot_collision_08F8         	| [$08dd: call enemy_shot_collision_08F8]
	lea	enemy_3_857A(a6),a3                	| [$08e0: ld   iy,enemy_3_857A]
	jbsr	enemy_shot_collision_08F8         	| [$08e4: call enemy_shot_collision_08F8]
	lea	enemy_4_859A(a6),a3                	| [$08e7: ld   iy,enemy_4_859A]
	jbsr	enemy_shot_collision_08F8         	| [$08eb: call enemy_shot_collision_08F8]
	move.b	l_8339(a6),d0                   	| [$08ee: ld   a,($8339)]
	                             	| [$08f1: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$08f2: ret  z] [...]
0:
	clr.b	d0                               	| [$08f3: xor  a]
	move.b	d0,l_82EC(a6)                   	| [$08f4: ld   ($82EC),a]
	rts                                    	| [$08f7: ret]

* check collision enemies / player bullets
* < A2: bullet structure
* < A3: enemy structure
enemy_shot_collision_08F8:
	move.b	(character_display_priority_04,a3),d0      	| [$08f8: ld   a,(iy+character_display_priority_04)]
	cmp.b	#0x02,d0                         	| [$08fb: cp   $02]
	beq.b	0f                               	| [...]
	rts                                    	| [$08fd: ret  nz] [...]
0:
* character is active
	move.b	(enemy_state_09,a3),d0                    	| [$08fe: ld   a,(iy+$09)]
	cmp.b	#0x05,d0                         	| [$0901: cp   $05]
	bne.b	0f                               	| [...]
	rts                                    	| [$0903: ret  z] [...]
0:
	move.b	(character_situation_06,a3),d0                    	| [$0904: ld   a,(iy+$06)]
	                             	| [$0907: or   a]
	jeq	l_0920                             	| [$0908: jr   z,$0920]
	subq.b	#0x03,d0                        	| [$090a: sub  $03]
	jeq	l_0920                             	| [$090c: jr   z,$0920]
	jcs	l_095c                             	| [$090e: jp   c,$095C]
	cmp.b	#0x04,d0                         	| [$0911: cp   $04]
	bne.b	0f                               	| [...]
	rts                                    	| [$0913: ret  z] [...]
0:
	move.b	(0x0a,a3),d0                    	| [$0914: ld   a,(iy+$0a)]
	                             	| [$0917: or   a]
	jpl	l_091d                             	| [$0918: jp   p,$091D]
	neg.b	d0                               	| [$091b: neg]
l_091d:
	cmp.b	#0x02,d0                         	| [$091d: cp   $02]
	bcs.b	0f                               	| [...]
	rts                                    	| [$091f: ret  nc] [...]
0:
l_0920:
	move.b	(current_floor_07,a3),d0                    	| [$0920: ld   a,(iy+$07)]
	cmp.b	(0,a2),d0           	| [$0923: cp   (ix+character_x_00)]
	beq.b	0f                               	| [...]
	rts                                    	| [$0926: ret  nz] [...]
0:
	move.b	(1,a2),d0    	| [$0927: ld   a,(ix+character_x_right_01)]
	cmp.b	(character_y_offset_down_02,a3),d0                     	| [$092a: cp   (iy+$02)]
	bcs.b	0f                               	| [...]
	rts                                    	| [$092d: ret  nc] [...]
0:
	cmp.b	(character_y_offset_03,a3),d0                     	| [$092e: cp   (iy+$03)]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0931: ret  c] [...]
0:
l_0932:
	move.b	(4,a2),d4                    	| [$0932: ld   e,(ix+$04)]
	move.b	d4,d0                           	| [$0935: ld   a,e]
	sub.b	(3,a2),d0    	| [$0936: sub  (ix+character_y_offset_03)]
	move.b	d0,d3                           	| [$0939: ld   d,a]
	sub.b	d4,d0                            	| [$093a: sub  e]
	jmi	l_094d                             	| [$093b: jp   m,$094D]
	addq.b	#3,d3                           	| [$093e: inc  d] * 3
	move.b	(character_x_right_01,a3),d0                    	| [$0941: ld   a,(iy+$01)]
	cmp.b	d3,d0                            	| [$0944: cp   d]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0945: ret  nc] [...]
0:
	cmp.b	d4,d0                            	| [$0946: cp   e]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0947: ret  c] [...]
0:
	move.b	#0x01,d1                        	| [$0948: ld   b,$01]
	jra	l_07cd                             	| [$094a: jp   $07CD]
l_094d:
	move.b	(a3),d0                    	| [$094d: ld   a,(iy+$00)]
	subq.b	#3,d3                           	| [$0950: dec  d] * 3
	cmp.b	d3,d0                            	| [$0953: cp   d]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0954: ret  c] [...]
0:
	cmp.b	d4,d0                            	| [$0955: cp   e]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0956: ret  nc] [...]
0:
	move.b	#0x01,d1                        	| [$0957: ld   b,$01]
	jra	l_07cd                             	| [$0959: jp   $07CD]
l_095c:
	lea	elevator_array_837D(a6),a0         	| [$095c: ld   hl,elevator_array_837D]
	move.b	(0x08,a3),d0                    	| [$095f: ld   a,(iy+$08)]
	and.b	#0x7F,d0                         	| [$0962: and  $7F]
	lsl.b	#3,d0                            	| [$0964: add  a,a]
												| [$0965: add  a,a]
												| [$0966: add  a,a]
	moveq   #0,d3                               	| [$0968: ld   d,$00]
	move.b	d0,d3                           	| [$0967: ld   e,a]
	add.w	d3,a0                            	| [$096a: add  hl,de]
	move.b	(a0)+,d2                         	| [$096b: ld   c,(hl)]
	                           	| [$096c: inc  hl]
	move.b	(a0),d1                         	| [$096d: ld   b,(hl)]
	move.b	(0x08,a3),d0                    	| [$096e: ld   a,(iy+$08)]
	and.b	#0x80,d0                         	| [$0971: and  $80]
	jeq	l_0978                             	| [$0973: jp   z,$0978]
	subq.b	#2,d1                           	| [$0976: dec  b] * 2
l_0978:
	move.b	d1,d0                           	| [$0978: ld   a,b]
	add.b	(0x06,a3),d0                     	| [$0979: add  a,(iy+$06)]
	sub.b	(character_x_00,a2),d0           	| [$097c: sub  (ix+character_x_00)]
	bcc.b	0f                               	| [...]
	rts                                    	| [$097f: ret  c] [...]
0:
	cmp.b	#0x02,d0                         	| [$0980: cp   $02]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0982: ret  nc] [...]
0:
	moveq	#0,d1                               	| [$0983: ld   b,$00]
	tst.b	d0                             	| [$0985: or   a]
	jeq	l_098b                             	| [$0986: jp   z,$098B]
	move.b	#0x30,d1                        	| [$0989: ld   b,$30]
l_098b:
	move.b	d1,d0                           	| [$098b: ld   a,b]
	add.b	d2,d0                            	| [$098c: add  a,c]
	add.b	(0x03,a3),d0                     	| [$098d: add  a,(iy+$03)]
	move.b	d0,d3                           	| [$0990: ld   d,a]
	move.b	d1,d0                           	| [$0991: ld   a,b]
	add.b	d2,d0                            	| [$0992: add  a,c]
	add.b	(0x02,a3),d0                     	| [$0993: add  a,(iy+$02)]
	move.b	d0,d4                           	| [$0996: ld   e,a]
	move.b	(character_x_right_01,a2),d0    	| [$0997: ld   a,(ix+character_x_right_01)]
	add.b	#0x30,d0                         	| [$099a: add  a,$30]
	cmp.b	d3,d0                            	| [$099c: cp   d]
	bcc.b	0f                               	| [...]
	rts                                    	| [$099d: ret  c] [...]
0:
	cmp.b	d4,d0                            	| [$099e: cp   e]
	bcs.b	0f                               	| [...]
	rts                                    	| [$099f: ret  nc] [...]
0:
	jra	l_0932                             	| [$09a0: jp   $0932]

check_if_all_documents_collected_09A3:
	clr.b	d0                               	| [$09a3: xor  a]
	move.b	d0,sync_flag_80AB(a6)                   	| [$09a4: ld   ($80AB),a]
	jbsr	l_0ad8                            	| [$09a7: call $0AD8]
	jbsr	l_364d                            	| [$09aa: call $364D]
	move.b	#0xC0,d0                        	| [$09ad: ld   a,$C0]
	jbsr	play_sound             	| [$09af: ld   (sound_latch_D50B),a]
	jbsr	ground_floor_reached_45E5         	| [$09b2: call ground_floor_reached_45E5]
* check if all documents have been collected, starting by the top floor
	lea	red_door_position_array_8210+0x1E(a6),a0	| [$09b5: ld   hl,red_door_position_array_8210+$1E]
	move.b	#0x1E,d1                        	| [$09b8: ld   b,$1E]
l_09ba:
	move.b	(a0),d0                         	| [$09ba: ld   a,(hl)]
	cmp.b	#0x08,d0                         	| [$09bb: cp   $08]
	jne	l_09c5                             	| [$09bd: jr   nz,$09C5]
	subq.w	#1,a0                           	| [$09bf: dec  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_09ba                             	| [$09c0: djnz $09BA]
	jra	l_09d3                             	| [$09c2: jp   $09D3]
* a document was not retrieved
l_09c5:
	move.b	d1,d0                           	| [$09c5: ld   a,b]
	move.b	d0,viewed_floor_802C(a6)                   	| [$09c6: ld   ($802C),a]
	clr.b	d0                               	| [$09c9: xor  a]
	move.b	d0,l_8532(a6)                   	| [$09ca: ld   ($8532),a]
	move.b	d0,l_852C(a6)                   	| [$09cd: ld   ($852C),a]
	jra	l_0a15                             	| [$09d0: jp   $0A15]

l_09d3:
	move.b	l_8033(a6),d0                   	| [$09d3: ld   a,($8033)]
	                             	| [$09d6: or   a]
	jne	l_09e8                             	| [$09d7: jr   nz,$09E8]
	move.b	player_structure_851A(a6),d0    	| [$09d9: ld   a,(player_structure_851A)]
	cmp.b	#0x34,d0                         	| [$09dc: cp   $34]
	jcs	l_09e5                             	| [$09de: jr   c,$09E5]
	jbsr	l_0b21                            	| [$09e0: call $0B21]
	jra	l_09e8                             	| [$09e3: jr   $09E8]
l_09e5:
	jbsr	l_0b31                            	| [$09e5: call $0B31]
l_09e8:
	jbsr	handle_main_scrolling_017F        	| [$09e8: call handle_main_scrolling_017F]
	jbsr	l_0af0                            	| [$09eb: call $0AF0]
	jbsr	handle_elevators_0EBF             	| [$09ee: call handle_elevators_0EBF]
	jbsr	handle_moving_doors_12A2               	| [$09f1: call handle_moving_doors_12A2]
	jbsr	l_2fe8                            	| [$09f4: call $2FE8]
	jbsr	l_0be1                            	| [$09f7: call $0BE1]
	jbsr	update_sprite_shadow_ram_15a0                            	| [$09fa: call $15A0]
	jbsr	game_tick_73cf                            	| [$09fd: call $73CF]
	move.b	l_8033(a6),d0                   	| [$0a00: ld   a,($8033)]
	cmp.b	#0xFF,d0                         	| [$0a03: cp   $FF]
	jne	l_09d3                             	| [$0a05: jr   nz,$09D3]
	jbsr	award_end_of_level_bonus_56F9     	| [$0a07: call award_end_of_level_bonus_56F9]
	lea	skill_level_8237(a6),a0            	| [$0a0a: ld   hl,skill_level_8237]
	addq.b	#1,(a0)                         	| [$0a0d: inc  (hl)] increase difficulty level on level completed
	move.b	#0x1E,d0                        	| [$0a0e: ld   a,$1E]
	move.b	d0,viewed_floor_802C(a6)                   	| [$0a10: ld   ($802C),a]
	clr.b	d0                               	| [$0a13: xor  a]
	rts                                    	| [$0a14: ret]

l_0a15:
	lea	l_852C(a6),a0                      	| [$0a15: ld   hl,$852C]
	move.b	(a0),d0                         	| [$0a18: ld   a,(hl)]
	cmp.b	#0x1E,d0                         	| [$0a19: cp   $1E]
	jcs	l_0a6c                             	| [$0a1b: jr   c,$0A6C]
	st.b	d0                                	| [$0a1d: ld   a,$FF]
	move.b	d0,l_851E(a6)                   	| [$0a1f: ld   ($851E),a]
	move.b	d0,sprite_and_priority_shadow_ram_80F1(a6)  | [$0a22: ld   ($80F1),a]
	move.b	d0,l_80F6(a6)                   	| [$0a25: ld   ($80F6),a]
	clr.b	d0                               	| [$0a28: xor  a]
	move.b	d0,l_8520(a6)                   	| [$0a29: ld   ($8520),a]
	move.b	viewed_floor_802C(a6),d0                   	| [$0a2c: ld   a,($802C)]
	move.b	d0,player_structure_851A+current_floor_07(a6)	| [$0a2f: ld   (player_structure_851A+current_floor_07),a]
	move.b	#0x01,d0                        	| [$0a32: ld   a,$01]
	move.b	d0,timer_8bit_reload_value_80A9(a6)	| [$0a34: ld   (timer_8bit_reload_value_80A9),a]
	jbsr	l_0b03                            	| [$0a37: call $0B03]
	lea	l_8532(a6),a0                      	| [$0a3a: ld   hl,$8532]
	move.b	scroll_speed_8004(a6),d0        	| [$0a3d: ld   a,(scroll_speed_8004)]
												| [$0a40: or   a]
	jne	l_0a44                             	| [$0a41: jr   nz,$0A44]
	addq.b	#1,(a0)                         	| [$0a43: inc  (hl)]
l_0a44:
	move.b	(a0),d0                         	| [$0a44: ld   a,(hl)]
	cmp.b	#0x14,d0                         	| [$0a45: cp   $14]
	jcs	l_0a54                             	| [$0a47: jr   c,$0A54]
	move.b	#0x39,d0                        	| [$0a49: ld   a,$39]
	jbsr	play_sound             	| [$0a4b: ld   (sound_latch_D50B),a]
	jbsr	set_player_initial_state_2f72                            	| [$0a4e: call $2F72]
	move.b	#0x01,d0                        	| [$0a51: ld   a,$01]
	rts                                    	| [$0a53: ret]
l_0a54:
	jbsr	update_scrolling_playfield_0206                            	| [$0a54: call $0206]
	jbsr	l_0af0                            	| [$0a57: call $0AF0]
	jbsr	handle_elevators_0EBF             	| [$0a5a: call handle_elevators_0EBF]
	jbsr	handle_moving_doors_12A2               	| [$0a5d: call handle_moving_doors_12A2]
	jbsr	l_0be1                            	| [$0a60: call $0BE1]
	jbsr	update_sprite_shadow_ram_15a0                            	| [$0a63: call $15A0]
	jbsr	game_tick_73cf                            	| [$0a66: call $73CF]
	jra	l_0a15                             	| [$0a69: jp   $0A15]
l_0a6c:
	move.b	player_structure_851A+9(a6),d0  	| [$0a6c: ld   a,(player_structure_851A+9)]
	cmp.b	#0x03,d0                         	| [$0a6f: cp   $03]
	jcs	l_0a77                             	| [$0a71: jr   c,$0A77]
	move.b	(a0),d0                         	| [$0a73: ld   a,(hl)]
	                             	| [$0a74: or   a]
	jeq	l_0ab5                             	| [$0a75: jr   z,$0AB5]
l_0a77:
	clr.b	d0                               	| [$0a77: xor  a]
	move.b	d0,l_851F(a6)                   	| [$0a78: ld   ($851F),a]
	move.b	d0,l_8525(a6)                   	| [$0a7b: ld   ($8525),a]
	move.b	(a0),d0                         	| [$0a7e: ld   a,(hl)]
	addq.b	#1,(a0)                         	| [$0a7f: inc  (hl)]
	cmp.b	#0x04,d0                         	| [$0a80: cp   $04]
	jcs	l_0aa3                             	| [$0a82: jr   c,$0AA3]
	bne.b	0f                               	| [...]
	jbsr	play_missing_document_end_sound_0ad0                            	| [$0a84: call z,$0AD0]
0:
	cmp.b	#0x09,d0                         	| [$0a87: cp   $09]
	jcc	l_0aab                             	| [$0a89: jr   nc,$0AAB]
	lea	l_8123(a6),a0                      	| [$0a8b: ld   hl,$8123]
	clr.b	(a0)+                             	| [$0a8e: ld   (hl),$00]
	                           	| [$0a90: inc  hl]
	move.b	l_80F2(a6),d0                   	| [$0a91: ld   a,($80F2)]
	add.b	#0x09,d0                         	| [$0a94: add  a,$09]
	move.b	d0,(a0)+                         	| [$0a96: ld   (hl),a]
	                           	| [$0a97: inc  hl]
	move.b	#0x67,(a0)+                      	| [$0a98: ld   (hl),$67]
	                           	| [$0a9a: inc  hl]
	clr.b	(a0)+                             	| [$0a9b: ld   (hl),$00]
	                           	| [$0a9d: inc  hl]
	move.b	#0x7D,(a0)                      	| [$0a9e: ld   (hl),$7D]
	jra	l_0ab5                             	| [$0aa0: jp   $0AB5]
l_0aa3:
	move.b	#0x10,d0                        	| [$0aa3: ld   a,$10]
	move.b	d0,player_move_direction_8527(a6)	| [$0aa5: ld   (player_move_direction_8527),a] force fire??
	jra	l_0ab5                             	| [$0aa8: jp   $0AB5]
l_0aab:
	clr.b	d0                               	| [$0aab: ld   a,$00]
	move.b	d0,player_move_direction_8527(a6)	| [$0aad: ld   (player_move_direction_8527),a] no move
	lea	l_8123(a6),a0                      	| [$0ab0: ld   hl,$8123]
	move.b	#0xFF,(a0)                      	| [$0ab3: ld   (hl),$FF]
l_0ab5:
	jbsr	update_scrolling_playfield_0206                            	| [$0ab5: call $0206]
	jbsr	l_0af0                            	| [$0ab8: call $0AF0]
	jbsr	handle_elevators_0EBF             	| [$0abb: call handle_elevators_0EBF]
	jbsr	handle_moving_doors_12A2               	| [$0abe: call handle_moving_doors_12A2]
	jbsr	l_2fe8                            	| [$0ac1: call $2FE8]
	jbsr	l_0be1                            	| [$0ac4: call $0BE1]
	jbsr	update_sprite_shadow_ram_15a0                            	| [$0ac7: call $15A0]
	jbsr	game_tick_73cf                            	| [$0aca: call $73CF]
	jra	l_0a15                             	| [$0acd: jp   $0A15]
play_missing_document_end_sound_0ad0:
	move.w	d0,-(sp)                        	| [$0ad0: push af]
	move.b	#0x38,d0                        	| [$0ad1: ld   a,$38]
	jbsr	play_sound             	| [$0ad3: ld   (sound_latch_D50B),a]
	move.w	(sp)+,d0                        	| [$0ad6: pop  af]
	rts                                    	| [$0ad7: ret]
l_0ad8:
	lea	l_80FB(a6),a0                      	| [$0ad8: ld   hl,$80FB]
	move.w	#0x0005,d3                      	| [$0adb: ld   de,$0005] 5
	move.b	#0x08,d1                        	| [$0ade: ld   b,$08]
l_0ae0:
	st	(a0)                      	| [$0ae0: ld   (hl),$FF]
	add.w	d3,a0                            	| [$0ae2: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_0ae0                             	| [$0ae3: djnz $0AE0]
	lea	l_8123(a6),a0                      	| [$0ae5: ld   hl,$8123]
	move.b	#0x07,d1                        	| [$0ae8: ld   b,$07]
l_0aea:
	st.b	(a0)                      	| [$0aea: ld   (hl),$FF]
	add.w	d3,a0                            	| [$0aec: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_0aea                             	| [$0aed: djnz $0AEA]
	rts                                    	| [$0aef: ret]
l_0af0:
	lea	elevator_directions_array_8081(a6),a0	| [$0af0: ld   hl,elevator_directions_array_8081]
	move.b	l_802D(a6),d0                   	| [$0af3: ld   a,($802D)]
	addq.b	#1,d0                           	| [$0af6: inc  a]
	add.b	d0,d0                            	| [$0af7: add  a,a]
	addq.b	#1,d0                           	| [$0af8: inc  a]
	moveq   #0,d3                               	| [$0afa: ld   d,$00]
	move.b	d0,d3                           	| [$0af9: ld   e,a]
	add.w	d3,a0                            	| [$0afc: add  hl,de]
	move.b	(a0),d0                         	| [$0afd: ld   a,(hl)]
												| [$0afe: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$0aff: ret  z] [...]
0:
	move.b	#0x0A,(a0)                      	| [$0b00: ld   (hl),$0A]
	rts                                    	| [$0b02: ret]
l_0b03:
	clr.b	d0                               	| [$0b03: ld   a,$00]
	move.b	d0,scroll_speed_8004(a6)        	| [$0b05: ld   (scroll_speed_8004),a]
	move.b	viewed_floor_802C(a6),d0                   	| [$0b08: ld   a,($802C)]
	move.b	d0,d1                           	| [$0b0b: ld   b,a]
	clr.b	d2                               	| [$0b0c: ld   c,$00]
	move.b	#0x06,d3                        	| [$0b0e: ld   d,$06]
	jbsr	compute_delta_height_1e6c                            	| [$0b10: call $1E6C]
	LOAD_D5_16_FROM_D5D6
	move.w	#0x006E,d3                      	| [$0b13: ld   de,$006E] 110
	clr.b	d0                               	| [$0b16: xor  a]
	sub.w	d3,d5                            	| [$0b17: sbc  hl,de]
 	bne.b	0f                               	| [...]
	rts                                    	| [$0b19: ret  z] [...]
0:
	bcc.b	0f                               	| [...]
	rts                                    	| [$0b1a: ret  c] [...]
0:
	move.b	#0x02,d0                        	| [$0b1b: ld   a,$02]
	move.b	d0,scroll_speed_8004(a6)        	| [$0b1d: ld   (scroll_speed_8004),a]
	rts                                    	| [$0b20: ret]
l_0b21:
	move.b	#0x08,d1                        	| [$0b21: ld   b,$08]
	move.b	player_structure_851A+9(a6),d0  	| [$0b23: ld   a,(player_structure_851A+9)]
	cmp.b	#0x02,d0                         	| [$0b26: cp   $02]
	jcc	l_0b2c                             	| [$0b28: jr   nc,$0B2C]
	move.b	#0x01,d1                        	| [$0b2a: ld   b,$01]
l_0b2c:
	move.b	d1,d0                           	| [$0b2c: ld   a,b]
	move.b	d0,player_move_direction_8527(a6)	| [$0b2d: ld   (player_move_direction_8527),a]
	rts                                    	| [$0b30: ret]
l_0b31:
	cmp.b	#0x20,d0                         	| [$0b31: cp   $20]
	jcs	l_0b4c                             	| [$0b33: jr   c,$0B4C]
	moveq	#0,d1                               	| [$0b35: ld   b,$00]
	cmp.b	#0x28,d0                         	| [$0b37: cp   $28]
	jcc	l_0b3d                             	| [$0b39: jr   nc,$0B3D]
	move.b	#0x01,d1                        	| [$0b3b: ld   b,$01]
l_0b3d:
	move.b	#0x10,d0                        	| [$0b3d: ld   a,$10]
	move.b	d0,player_move_direction_8527(a6)	| [$0b3f: ld   (player_move_direction_8527),a]
	move.b	#0xFE,d0                        	| [$0b42: ld   a,$FE]
	move.b	d0,l_851F(a6)                   	| [$0b44: ld   ($851F),a]
	move.b	d1,d0                           	| [$0b47: ld   a,b]
	move.b	d0,l_8525(a6)                   	| [$0b48: ld   ($8525),a]
	rts                                    	| [$0b4b: ret]

l_0b4c:
	st.b	d0                                	| [$0b4c: ld   a,$FF]
	move.b	d0,l_851E(a6)                   	| [$0b4e: ld   ($851E),a]
	move.b	d0,player_structure_851A+9(a6)  	| [$0b51: ld   (player_structure_851A+9),a]
	move.b	#0x01,d0                        	| [$0b54: ld   a,$01]
	move.b	d0,l_8033(a6)                   	| [$0b56: ld   ($8033),a]
	move.b	#0x03,d0                        	| [$0b59: ld   a,$03]
	move.b	d0,timer_8bit_reload_value_80A9(a6)	| [$0b5b: ld   (timer_8bit_reload_value_80A9),a]
	subq.b	#1,d0                           	| [$0b5e: dec  a]
	move.b	d0,timer_8bit_80AA(a6)          	| [$0b5f: ld   (timer_8bit_80AA),a]
	clr.b	d0                               	| [$0b62: ld   a,$00]
	move.b	d0,sync_flag_80AB(a6)                   	| [$0b64: ld   ($80AB),a]
	rts                                    	| [$0b67: ret]

handle_enemies_0B68:
	jbsr	l_58eb                            	| [$0b68: call $58EB]
	lea	enemy_1_853A(a6),a2                	| [$0b6b: ld   ix,enemy_1_853A]
	lea	l_8132(a6),a0                      	| [$0b6f: ld   hl,$8132]
	STORE_POINTER	a0,ram_pointer_85BD(a6)            	| [$0b72: ld   ($85BD),hl]
 	move.b	#0x01,d0                        	| [$0b75: ld   a,$01]
	move.b	d0,current_enemy_index_85BA(a6) 	| [$0b77: ld   (current_enemy_index_85BA),a]
* loop
l_0b7a:
	jbsr	l_0b98                            	| [$0b7a: call $0B98]
	move.w	#0x0020,d3                      	| [$0b7d: ld   de,$0020] 32
	add.w	d3,a2                            	| [$0b80: add  ix,de] next enemy
	LOAD_POINTER	ram_pointer_85BD(a6),a0             	| [$0b82: ld   hl,($85BD)]

	move.w	#0x0005,d3                      	| [$0b85: ld   de,$0005] 5
	add.w	d3,a0                            	| [$0b88: add  hl,de]
 	STORE_POINTER	a0,ram_pointer_85BD(a6)            	| [$0b89: ld   ($85BD),hl]
	move.b	current_enemy_index_85BA(a6),d0 	| [$0b8c: ld   a,(current_enemy_index_85BA)]
	addq.b	#1,d0                           	| [$0b8f: inc  a]
	move.b	d0,current_enemy_index_85BA(a6) 	| [$0b90: ld   (current_enemy_index_85BA),a]
	cmp.b	#0x05,d0                         	| [$0b93: cp   $05]
	jne	l_0b7a                             	| [$0b95: jr   nz,$0B7A]
	rts                                    	| [$0b97: ret]

* < ix: enemy character structure
l_0b98:
	clr.b	(0x17,a2)                        	| [$0b98: ld   (ix+$17),$00]
	move.b	(enemy_state_09,a2),d0                    	| [$0b9c: ld   a,(ix+$09)]
	                             	| [$0b9f: or   a]
	bpl.b	0f                               	| [...]
	rts                                    	| [$0ba0: ret  m] [...]
0:
	cmp.b	#0x05,d0                         	| [$0ba1: cp   $05]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0ba3: ret  nc] [...]
0:
	move.b	(character_situation_06,a2),d0  	| [$0ba4: ld   a,(ix+character_situation_06)]
	move.b	d0,d2                           	| [$0ba7: ld   c,a]
	cmp.b	#CS_FALLING_03,d0                	| [$0ba8: cp   CS_FALLING_03]
	jcc	l_0bd1                             	| [$0baa: jp   nc,$0BD1]
* ground, in/on elevator or unknown 3
* code used to multiply by 3 (jmp xxx), now we use longs so we need
* to multiply by 4 instead
	moveq	#0,d0
	move.b	(unknown_0f,a2),d0                  | [$0bad: ld   a,(ix+$0f)]
	                           	| [$0bb0: ld   b,a]
	add.b	d0,d0                            	| [$0bb1: add  a,b]
	add.b	d0,d0                            	| [$0bb2: add  a,b] d0 *= 4
	add.b	d2,d0                            	| [$0bb3: add  a,c] plus d2
	moveq   #0,d3                               | [$0bb8: ld   d,$00]
	move.b	d0,d3                           	| [$0bb4: ld   e,a] times 4 again
	add.b	d3,d3                            	| [$0bb5: add  a,e]
	add.b	d3,d3                            	| [$0bb6: add  a,e]
	.ifndef	RELEASE											| [$0bb7: ld   e,a]
	cmp.w	#25,d3
	jcs		0f
	* out of bounds!
	jbsr	osd_break
	illegal
0:
	.endif
	lea	jump_table_0BBF,a0                 	| [$0bba: ld   hl,jump_table_0BBF]
	move.l	(a0,d3.w),a0                            	| [$0bbd: add  hl,de]
 	jra	(a0)                               	| [$0bbe: jp   (hl)]

jump_table_0BBF:
	.long	enemy_walk_state_53F6              	| [$0bbf: jp   enemy_walk_state_53F6]
	.long	enemy_unknown_state_51A7           	| [$0bc2: jp   enemy_unknown_state_51A7]
	.long	enemy_above_elevator_524E          	| [$0bc5: jp   enemy_above_elevator_524E]
	.long   0   | insert this as 3*(3*a+c) in Z80 but 4*(4*D0+D2) in 68000
	.long	enemy_shooting_state_1C14          	| [$0bc8: jp   enemy_shooting_state_1C14]
	.long	enemy_in_elevator_1AE3             	| [$0bcb: jp   enemy_in_elevator_1AE3]
	.long	enemy_jumping_above_elevator_1B38  	| [$0bce: jp   enemy_jumping_above_elevator_1B38| ontop of elev too]

l_0bd1:
	clr.b	d0                               	| [$0bd1: xor  a]
	move.b	d0,(0x10,a2)                    	| [$0bd2: ld   (ix+$10),a]
	move.b	d0,(0x1a,a2)                    	| [$0bd5: ld   (ix+$1a),a]
	move.b	d0,(0x18,a2)                    	| [$0bd8: ld   (ix+$18),a]
	rts                                    	| [$0bdb: ret]
l_0bdc:
	clr.b	d0                               	| [$0bdc: xor  a]
	move.b	d0,l_8033(a6)                   	| [$0bdd: ld   ($8033),a]
	rts                                    	| [$0be0: ret]
l_0be1:
	jbsr	l_0dad                            	| [$0be1: call $0DAD]
	st.b	d0                                	| [$0be4: ld   a,$FF]
	move.b	d0,l_8146(a6)                   	| [$0be6: ld   ($8146),a]
	move.b	d0,l_814B(a6)                   	| [$0be9: ld   ($814B),a]
	move.b	l_8033(a6),d0                   	| [$0bec: ld   a,($8033)]
	cmp.b	#0xFF,d0                         	| [$0bef: cp   $FF]
	bne.b	0f                               	| [...]
	rts                                    	| [$0bf1: ret  z] [...]
0:
	move.b	l_8033(a6),d0                   	| [$0bf2: ld   a,($8033)]
	                             	| [$0bf5: or   a]
	jeq	l_0c37                             	| [$0bf6: jp   z,$0C37]
	cmp.b	#0x01,d0                         	| [$0bf9: cp   $01]
	bne.b	0f                               	| [...]
	jbsr	l_0c31                            	| [$0bfb: call z,$0C31]
0:
	move.b	l_8033(a6),d0                   	| [$0bfe: ld   a,($8033)]
	subq.b	#0x05,d0                        	| [$0c01: sub  $05]
	scs		d7
	move.b	d0,l_8036(a6)                   	| [$0c03: ld   ($8036),a]
	tst.b	d7
	jne	l_0c43                             	| [$0c06: jp   c,$0C43]
	subq.b	#0x04,d0                        	| [$0c09: sub  $04]
	scs		d7
	move.b	d0,l_8036(a6)                   	| [$0c0b: ld   ($8036),a]
	tst.b	d7
	jne	l_0c43                             	| [$0c0e: jp   c,$0C43]
	sub.b	#0x2C,d0                         	| [$0c11: sub  $2C]
	jcs	l_0c81                             	| [$0c13: jp   c,$0C81]
	subq.b	#0x03,d0                        	| [$0c16: sub  $03]
	scs		d7
	move.b	d0,l_8036(a6)                   	| [$0c18: ld   ($8036),a]
	tst.b	d7
	jne	l_0c91                             	| [$0c1b: jp   c,$0C91]
 	subq.b	#0x03,d0                        	| [$0c1e: sub  $03]
	scs		d7
	move.b	d0,l_8036(a6)                   	| [$0c20: ld   ($8036),a]
	tst.b	d7
	jne	l_0c91                             	| [$0c23: jp   c,$0C91]
 	subq.b	#0x03,d0                        	| [$0c26: sub  $03]
	scs		d7
	move.b	d0,l_8036(a6)                   	| [$0c28: ld   ($8036),a]
	tst.b	d7
	jne	l_0c91                             	| [$0c2b: jp   c,$0C91]
	jra	l_0cae                             	| [$0c2e: jp   $0CAE]
l_0c31:
	move.b	#0xC8,d0                        	| [$0c31: ld   a,$C8]
	jbsr	play_sound             	        | [$0c33: ld   (sound_latch_D50B),a]
	rts                                    	| [$0c36: ret]
l_0c37:
	clr.b	d0                               	| [$0c37: ld   a,$00]
	move.b	d0,l_8035(a6)                   	| [$0c39: ld   ($8035),a]
	move.b	d0,l_8034(a6)                   	| [$0c3c: ld   ($8034),a]
	jbsr	l_0ccd                            	| [$0c3f: call $0CCD]
	rts                                    	| [$0c42: ret]

protection_0C43:
* the bootleg version NOPs the following
* bootleg: start NOP patch
l_0c43:
												| [$0c43: push de]
												| [$0c43: push de]
												| [$0c44: ld   de,$82F6]
												| [$0c47: dec  de]
												| [$0c48: ld   a,(de)]
										| [$0c49: and  a]
												| [$0c4a: jp   z,$0C50]
												| [$0c4d: jp   $0C81]
							
												| [$0c50: pop  de]
												| [$0c50: pop  de]
* bootleg: end NOP patch
	move.b	#0x02,d0                        	| [$0c51: ld   a,$02]
	move.b	d0,l_8034(a6)                   	| [$0c53: ld   ($8034),a]
	move.b	l_8036(a6),d0                   	| [$0c56: ld   a,($8036)]
	cmp.b	#0xFF,d0                         	| [$0c59: cp   $FF]
	jeq	l_0c68                             	| [$0c5b: jp   z,$0C68]
	cmp.b	#0xFC,d0                         	| [$0c5e: cp   $FC]
	jeq	l_0c68                             	| [$0c60: jp   z,$0C68]
	move.b	#0x01,d0                        	| [$0c63: ld   a,$01]
	move.b	d0,l_8034(a6)                   	| [$0c65: ld   ($8034),a]
l_0c68:
	jbsr	l_0ccd                            	| [$0c68: call $0CCD]
	*jbsr	l_0d1b                            	| [$0c6b: call $0D1B]
	move.b	l_8033(a6),d0                   	| [$0c6e: ld   a,($8033)]
	addq.b	#1,d0                           	| [$0c71: inc  a]
	move.b	d0,l_8033(a6)                   	| [$0c72: ld   ($8033),a]
	move.b	l_8035(a6),d0                   	| [$0c75: ld   a,($8035)]
	cmp.b	#0xE0,d0                         	| [$0c78: cp   $E0]
	beq.b	0f                               	| [...]
	rts                                    	| [$0c7a: ret  nz] [...]
0:
	st.b	d0                                	| [$0c7b: ld   a,$FF]
	move.b	d0,l_8033(a6)                   	| [$0c7d: ld   ($8033),a]
	rts                                    	| [$0c80: ret]
l_0c81:
	move.b	#0x01,d0                        	| [$0c81: ld   a,$01]
	move.b	d0,l_8034(a6)                   	| [$0c83: ld   ($8034),a]
	move.b	l_8035(a6),d0                   	| [$0c86: ld   a,($8035)]
	addq.b	#0x04,d0                        	| [$0c89: add  a,$04]
	move.b	d0,l_8035(a6)                   	| [$0c8b: ld   ($8035),a]
	jra	l_0c68                             	| [$0c8e: jp   $0C68]
l_0c91:
	move.b	#0x03,d0                        	| [$0c91: ld   a,$03]
	move.b	d0,l_8034(a6)                   	| [$0c93: ld   ($8034),a]
	move.b	l_8036(a6),d0                   	| [$0c96: ld   a,($8036)]
	cmp.b	#0xFD,d0                         	| [$0c99: cp   $FD]
	jne	l_0c68                             	| [$0c9b: jp   nz,$0C68]
	move.b	l_8035(a6),d0                   	| [$0c9e: ld   a,($8035)]
	addq.b	#0x04,d0                        	| [$0ca1: add  a,$04]
	move.b	d0,l_8035(a6)                   	| [$0ca3: ld   ($8035),a]
	move.b	#0x07,d0                        	| [$0ca6: ld   a,$07]
	move.b	d0,l_8034(a6)                   	| [$0ca8: ld   ($8034),a]
	jra	l_0c68                             	| [$0cab: jp   $0C68]
l_0cae:
	move.b	#0x04,d0                        	| [$0cae: ld   a,$04]
	move.b	d0,l_8034(a6)                   	| [$0cb0: ld   ($8034),a]
	move.b	l_8035(a6),d0                   	| [$0cb3: ld   a,($8035)]
	subq.b	#0x04,d0                        	| [$0cb6: sub  $04]
	move.b	d0,l_8035(a6)                   	| [$0cb8: ld   ($8035),a]
	cmp.b	#0xE0,d0                         	| [$0cbb: cp   $E0]
	jcs	l_0c68                             	| [$0cbd: jp   c,$0C68]
	cmp.b	#0xF0,d0                         	| [$0cc0: cp   $F0]
	jcc	l_0c68                             	| [$0cc2: jp   nc,$0C68]
	move.b	#0x06,d0                        	| [$0cc5: ld   a,$06]
	move.b	d0,l_8034(a6)                   	| [$0cc7: ld   ($8034),a]
	jra	l_0c68                             	| [$0cca: jp   $0C68]
l_0ccd:
	moveq	#0,d1                               	| [$0ccd: ld   b,$00]
	clr.b	d2                               	| [$0ccf: ld   c,$00]
	move.b	#0x06,d3                        	| [$0cd1: ld   d,$06]
	jbsr	compute_delta_height_1e6c                            	| [$0cd3: call $1E6C]
	move.b	d5,d0                           	| [$0cd6: ld   a,h]
	                            	| [$0cd7: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$0cd8: ret  nz] [...]
0:
	move.b	l_8034(a6),d0                   	| [$0cd9: ld   a,($8034)]
	move.b	d6,d2                           	| [$0cdc: ld   c,l]
	add.b	d0,d0                            	| [$0cdd: add  a,a]
	lsl.b	#3,d0                            	| [$0cde: add  a,a]
												| [$0cdf: add  a,a]
												| [$0ce0: add  a,a]
	moveq   #0,d3                               	| [$0ce2: ld   d,$00]
	move.b	d0,d3                           	| [$0ce1: ld   e,a]
	lea	table_0D2D,a0                          	| [$0ce4: ld   hl,$0D2D]
	add.w	d3,a0                            	| [$0ce7: add  hl,de]
 	lea	l_8146(a6),a1                      	| [$0ce8: ld   de,$8146]
	move.b	#0x03,d1                        	| [$0ceb: ld   b,$03]
	jbsr	l_0d03                            	| [$0ced: call $0D03]
	jbsr	l_0d03                            	| [$0cf0: call $0D03]
	move.b	l_8034(a6),d0                   	| [$0cf3: ld   a,($8034)]
	                            	| [$0cf6: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$0cf7: ret  z] [...]
0:
	lea	l_8123(a6),a1                      	| [$0cf8: ld   de,$8123]
	move.b	#0x02,d1                        	| [$0cfb: ld   b,$02]
	jbsr	l_0d03                            	| [$0cfd: call $0D03]
	lea	l_80F6(a6),a1                      	| [$0d00: ld   de,$80F6]
l_0d03:
	move.b	d1,d0                           	| [$0d03: ld   a,b]
	move.b	d0,(a1)+                         	| [$0d04: ld   (de),a]
	                           	| [$0d05: inc  de]
	move.b	l_8035(a6),d0                   	| [$0d06: ld   a,($8035)]
	add.b	(a0)+,d0                          	| [$0d09: add  a,(hl)]
	                           	| [$0d0a: inc  hl]
	move.b	d0,(a1)+                         	| [$0d0b: ld   (de),a]
	                           	| [$0d0c: inc  de]
	move.b	d2,d0                           	| [$0d0d: ld   a,c]
	add.b	(a0)+,d0                          	| [$0d0e: add  a,(hl)]
	                           	| [$0d0f: inc  hl]
	move.b	d0,(a1)+                         	| [$0d10: ld   (de),a]
	                           	| [$0d11: inc  de]
	move.b	(a0)+,(a1)+                         	| [$0d12: ld   a,(hl)]
											| [$0d13: ld   (de),a]
	                           	| [$0d14: inc  hl]
	                           	| [$0d15: inc  de]
	move.b	(a0)+,(a1)+                         	| [$0d16: ld   a,(hl)]
	                         	| [$0d17: ld   (de),a]
	                           	| [$0d18: inc  hl]
	                           	| [$0d19: inc  de]
	rts                                    	| [$0d1a: ret]
	
* called when document is picked up. Displays a sprite at a fixed location (bottom right)
* but WTF never shown as probably immediately clobbered. I'd say that was possibly a test
* and left there
l_0d1b:
	lea	sprite_and_priority_shadow_ram_80F1(a6),a0    | [$0d1b: ld   hl,$80F1]
	move.b	#0x04,(a0)+         | [$0d1e: ld   (hl),$04] lowest priority
	                           	| [$0d20: inc  hl]
	move.b	#0xF0,(a0)+         | [$0d21: ld   (hl),$F0]
	                          	| [$0d23: inc  hl]
	move.b	#0x3E,(a0)+         | [$0d24: ld   (hl),$3E]
	                          	| [$0d26: inc  hl]
	move.b	#0x04,(a0)+         | [$0d27: ld   (hl),$04]
	                           	| [$0d29: inc  hl]
	move.b	#0x03,(a0)          | [$0d2a: ld   (hl),$03]
	rts                         | [$0d2c: ret]

table_0D2D:
	.byte	0x10,0x00
	.byte	0x01,0x6D,0x20
	.byte	0x00
	.byte	0x01,0x6C,0x00
	.byte	0x00
	.byte	0x01,0x00,0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x10,0x00
	.byte	0x01,0x6D,0x20
	.byte	0x00
	.byte	0x01,0x6C,0x00
	.byte	0x00
	.byte	0x01,0x00,0x14
	.byte	0x07
	.byte	0x01,0x4E,0x10
	.byte	0x02
	.byte	0x01,0x6D,0x20
	.byte	0x02
	.byte	0x01,0x6C,0x00
	.byte	0x02
	.byte	0x01,0x6B,0x14
	.byte	0x09
	.byte	0x01,0x4E,0x10
	.byte	0x00
	.byte	0x00
	.byte	0x6E
	.byte	0x20,0x00
	.byte	0x00
	.byte	0x6F
	.byte	0x00
	.byte	0x00
	.byte	0x01,0x00,0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x6C
	.byte	0x10,0x00
	.byte	0x00
	.byte	0x6D
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x0C
	.byte	0x07
	.byte	0x00
	.byte	0x4E
	.byte	0x00
	.byte	0x02
	.byte	0x00
	.byte	0x6C
	.byte	0x10,0x02
	.byte	0x00
	.byte	0x6D
	.byte	0x20,0x02
	.byte	0x00
	.byte	0x6B
	.byte	0x0C
	.byte	0x09
	.byte	0x00
	.byte	0x4E
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x10,0x00
	.byte	0x00
	.byte	0x6D
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x0C
	.byte	0x07
	.byte	0x00
	.byte	0x4E
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x10,0x02
	.byte	0x00
	.byte	0x6E
	.byte	0x20,0x02
	.byte	0x00
	.byte	0x6F
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00

l_0dad:
	move.b	l_8033(a6),d0                   	| [$0dad: ld   a,($8033)]
	cmp.b	#0xFF,d0                         	| [$0db0: cp   $FF]
	bne.b	0f                               	| [...]
	rts                                    	| [$0db2: ret  z] [...]
0:
	tst.b	d0                             	| [$0db3: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$0db4: ret  z] [...]
0:
	cmp.b	#0x01,d0                         	| [$0db5: cp   $01]
	jeq	l_0df6                             	| [$0db7: jp   z,$0DF6]
	subq.b	#0x07,d0                        	| [$0dba: sub  $07]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0dbc: ret  c] [...]
0:
	lea	l_8041(a6),a0                      	| [$0dbd: ld   hl,$8041]
	move.b	d0,d3                           	| [$0dc0: ld   d,a]
	move.b	#0x09,d1                        	| [$0dc1: ld   b,$09]
l_0dc3:
	jbsr	dynamic_ram_code_805b                        	| [$0dc3: call $805B]
	subq.b	#2,d3                           	| [$0dc6: dec  d] * 2
	addq.w	#1,a0                           	| [$0dc8: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_0dc3                             	| [$0dc9: djnz $0DC3]
	move.b	#0x05,d1                        	| [$0dcb: ld   b,$05]
	clr.b	d2                               	| [$0dcd: ld   c,$00]
l_0dcf:
	jbsr	l_0e3b                            	| [$0dcf: call $0E3B]
	addq.w	#1,d2                           	| [$0dd2: inc  c]
	subq.b	#2,d3                           	| [$0dd3: dec  d] * 2
	addq.w	#1,a0                           	| [$0dd5: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_0dcf                             	| [$0dd6: djnz $0DCF]
	jbsr	dynamic_ram_code_805b                        	| [$0dd8: call $805B]
	subq.b	#2,d3                           	| [$0ddb: dec  d] * 2
	addq.w	#1,a0                           	| [$0ddd: inc  hl]
	move.b	#0x05,d1                        	| [$0dde: ld   b,$05]
	move.b	#0x05,d2                        	| [$0de0: ld   c,$05]
l_0de2:
	jbsr	l_0e3b                            	| [$0de2: call $0E3B]
	addq.w	#1,d2                           	| [$0de5: inc  c]
 	subq.b	#2,d3                           	| [$0de6: dec  d] * 2
	addq.w	#1,a0                           	| [$0de8: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_0de2                             	| [$0de9: djnz $0DE2]
	move.b	#0x06,d1                        	| [$0deb: ld   b,$06]
l_0ded:
	jbsr	dynamic_ram_code_805b                	| [$0ded: call $805B]
	subq.b	#2,d3                           	| [$0df0: dec  d] * 2
	addq.w	#1,a0                           	| [$0df2: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_0ded                             	| [$0df3: djnz $0DED]
	rts                                    	| [$0df5: ret]
l_0df6:
	lea	l_8040(a6),a1                      	| [$0df6: ld   de,$8040]
	lea	points_awarded_on_level_end_836D(a6),a0	| [$0df9: ld   hl,points_awarded_on_level_end_836D]
	move.b	#0x03,d1                        	| [$0dfc: ld   b,$03]
l_0dfe:
	move.b	(a0)+,d2                         	| [$0dfe: ld   c,(hl)]
	move.b	d2,d0                           	| [$0dff: ld   a,c]
	and.b	#0x0F,d0                         	| [$0e00: and  $0F]
	add.b	d0,d0                            	| [$0e02: add  a,a]
	add.b	#0xC6,d0                         	| [$0e03: add  a,$C6]
	move.b	d0,(a1)                         	| [$0e05: ld   (de),a]
	                           	| [$0e06: dec  de]
	move.b	d2,d0                           	| [$0e07: ld   a,c]
	ror.b	#4,d0                            	| [$0e08: rrca] * 4
	and.b	#0x0F,d0                         	| [$0e0c: and  $0F]
	add.b	d0,d0                            	| [$0e0e: add  a,a]
	add.b	#0xC6,d0                         	| [$0e0f: add  a,$C6]
	move.b	d0,-(a1)                         	| [$0e11: ld   (de),a]
	subq.w	#1,a1                           	| [$0e12: dec  de]
	                           	| [$0e13: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_0dfe                             	| [$0e14: djnz $0DFE]
	lea	l_803C(a6),a0                      	| [$0e16: ld   hl,$803C]
l_0e19:
	move.b	(a0),d0                         	| [$0e19: ld   a,(hl)]
	cmp.b	#0xC6,d0                         	| [$0e1a: cp   $C6]
	jne	l_0e23                             	| [$0e1c: jr   nz,$0E23]
	clr.b	(a0)+                             	| [$0e1e: ld   (hl),$00]
	                           	| [$0e20: inc  hl]
	jra	l_0e19                             	| [$0e21: jr   $0E19]
l_0e23:
	lea	l_8037(a6),a0                      	| [$0e23: ld   hl,$8037]
	move.b	#0xDA,d0                        	| [$0e26: ld   a,$DA]
	move.b	#0x05,d1                        	| [$0e28: ld   b,$05]
l_0e2a:
	move.b	d0,(a0)+                         	| [$0e2a: ld   (hl),a]
	addq.b	#0x02,d0                        	| [$0e2b: add  a,$02]
												| [$0e2d: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_0e2a                             	| [$0e2e: djnz $0E2A]
	lea	l_8041(a6),a0                      	| [$0e30: ld   hl,$8041]
	clr.b	d0                               	| [$0e33: xor  a]
	move.b	#0x1A,d1                        	| [$0e34: ld   b,$1A]
l_0e36:
	move.b	d0,(a0)+                         	| [$0e36: ld   (hl),a]
	                           	| [$0e37: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_0e36                             	| [$0e38: djnz $0E36]
	rts                                    	| [$0e3a: ret]
l_0e3b:
	move.b	d3,d0                           	| [$0e3b: ld   a,d]
	                             	| [$0e3c: or   a]
	bpl.b	0f                               	| [...]
	rts                                    	| [$0e3d: ret  m] [...]
0:
	cmp.b	#0x08,d0                         	| [$0e3e: cp   $08]
	jcs	dynamic_ram_code_8071                         	| [$0e40: jp   c,$8071]
	sub.b	#0x08,d0                         	| [$0e43: sub  $08]
	move.b	d0,d4                           	| [$0e45: ld   e,a]
	cmp.b	#0x14,d0                         	| [$0e46: cp   $14]
	jeq	l_0e59                             	| [$0e48: jr   z,$0E59]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0e4a: ret  nc] [...]
0:

	move.l	a0,-(sp)                        	| [$0e4b: push hl]
	movem.w	d1/d2,-(sp)                    	| [$0e4c: push bc]
	lea	table_0E66,a0                          	| [$0e4d: ld   hl,$0E66]
	moveq	#0,d1                               	| [$0e50: ld   b,$00]
	move.b	d4,d1                           	| [$0e52: ld   c,e]
	add.w	d1,a0                            	| [$0e53: add  hl,bc]
	move.b	(a0),d0                         	| [$0e54: ld   a,(hl)]
	movem.w	(sp)+,d1/d2                    	| [$0e55: pop  bc]
	move.l	(sp)+,a0                        	| [$0e56: pop  hl]
	move.b	d0,(a0)                         	| [$0e57: ld   (hl),a]
	rts                                    	| [$0e58: ret]

l_0e59:
	move.l	a0,-(sp)                        	| [$0e59: push hl]
	movem.w	d1/d2,-(sp)                    	| [$0e5a: push bc]
	lea	l_8037(a6),a0                      	| [$0e5b: ld   hl,$8037]
	and.w	#0xFF,d1                               	| [$0e5e: ld   b,$00]
	add.w	d1,a0                            	| [$0e60: add  hl,bc]
	move.b	(a0),d0                         	| [$0e61: ld   a,(hl)]
	movem.w	(sp)+,d1/d2                    	   | [$0e62: pop  bc]
	move.l	(sp)+,a0                        	| [$0e63: pop  hl]
	move.b	d0,(a0)                         	| [$0e64: ld   (hl),a]
	rts                                    	| [$0e65: ret]

table_0E66:
	.byte	0xE4,0xE6,0xE8,0xE8,0xE6,0xE4,0xE6,0xEA,0xEA,0xE6,0xE4,0xE6,0xE8,0xE8,0xE6,0xE4
	.byte	0xE6,0xEA,0xEA,0xE6
	.align	2
	
l_0e7a:
	move.b	l_8033(a6),d0                   	| [$0e7a: ld   a,($8033)]
											| [$0e7d: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$0e7e: ret  z] [...]
0:
	bpl.b	0f                               	| [...]
	rts                                    	| [$0e7f: ret  m] [...]
0:
	cmp.b	#0x02,d0                         	| [$0e80: cp   $02]
	jeq	l_0e9f                             	| [$0e82: jr   z,$0E9F]
	lea	l_8041(a6),a0                      	| [$0e84: ld   hl,$8041]
	lea	l_C6C1(a6),a1                      	| [$0e87: ld   de,$C6C1]
	move.w	#0x001A,d1                      	| [$0e8a: ld   bc,$001A] 26
	jbsr	ldir_video                              	| [$0e8d: ldir]
 	lea	l_8041(a6),a1                      	| [$0e8f: ld   hl,$8041]
	lea	l_C6E1(a6),a0                      	| [$0e92: ld   de,$C6E1]
	move.b	#0x1A,d1                        	| [$0e95: ld   b,$1A]
l_0e97:
	move.b	(a1)+,d0                         	| [$0e97: ld   a,(hl)]
	addq.b	#1,d0                           	| [$0e98: inc  a]
	jbsr	osd_w_videoram                         	| [$0e99: ld   (de),a]
	addq.w	#1,a0                           	| [$0e9a: inc  hl]
	                           	| [$0e9b: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_0e97                             	| [$0e9c: djnz $0E97]
	rts                                    	| [$0e9e: ret]

l_0e9f:
	.ifne	0
	lea	l_9700(a6),a0                      	| [$0e9f: ld   hl,$9700]
	move.b	#0x68,d1                        	| [$0ea2: ld   b,$68]
l_0ea4:
	clr.b	(a0)+                             	| [$0ea4: ld   (hl),$00]
	                           	| [$0ea6: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_0ea4                             	| [$0ea7: djnz $0EA4]
	lea	l_7F83,a0                          	| [$0ea9: ld   hl,$7F83]
	lea	l_9F00(a6),a1                      	| [$0eac: ld   de,$9F00]
	move.w	#0x0068,d1                      	| [$0eaf: ld   bc,$0068] 104
	jbsr	ldir                              	| [$0eb2: ldir]
	lea	l_A700(a6),a0                      	| [$0eb4: ld   hl,$A700]
	move.b	#0x68,d1                        	| [$0eb7: ld   b,$68]
l_0eb9:
	clr.b	(a0)+                             	| [$0eb9: ld   (hl),$00]
	                           	| [$0ebb: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_0eb9                             	| [$0ebc: djnz $0EB9]
	.endif
	rts                                    	| [$0ebe: ret]
	
handle_elevators_0EBF:
	jbsr	l_0ed2                            	| [$0ebf: call $0ED2]
	jbsr	l_0efd                            	| [$0ec2: call $0EFD]
	jbsr	update_elevator_directions_0F65   	| [$0ec5: call update_elevator_directions_0F65]
	jbsr	l_0f31                            	| [$0ec8: call $0F31]
	jbsr	l_5d61                            	| [$0ecb: call $5D61]
	jbsr	set_elevators_neutral_controls_0F99	| [$0ece: call set_elevators_neutral_controls_0F99]
	rts                                    	| [$0ed1: ret]

l_0ed2:
	move.b	l_83C4(a6),d0                   	| [$0ed2: ld   a,($83C4)]
	cmp.b	#0x80,d0                         	| [$0ed5: cp   $80]
	jeq	l_0edd                             	| [$0ed7: jp   z,$0EDD]
	move.b	d0,l_839C(a6)                   	| [$0eda: ld   ($839C),a]
l_0edd:
	move.b	l_83CC(a6),d0                   	| [$0edd: ld   a,($83CC)]
	cmp.b	#0x80,d0                         	| [$0ee0: cp   $80]
	jeq	l_0ee8                             	| [$0ee2: jp   z,$0EE8]
	move.b	d0,l_839C(a6)                   	| [$0ee5: ld   ($839C),a]
l_0ee8:
	move.b	l_83D4(a6),d0                   	| [$0ee8: ld   a,($83D4)]
	cmp.b	#0x80,d0                         	| [$0eeb: cp   $80]
	jeq	l_0ef3                             	| [$0eed: jp   z,$0EF3]
	move.b	d0,l_839C(a6)                   	| [$0ef0: ld   ($839C),a]
l_0ef3:
	move.b	l_83BC(a6),d0                   	| [$0ef3: ld   a,($83BC)]
	cmp.b	#0x80,d0                         	| [$0ef6: cp   $80]
	bne.b	0f                               	| [...]
	rts                                    	| [$0ef8: ret  z] [...]
0:
	move.b	d0,l_8384(a6)                   	| [$0ef9: ld   ($8384),a]
	rts                                    	| [$0efc: ret]

l_0efd:
	lea	l_8384(a6),a0                      	| [$0efd: ld   hl,$8384]
	lea	elevator_directions_array_8081(a6),a1	| [$0f00: ld   de,elevator_directions_array_8081]
	move.b	#0x07,d1                        	| [$0f03: ld   b,$07]
l_0f05:
	move.b	(a0),d0                         	| [$0f05: ld   a,(hl)]
	cmp.b	#0x80,d0                         	| [$0f06: cp   $80]
	jeq	l_0f0f                             	| [$0f08: jr   z,$0F0F]
	move.b	d0,(a1)                         	| [$0f0a: ld   (de),a]
	                           	| [$0f0b: inc  de]
	clr.b	d0                               	| [$0f0c: xor  a]
	move.b	d0,(1,a1)                         	| [$0f0d: ld   (de),a]
	                           	| [$0f0e: dec  de]
l_0f0f:
	addq.w	#2,a1                           	| [$0f0f: inc  de]
	                           	| [$0f10: inc  de]
	                    	| [$0f11: push de]
	                     	| [$0f12: ld   de,$0008] 8
	addq.w	#8,a0                            	| [$0f15: add  hl,de]
	                    	| [$0f16: pop  de]
	subq.b	#1,d1                           	| [...]
	jne	l_0f05                             	| [$0f17: djnz $0F05]
	lea	l_8080(a6),a0                      	| [$0f19: ld   hl,$8080]
	btst.b	#6,(a0)                         	| [$0f1c: bit  6,(hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$0f1e: ret  nz] [...]
0:
	*jbsr	protection_related_77dd                            	| [$0f1f: call $77DD]
	move.b	(a0),d0                         	| [$0f22: ld   a,(hl)]
	addq.b	#1,(a0)                         	| [$0f23: inc  (hl)]
	jbsr	rst_28                            	| [$0f24: rst  $28]
* bootleg: code replaced by below
												| [$0f25: ld   hl,$8080]
												| [$0f28: ld   c,(hl)]
													| [$0f29: add  hl,bc]
											
* end code to replace
* bootleg replacement code
	jbsr	l_34ec                          | [$0f25: call $34EC] alternate code put where there was room
	                                    	| [$0f28: nop]
	                                    	| [$0f29: nop]
* end bootleg code

	* this installs code in RAM                       	| [$0f2a: ccf]
	* it doesn't matter a lot if it fails or incorrect as we're using
	* a dumped version in dynamic_ram_code_8xxx routines
	move.w	#0x25,d1                        	| [$0f2b: ld   c,$25]
	sub.w	d1,a0                            	| [$0f2d: sbc  hl,bc]
	move.b	d0,(a0)                         	| [$0f2f: ld   (hl),a]
	rts                                    	| [$0f30: ret]
l_0f31:
	move.b	l_809E(a6),d0                   	| [$0f31: ld   a,($809E)]
	cmp.b	#0x80,d0                         	| [$0f34: cp   $80]
	jeq	l_0f3b                             	| [$0f36: jr   z,$0F3B]
	move.b	d0,l_8097(a6)                   	| [$0f38: ld   ($8097),a]
l_0f3b:
	lea	l_809F(a6),a0                      	| [$0f3b: ld   hl,$809F]
	lea	l_809A(a6),a1                      	| [$0f3e: ld   de,$809A]
	move.b	#0x03,d1                        	| [$0f41: ld   b,$03]
l_0f43:
	move.b	(a0),d0                         	| [$0f43: ld   a,(hl)]
	cmp.b	#0x80,d0                         	| [$0f44: cp   $80]
	jeq	l_0f49                             	| [$0f46: jr   z,$0F49]
	move.b	d0,(a1)                         	| [$0f48: ld   (de),a]
l_0f49:
	addq.w	#1,a0                           	| [$0f49: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_0f43                             	| [$0f4a: djnz $0F43]
	lea	l_8097(a6),a1                      	| [$0f4c: ld   de,$8097]
	lea	l_83E1(a6),a0                      	| [$0f4f: ld   hl,$83E1]
	move.b	#0x07,d1                        	| [$0f52: ld   b,$07]
l_0f54:
	move.b	(a1),d0                         	| [$0f54: ld   a,(de)]
	cmp.b	#0x80,d0                         	| [$0f55: cp   $80]
	jeq	l_0f5b                             	| [$0f57: jp   z,$0F5B]
	move.b	d0,(a0)                         	| [$0f5a: ld   (hl),a]
l_0f5b:
	addq.w	#1,a1                           	| [$0f5b: inc  de]
	                   	| [$0f5c: push de]
	                    	| [$0f5d: ld   de,$0015] 21
	add.w	#0x15,a0                            	| [$0f60: add  hl,de]
									| [$0f61: pop  de]
	subq.b	#1,d1                           	| [...]
	jne	l_0f54                             	| [$0f62: djnz $0F54]
	rts                                    	| [$0f64: ret]

update_elevator_directions_0F65:
	move.b	bottom_floor_horizon_8003(a6),d0                   	| [$0f65: ld   a,($8003)]
	cmp.b	#0x14,d0                         	| [$0f68: cp   $14]
	jcs	l_0f84                             	| [$0f6a: jr   c,$0F84]
	move.b	l_83CE(a6),d0                   	| [$0f6c: ld   a,($83CE)]
	cmp.b	#0x1E,d0                         	| [$0f6f: cp   $1E]
	jcs	l_0f84                             	| [$0f71: jr   c,$0F84]
	move.b	#0xFE,d0                        	| [$0f73: ld   a,$FE]
	move.b	d0,l_8087(a6)                   	| [$0f75: ld   ($8087),a]
	move.b	l_839C(a6),d0                   	| [$0f78: ld   a,($839C)]
	cmp.b	#0x02,d0                         	| [$0f7b: cp   $02]
	jne	l_0f84                             	| [$0f7d: jr   nz,$0F84]
	move.b	#0x0F,d0                        	| [$0f7f: ld   a,$0F]
	move.b	d0,l_8088(a6)                   	| [$0f81: ld   ($8088),a]
l_0f84:
	lea	elevator_directions_array_8081(a6),a1	| [$0f84: ld   de,elevator_directions_array_8081]
	lea	l_83E1(a6),a0                      	| [$0f87: ld   hl,$83E1] in the middle of elevator struct
	move.b	#0x07,d1                        	| [$0f8a: ld   b,$07]
* loop on 7 elevators (out of 21?)
l_0f8c:
	move.b	(a1),d0                         	| [$0f8c: ld   a,(de)]
	move.b	d0,(a0)                         	| [$0f8d: ld   (hl),a]
	addq.w	#2,a1                           	| [$0f8e: inc  de] * 2
	                    	| [$0f90: push de]
	                      	| [$0f91: ld   de,$0015] skip 2 elevators 21
	add.w	#0x0015,a0                            	| [$0f94: add  hl,de]
	                    	| [$0f95: pop  de]
	subq.b	#1,d1                           	| [...]
	jne	l_0f8c                             	| [$0f96: djnz $0F8C]
	rts                                    	| [$0f98: ret]

set_elevators_neutral_controls_0F99:

	lea	elevator_array_837D+player_control_07(a6),a0	| [$0f99: ld   hl,elevator_array_837D+player_control_07]
	move.w	#0x0008,d3                      	| [$0f9c: ld   de,$0008] 8
	move.b	#0x0B,d1                        	| [$0f9f: ld   b,$0B]
	move.b	#0x80,d0                        	| [$0fa1: ld   a,$80] set no move
l_0fa3:
	move.b	d0,(a0)                         	| [$0fa3: ld   (hl),a]
	add.w	d3,a0                            	| [$0fa4: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_0fa3                             	| [$0fa5: djnz $0FA3]
	lea	l_8097(a6),a0                      	| [$0fa7: ld   hl,$8097]
	move.b	#0x0B,d1                        	| [$0faa: ld   b,$0B]
l_0fac:
	move.b	d0,(a0)+                         	| [$0fac: ld   (hl),a]
	                           	| [$0fad: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_0fac                             	| [$0fae: djnz $0FAC]
	rts                                    	| [$0fb0: ret]

read_dip_switches_0fb1:
	lea	coin_dsw_copy_80A5(a6),a0                      	| [$0fb1: ld   hl,coin_dsw_copy_80A5]
	move.b	copy_of_dip_switches_2_824F(a6),d0	| [$0fb4: ld   a,(copy_of_dip_switches_2_824F)]
	jbsr	decode_dip_switches_0fd2                            	| [$0fb7: call $0FD2]
	lea	coin_slot_2_dsw_copy_80A7(a6),a0                      	| [$0fba: ld   hl,$80A7]
	move.b	copy_of_dip_switches_2_824F(a6),d0	| [$0fbd: ld   a,(copy_of_dip_switches_2_824F)]
	ror.b	#4,d0                            	| [$0fc0: rrca] * 4
	jbsr	decode_dip_switches_0fd2                            	| [$0fc4: call $0FD2]
	clr.b	d0                               	| [$0fc7: xor  a]
	move.b	d0,nb_credits_80A2(a6)          	| [$0fc8: ld   (nb_credits_80A2),a]
	move.b	d0,coin_slot_1_activated_80A3(a6)                   	| [$0fcb: ld   ($80A3),a]
	move.b	d0,coin_slot_2_activated_80A4(a6)                   	| [$0fce: ld   ($80A4),a]
	rts                                    	| [$0fd1: ret]

decode_dip_switches_0fd2:
	and.b	#0x0F,d0                         	| [$0fd2: and  $0F]
	cmp.b	#0x08,d0                         	| [$0fd4: cp   $08]
	jcc	l_0fe1                             	| [$0fd6: jr   nc,$0FE1]
	sub.b	#0x09,d0                         	| [$0fd8: sub  $09]
	neg.b	d0                               	| [$0fda: neg]
	move.b	d0,(a0)+                         	| [$0fdc: ld   (hl),a]
	                           	| [$0fdd: inc  hl]
	move.b	#0x01,(a0)                      	| [$0fde: ld   (hl),$01]
	rts                                    	| [$0fe0: ret]
l_0fe1:
	move.b	#0x01,(a0)+                      	| [$0fe1: ld   (hl),$01]
	                           	| [$0fe3: inc  hl]
	sub.b	#0x10,d0                         	| [$0fe4: sub  $10]
	neg.b	d0                               	| [$0fe6: neg]
	move.b	d0,(a0)                         	| [$0fe8: ld   (hl),a]
	rts                                    	| [$0fe9: ret]

check_credits_0fea:
	move.b	game_state_80AC(a6),d0          	| [$0fea: ld   a,(game_state_80AC)]
												| [$0fed: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$0fee: ret  z] [...]
0:
	jbsr	switch_bank_on_9_credits_1036                            	| [$0fef: call $1036]
	move.b	coin_slot_1_activated_80A3(a6),d0                   	| [$0ff2: ld   a,($80A3)]
	lea	coin_dsw_copy_80A5(a6),a0                      	| [$0ff5: ld   hl,coin_dsw_copy_80A5]
	jbsr	increase_credits_if_required_1019                            	| [$0ff8: call $1019]
	move.b	d1,d0                           	| [$0ffb: ld   a,b]
	move.b	d0,coin_slot_1_activated_80A3(a6)                   	| [$0ffc: ld   ($80A3),a]
	jbsr	switch_bank_on_9_credits_1036                            	| [$0fff: call $1036]
	move.b	copy_of_dip_switches_3_8250(a6),d0	| [$1002: ld   a,(copy_of_dip_switches_3_8250)]
	btst.b	#7,d0                           	| [$1005: bit  7,a]
	beq.b	0f                               	| [...]
	rts                                    	| [$1007: ret  nz] [...]
0:
	move.b	coin_slot_2_activated_80A4(a6),d0                   	| [$1008: ld   a,($80A4)]
	lea	coin_slot_2_dsw_copy_80A7(a6),a0                      	| [$100b: ld   hl,$80A7]
	jbsr	increase_credits_if_required_1019                            	| [$100e: call $1019]
	move.b	d1,d0                           	| [$1011: ld   a,b]
	move.b	d0,coin_slot_2_activated_80A4(a6)                   	| [$1012: ld   ($80A4),a]
	jbsr	switch_bank_on_9_credits_1036                            	| [$1015: call $1036]
	rts                                    	| [$1018: ret]

increase_credits_if_required_1019:
	move.b	d0,d1                           	| [$1019: ld   b,a]
	move.b	nb_credits_80A2(a6),d0          	| [$101a: ld   a,(nb_credits_80A2)]
	move.b	d0,d2                           	| [$101d: ld   c,a]
	move.b	(a0)+,d3                         	| [$101e: ld   d,(hl)]
	                           	                | [$101f: inc  hl]
	move.b	(a0),d4                         	| [$1020: ld   e,(hl)]
l_1021:
	move.b	d1,d0                           	| [$1021: ld   a,b]
	sub.b	d3,d0                            	| [$1022: sub  d]
	jcs	l_1031                             	| [$1023: jr   c,$1031]
	* coin inserted
	move.b	d0,d1                           	| [$1025: ld   b,a]
	move.b	d2,d0                           	| [$1026: ld   a,c]
	add.b	d4,d0                            	| [$1027: add  a,e]
	cmp.b	#0x09,d0                         	| [$1028: cp   $09]
	jcs	l_102e                             	| [$102a: jr   c,$102E]
	move.b	#0x09,d0                        	| [$102c: ld   a,$09]
l_102e:
	move.b	d0,d2                           	| [$102e: ld   c,a]
	jra	l_1021                             	| [$102f: jr   $1021]
l_1031:
	move.b	d2,d0                           	| [$1031: ld   a,c]
	move.b	d0,nb_credits_80A2(a6)          	| [$1032: ld   (nb_credits_80A2),a]
	rts                                    	| [$1035: ret]

* WTF is the game doing? maybe no sound if > 9 creds??? doesn't matter
switch_bank_on_9_credits_1036:
	move.b	nb_credits_80A2(a6),d0          	| [$1036: ld   a,(nb_credits_80A2)]
	cmp.b	#0x09,d0                         	| [$1039: cp   $09]
	jcc	over_9_credits_104D                	| [$103b: jr   nc,over_9_credits_104D]
	clr.b	d0                               	| [$103d: xor  a]
	move.b	d0,l_8245(a6)                   	| [$103e: ld   ($8245),a]
	move.b	bank_switch_copy_824D(a6),d0    	| [$1041: ld   a,(bank_switch_copy_824D)]
	or.b	#0x01,d0                          	| [$1044: or   $01]
	move.b	d0,bank_switch_copy_824D(a6)    	| [$1046: ld   (bank_switch_copy_824D),a]
	move.b	d0,bank_switch_d50e             	| [$1049: ld   (bank_switch_d50e),a]
	rts                                    	| [$104c: ret]

over_9_credits_104D:
	move.b	bank_switch_copy_824D(a6),d0    	| [$104d: ld   a,(bank_switch_copy_824D)]
	and.b	#0xFE,d0                         	| [$1050: and  $FE]
	move.b	d0,bank_switch_copy_824D(a6)    	| [$1052: ld   (bank_switch_copy_824D),a]
	move.b	d0,bank_switch_d50e             	| [$1055: ld   (bank_switch_d50e),a]
	rts                                    	| [$1058: ret]

check_coin_inserted_1059:
	lea	coin_slot_1_activated_80A3(a6),a0                      	| [$1059: ld   hl,$80A3]
	move.b	copy_of_port_in2_824B(a6),d0                   	| [$105c: ld   a,($824B)]
	move.b	d0,d1                           	| [$105f: ld   b,a]
	jbsr	osd_read_inputs_2                       	| [$1060: ld   a,($D40B)]
	move.b	d0,copy_of_port_in2_824B(a6)                   	| [$1063: ld   ($824B),a]
	not.b	d0                               	| [$1066: cpl]
	and.b	d1,d0                            	| [$1067: and  b]
	move.b	d0,d1                           	| [$1068: ld   b,a]
	btst.b	#5,d1                           	| [$1069: bit  5,b]
	jeq	l_1073                             	| [$106b: jr   z,$1073]
	move.b	#0xC1,d0                        	| [$106d: ld   a,$C1]
	jbsr	play_sound             	| [$106f: ld   (sound_latch_D50B),a]
	addq.b	#1,(a0)                         	| [$1072: inc  (hl)]
l_1073:
	move.b	copy_of_dip_switches_3_8250(a6),d0	| [$1073: ld   a,(copy_of_dip_switches_3_8250)]
	btst.b	#7,d0                           	| [$1076: bit  7,a]
	jne	l_1085                             	| [$1078: jr   nz,$1085]
	btst.b	#4,d1                           	| [$107a: bit  4,b]
	jeq	l_1085                             	| [$107c: jr   z,$1085]
	addq.w	#1,a0                           	| [$107e: inc  hl]
	move.b	#0xC1,d0                        	| [$107f: ld   a,$C1]
	jbsr	play_sound             	| [$1081: ld   (sound_latch_D50B),a]
	addq.b	#1,(a0)                         	| [$1084: inc  (hl)]
l_1085:
	move.b	copy_of_service_mode_824C(a6),d0	| [$1085: ld   a,(copy_of_service_mode_824C)]
	move.b	d0,d1                           	| [$1088: ld   b,a]
*	move.b	service_mode_D40C,d0            	| [$1089: ld   a,(service_mode_D40C)]
	move.b	d0,copy_of_service_mode_824C(a6)	| [$108c: ld   (copy_of_service_mode_824C),a]
	btst.b	#4,d0                           	| [$108f: bit  4,a]
	bne.b	0f                               	| [...]
	rts                                    	| [$1091: ret  z] [...]
0:
	btst.b	#4,d1                           	| [$1092: bit  4,b]
	jne	l_109c                             	| [$1094: jr   nz,$109C]
	move.b	#0x03,d0                        	| [$1096: ld   a,$03]
	move.b	d0,l_82F1(a6)                   	| [$1098: ld   ($82F1),a]
	rts                                    	| [$109b: ret]
l_109c:
	move.b	l_82F1(a6),d0                   	| [$109c: ld   a,($82F1)]
	subq.b	#1,d0                           	| [$109f: dec  a]
	bpl.b	0f                               	| [...]
	rts                                    	| [$10a0: ret  m] [...]
0:
	move.b	d0,l_82F1(a6)                   	| [$10a1: ld   ($82F1),a]
	beq.b	0f                               	| [...]
 	rts                                    	| [$10a4: ret  nz] [...]
0:
	move.b	nb_credits_80A2(a6),d0          	| [$10a5: ld   a,(nb_credits_80A2)]
	cmp.b	#0x09,d0                         	| [$10a8: cp   $09]
	bcs.b	0f                               	| [...]
	rts                                    	| [$10aa: ret  nc] [...]
0:
	addq.b	#1,d0                           	| [$10ab: inc  a]
	move.b	d0,nb_credits_80A2(a6)          	| [$10ac: ld   (nb_credits_80A2),a]
	rts                                    	| [$10af: ret]

display_credit_info_10b0:
	move.b	copy_of_dip_switches_1_824E(a6),d0	| [$10b0: ld   a,(copy_of_dip_switches_1_824E)]
	btst.b	#2,d0                           	| [$10b3: bit  2,a]
	jne	l_10c0                             	| [$10b5: jr   nz,$10C0]
	move.b	nb_credits_80A2(a6),d0          	| [$10b7: ld   a,(nb_credits_80A2)]
	add.b	#0x10,d0                         	| [$10ba: add  a,$10]
	lea		l_C7BE(a6),a0                   	| [$10bc: ld   ($C7BE),a]
	jbsr	osd_w_videoram
	rts                                    	| [$10bf: ret]
l_10c0:
	lea	free_play_string_10CA,a0                      	| [$10c0: ld   hl,free_play_string_10CA]
	lea	l_C7B7(a6),a1                      	| [$10c3: ld   de,$C7B7]
	jbsr	copy_string_to_screen_29F9        	| [$10c6: call copy_string_to_screen_29F9]
	rts                                    	| [$10c9: ret]

free_play_string_10CA:
	.byte	0x27,0x1F,0x1E,0x1E,0x33,0x1A,0x1B,0x1C,0x1D,0x1E,0xFF
	.align	2
* seems not reached
        	| [$10d5: ld   b,(ix+$37)]
        	| [$10d8: ld   h,(ix+$39)]
        	| [$10db: ld   c,(ix+$38)]
        	| [$10de: ld   l,(ix+$3a)]

        	| [$10e1: dec  hl]
        	| [$10e2: inc  ix]
        	| [$10e4: ld   a,(ix+$3a)]
         	| [$10e7: sub  c]
        	| [$10e8: ld   c,a]
         	| [$10e9: sub  (hl)]
        	| [$10ea: ld   (hl),a]
        	| [...]
       	| [$10eb: djnz $10E1]
         	| [$10ed: cp   $00]
       	| [$10ef: jp   z,$2F16]
        	| [$10f2: ld   h,(ix+$3b)]
        	| [$10f5: ld   a,(ix+$3d)]
        	| [$10f8: ld   b,(ix+$3e)]
        	| [$10fb: ld   l,(ix+$3c)]

        	| [$10fe: push hl]
        	| [$10ff: ld   l,(ix+$3f)]
        	| [$1102: ld   h,(ix+$40)]

        	| [$1105: push hl]
        	| [$1106: pop  ix]
        	| [$1108: pop  hl]
       	| [$1109: jp   $7227]
| [$110c: dec  b]
	                   	| [$110d: inc  d]
	                   	| [$1110: ld   b,e]
	                   	| [$1111: ld   h,b]
	                   	| [$1112: ld   e,l]
	                   	| [$1113: ld   c,b]
	                   	| [$1114: ld   c,l]
	                    	| [$110e: add  a,$33]
	                    	| [...]
 	                     	| [$1115: call nc,$E708]

	                  	| [$1118: ret]

l_111b:
	                                    	| [$111c: nop]
	                                    	| [$111d: nop]
	                                    	| [$111e: nop]
	                                    	| [$111f: nop]
	move.b	#0x02,d0                        	| [$1120: ld   a,$02]
	move.b	d0,game_in_play_flag_823B(a6)   	| [$1122: ld   (game_in_play_flag_823B),a]
	move.b	l_8251(a6),d0                   	| [$1125: ld   a,($8251)]
	                             	| [$1128: or   a]
	jeq	l_1167                             	| [$1129: jp   z,$1167]
	subq.b	#1,d0                           	| [$112c: dec  a]
	jeq	l_115a                             	| [$112d: jp   z,$115A]
	lea	recorded_inputs_7DD3,a0                          	| [$1130: ld   hl,$7DD3]
	jbsr		set_recorded_input            	| [$1133: ld   ($823C),hl]
 	move.b	#0x05,d0                        	| [$1136: ld   a,$05]
	move.b	d0,viewed_floor_802C(a6)                   	| [$1138: ld   ($802C),a]
l_113b:
	clr.b	d0                               	| [$113b: xor  a]
	move.b	d0,sync_flag_80AB(a6)                   	| [$113c: ld   ($80AB),a]
	move.b	d0,nb_lives_8234(a6)            	| [$113f: ld   (nb_lives_8234),a]
	move.b	d0,video_mode_d600              	| [$1142: ld   (video_mode_d600),a]
	jbsr	fix_random_seed_for_demo_1175                            	| [$1145: call $1175]
	move.b	#0x02,d0                        	| [$1148: ld   a,$02]
	move.b	d0,skill_level_8237(a6)         	| [$114a: ld   (skill_level_8237),a]
	jbsr	init_level_skill_params_2A2E      	| [$114d: call init_level_skill_params_2A2E]
	jbsr	init_building_2700                            	| [$1150: call $2700]
	jbsr	init_elevators_2a65                            	| [$1153: call $2A65]
	jbsr	start_next_level_759B             	| [$1156: call start_next_level_759B]
	rts                                    	| [$1159: ret]
l_115a:
	lea	recorded_inputs_7BD3,a0                          	| [$115a: ld   hl,$7BD3]
	jbsr		set_recorded_input            	| [$115d: ld   ($823C),hl]
	move.b	#0x12,d0                        	| [$1160: ld   a,$12]
	move.b	d0,viewed_floor_802C(a6)                   	| [$1162: ld   ($802C),a]
	jra	l_113b                             	| [$1165: jr   $113B]
l_1167:
	lea	recorded_inputs_7A63,a0                          	| [$1167: ld   hl,$7A63]
	jbsr	set_recorded_input            	| [$116a: ld   ($823C),hl]
	move.b	#0x1C,d0                        	| [$116d: ld   a,$1C]
	move.b	d0,viewed_floor_802C(a6)                   	| [$116f: ld   ($802C),a]
	jra	l_113b                             	| [$1172: jr   $113B]
	rts                                    	| [$1174: ret]

	
fix_random_seed_for_demo_1175:
	move.b	game_in_play_flag_823B(a6),d0   	| [$1175: ld   a,(game_in_play_flag_823B)]
	                          	| [$1178: dec  a]
	                         	| [$1179: jr   z,$118A]
	jbsr		get_recorded_input             	| [$117b: ld   hl,($823C)]

	move.b	(a0)+,d4                         	| [$117e: ld   e,(hl)]
	                           	| [$117f: inc  hl]
	move.b	(a0),d3                         	| [$1180: ld   d,(hl)]
	                           	| [$1181: inc  hl]
	addq.w	#2,d5
	STORE_WORD	d5,recorded_input_rom_address_823C(a6)            	| [$1182: ld   ($823C),hl]
 
	LOAD_D3_16_FROM_D3D4
	STORE_WORD	d3,pseudo_random_seed_81D6(a6)	| [$1185: ld   (pseudo_random_seed_81D6),de]
	rts                                    	| [$1189: ret]

	* doesn't seem to be ever called
	* this is part of the record mode used to record demo sequences
	
					| [$118a: ld   hl,($823C)]
	
		
			| [$118d: ld   de,(pseudo_random_seed_81D6)]
		
		
		| [$1191: ld   (hl),e]
		| [$1192: inc  hl]
		| [$1193: ld   (hl),d]
		| [$1194: inc  hl]
					| [$1195: ld   ($823C),hl]
		
	                                    	| [$1198: ret]

elevator_irq:
elevator_irq_1199:
	*di
	* save absolutely ALL registers
	move.w	d0,-(sp)                        	| [$119a: push af]

	move.l	a0,-(sp)                        	| [$119b: push hl]
	movem.w	d3/d4,-(sp)                    	| [$119c: push de]
	move.l	a1,-(sp)                        	| [$119c: push de]
	movem.w	d1/d2,-(sp)                    	| [$119d: push bc]
	move.l	a4,-(sp)                        	| [$119d: push bc]
	exg	d0,d7                              	| [$119e: ex   af,af']
	jbsr	exx                               	| [$119f: exx]
	move.w	d0,-(sp)                        	| [$11a0: push af]
	move.l	a0,-(sp)                        	| [$11a1: push hl]
	movem.w	d3/d4,-(sp)                    	| [$11a2: push de]
	move.l	a1,-(sp)                        	| [$11a2: push de]
	movem.w	d1/d2,-(sp)                    	| [$11a3: push bc]
	move.l	a4,-(sp)                        	| [$11a3: push bc]
	move.l	a2,-(sp)                        	| [$11a4: push ix]
	move.l	a3,-(sp)                        	| [$11a6: push iy]

	lea	timer_8bit_80AA(a6),a0             	| [$11a8: ld   hl,timer_8bit_80AA]
	subq.b	#1,(a0)                         	| [$11ab: dec  (hl)]
	jpl	l_1249                             	| [$11ac: jp   p,$1249]
	move.b	sync_flag_80AB(a6),d0                   	| [$11af: ld   a,($80AB)]
	                             	| [$11b2: or   a]
	jeq	l_1249                             	| [$11b3: jp   z,$1249]
	move.b	flip_screen_81D8(a6),d0                   	| [$11b6: ld   a,($81D8)]
	move.b	d0,d1                           	| [$11b9: ld   b,a]
	add.b	d1,d0                            	| [$11ba: add  a,b]
	add.b	d1,d0                            	| [$11bb: add  a,b]
	or.b	#0xF0,d0                          	| [$11bc: or   $F0]
	move.b	d0,video_mode_d600              	| [$11be: ld   (video_mode_d600),a]
	moveq	#0,d0
	move.b	game_state_80AC(a6),d0          	| [$11c1: ld   a,(game_state_80AC)]
	add.w	d0,d0                           	| [$11c4: ld   b,a]
	add.w	d0,d0                            	| [$11c5: add  a,b]
	                            	| [$11c6: add  a,b] times 3 to adjust to jump table
	                               	| [$11c8: ld   d,$00]
	                           	| [$11c7: ld   e,a]
	lea	game_screen_jump_table_11CF(pc),a0                          	| [$11ca: ld   hl,$11CF]
	move.l	(a0,d0.w),a0                        	| [$11cd: add  hl,de]
	jra	(a0)                               	| [$11ce: jp   (hl)]

game_screen_jump_table_11CF:
	.long	finish_irq_123E                     |0???| [$11cf: jp   $11ED| 0 ???]
	.long	title_sequence_11F0                	|1| [$11d2: jp   title_sequence_11F0| 1]
	.long	finish_irq_123E                     |2???| [$11d5: jp   $11F6| 2 ???]
	.long	push_start_screen_11F9             	|3| [$11d8: jp   push_start_screen_11F9| 3]
	.long	game_intro_1202                    	|4| [$11db: jp   game_intro_1202| 4]
	.long	game_running_1211                  	|5| [$11de: jp   game_running_1211| 5]
	.long	ground_floor_reached_1229          	|6| [$11e1: jp   ground_floor_reached_1229| 6]
	.long	next_life_122F                     	|7| [$11e4: jp   next_life_122F| 7]
	.long	game_over_1235                     	|8| [$11e7: jp   game_over_1235| 8]
	.long	insert_coin_screen_123B            	|9| [$11ea: jp   insert_coin_screen_123B| 9]

											| [$11ed: jp   finish_irq_123E]

title_sequence_11F0:
	jbsr	title_animation_7430                            	| [$11f0: call $7430]
	jra	finish_irq_123E                    	| [$11f3: jp   finish_irq_123E]

	                    	| [$11f6: jp   finish_irq_123E]

push_start_screen_11F9:
	jbsr	l_2eb6                            	| [$11f9: call $2EB6]
	jbsr	display_credit_info_10b0                            	| [$11fc: call $10B0]
	jra	finish_irq_123E                    	| [$11ff: jp   finish_irq_123E]

game_intro_1202:
	jbsr	l_500b                            	| [$1202: call $500B]
	jbsr	display_credit_info_10b0                            	| [$1205: call $10B0]
	jbsr	update_upper_status_bar_57C6      	| [$1208: call update_upper_status_bar_57C6]
	jbsr	display_nb_lives_5801                            	| [$120b: call $5801]
	jra	finish_irq_123E                    	| [$120e: jp   finish_irq_123E]

game_running_1211:
	jbsr	update_main_scrolling_03C3        	| [$1211: call update_main_scrolling_03C3]
	jbsr	update_door_background_1570       	| [$1214: call update_door_background_1570]
	jbsr	animate_elevators_615C            	| [$1217: call animate_elevators_615C]
	jbsr	update_sprites_15F0               	| [$121a: call update_sprites_15F0]
	jbsr	update_upper_status_bar_57C6      	| [$121d: call update_upper_status_bar_57C6]
	jbsr	display_credit_info_10b0                            	| [$1220: call $10B0]
	jbsr	display_nb_lives_5801                            	| [$1223: call $5801]
	jra	finish_irq_123E                    	| [$1226: jp   finish_irq_123E]

ground_floor_reached_1229:
	jbsr	l_0e7a                            	| [$1229: call $0E7A]
	jra	game_running_1211                  	| [$122c: jp   game_running_1211]

next_life_122F:
	jbsr	set_level_palette_26ca                            	| [$122f: call $26CA]
	jra	finish_irq_123E                    	| [$1232: jp   finish_irq_123E]

game_over_1235:
	jbsr	display_credit_info_10b0                            	| [$1235: call $10B0]
	jra	finish_irq_123E                    	| [$1238: jp   finish_irq_123E]

insert_coin_screen_123B:
	jra	finish_irq_123E                    	| [$123b: jp   finish_irq_123E]

finish_irq_123E:
	move.b	timer_8bit_reload_value_80A9(a6),d0	| [$123e: ld   a,(timer_8bit_reload_value_80A9)]
	subq.b	#1,d0                           	| [$1241: dec  a]
	move.b	d0,timer_8bit_80AA(a6)          	| [$1242: ld   (timer_8bit_80AA),a]
	* ack sync flag                               	| [$1245: xor  a]
	clr.b	sync_flag_80AB(a6)                   	| [$1246: ld   ($80AB),a]
l_1249:
	move.b	coin_counter_lock_82EA(a6),d0   	| [$1249: ld   a,(coin_counter_lock_82EA)]
											| [$124c: or   a]
	jne	l_125a                             	| [$124d: jr   nz,$125A]
	jbsr	check_coin_inserted_1059                            	| [$124f: call $1059]
	           	| [$1252: ld   a,(service_mode_D40C)]
	           	| [$1255: bit  5,a]
	          	| [$1257: jp   z,run_in_service_mode_70EB]
l_125a:
	                	| [$125a: ld   (watchdog_d50d),a]
	jbsr	handle_music_6500                 	| [$125d: call handle_music_6500]
	jbsr	handle_music_656a                            	| [$1260: call $656A]
	jbsr	l_65df                            	| [$1263: call $65DF]
	lea	protection_variable_8648(a6),a0    	| [$1266: ld   hl,protection_variable_8648]
	move.b	(a0),d0                         	| [$1269: ld   a,(hl)]
	addq.b	#2,d0                           	| [$126a: inc  a] * 2
	bset.b	#3,d0                           	| [$126c: set  3,a]
	jmi	l_1273                             	| [$126e: jp   m,$1273]
	eor.b	#0x9A,d0                         	| [$1271: xor  $9A]
l_1273:
	move.b	d0,(a0)                         	| [$1273: ld   (hl),a]
	*jbsr	mcu_comm_routine_77CF             	| [$1274: call mcu_comm_routine_77CF]
	move.l	(sp)+,a3                        	| [$1277: pop  iy]
	move.l	(sp)+,a2                        	| [$1279: pop  ix]
	move.l	(sp)+,a4                        	| [$127b: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$127b: pop  bc]
	move.l	(sp)+,a1                        	| [$127c: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$127c: pop  de]
	move.l	(sp)+,a0                        	| [$127d: pop  hl]
	move.w	(sp)+,d0                        	| [$127e: pop  af]
	jbsr	exx                               	| [$127f: exx]
	exg	d0,d7                              	| [$1280: ex   af,af']
	move.l	(sp)+,a4                        	| [$1281: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$1281: pop  bc]
	move.l	(sp)+,a1                        	| [$1282: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$1282: pop  de]
	move.l	(sp)+,a0                        	| [$1283: pop  hl]
	move.w	(sp)+,d0                        	| [$1284: pop  af]
	*ei
	rts                                    	| [$1286: ret]

init_moving_door_slots_1287:
	                                	| [$1287: ld   a,$FF]
	st.b	moving_door_slot_80AD+moving_door_timer_05(a6)                   	| [$1289: ld   ($80B2),a]
	st.b	moving_door_slot_80B5+moving_door_timer_05(a6)                   	| [$128c: ld   ($80BA),a]
	st.b	moving_door_slot_80AD+moving_door_floor_02(a6)                   	| [$128f: ld   ($80AF),a]
	st.b	moving_door_slot_80B5+moving_door_floor_02(a6)                   	| [$1292: ld   ($80B7),a]
	st.b	lower_door_sprite_struct_1_8150(a6)    | [$1295: ld   ($8150),a]
	st.b	upper_door_sprite_struct_1_8155(a6)    | [$1298: ld   ($8155),a]
	st.b	lower_door_sprite_struct_2_815A(a6)    | [$129b: ld   ($815A),a]
	st.b	upper_door_sprite_struct_1_815F(a6)    | [$129e: ld   ($815F),a]
	rts                                    	| [$12a1: ret]

handle_moving_doors_12A2:
	lea	opening_door_screen_address_80BD(a6),a0	| [$12a2: ld   hl,opening_door_screen_address_80BD]
	STORE_POINTER	a0,opening_door_screen_address_copy_80ED(a6)            	| [$12a5: ld   ($80ED),hl]
	lea	moving_door_slot_80AD(a6),a2                      	| [$12a8: ld   ix,$80AD]
	lea	lower_door_sprite_struct_1_8150(a6),a0                      	| [$12ac: ld   hl,$8150]
	STORE_POINTER	a0,moving_door_sprite_slot_80EF(a6)            	| [$12af: ld   ($80EF),hl]
	jbsr	l_12c8                            	| [$12b2: call $12C8]
	lea	moving_door_slot_80B5(a6),a2                      	| [$12b5: ld   ix,$80B5]
	lea	lower_door_sprite_struct_2_815A(a6),a0                      	| [$12b9: ld   hl,$815A]
	STORE_POINTER	a0,moving_door_sprite_slot_80EF(a6)            	| [$12bc: ld   ($80EF),hl]
	jbsr	l_12c8                            	| [$12bf: call $12C8]
	LOAD_POINTER	opening_door_screen_address_copy_80ED(a6),a0             	| [$12c2: ld   hl,($80ED)]
	clr.b	(a0)                             	| [$12c5: ld   (hl),$00]
	rts                                    	| [$12c7: ret]

l_12c8:
	move.b	(moving_door_unknown_07,a2),d0                    	| [$12c8: ld   a,(ix+$07)]
												| [$12cb: or   a]
	jne	l_12eb                             	| [$12cc: jr   nz,$12EB]
	move.b	(moving_door_timer_05,a2),d0    	| [$12ce: ld   a,(ix+character_delta_x_05)]
												| [$12d1: or   a]
	bpl.b	0f                               	| [...]
	rts                                    	| [$12d2: ret  m] [...]
0:
	addq.b	#1,(moving_door_timer_05,a2)    | [$12d3: inc  (ix+character_delta_x_05)]
	tst.b	d0                             	| [$12d6: or   a]
	jeq	l_1309                             	| [$12d7: jp   z,$1309]
	cmp.b	#0x0D,d0                         	| [$12da: cp   $0D]
	jcs	l_136a                             	| [$12dc: jp   c,$136A]
	jeq	a_door_has_closed_13b6                             	| [$12df: jp   z,$13B6]
	cmp.b	#0x30,d0                         	| [$12e2: cp   $30]
	jcs	reward_for_documents_1456                             	| [$12e4: jp   c,$1456]
	jbsr	a_blue_door_has_closed_13ec                            	| [$12e7: call $13EC]
	rts                                    	| [$12ea: ret]
l_12eb:
	move.b	(moving_door_timer_05,a2),d0    	| [$12eb: ld   a,(ix+character_delta_x_05)]
												| [$12ee: or   a]
	bpl.b	0f                               	| [...]
	rts                                    	| [$12ef: ret  m] [...]
0:
	addq.b	#1,(moving_door_timer_05,a2)    	| [$12f0: inc  (ix+character_delta_x_05)]
	tst.b	d0                             	| [$12f3: or   a]
	jeq	l_1309                             	| [$12f4: jp   z,$1309]
	sub.b	#0x08,d0                         	| [$12f7: sub  $08]
	jcs	l_1304                             	| [$12f9: jr   c,$1304]
	addq.b	#1,d0                           	| [$12fb: inc  a]
	cmp.b	#0x0D,d0                         	| [$12fc: cp   $0D]
	jcs	l_136a                             	| [$12fe: jp   c,$136A]
	jra	a_door_has_closed_13b6                             	| [$1301: jp   $13B6]
l_1304:
	move.b	#0x01,d0                        	| [$1304: ld   a,$01]
	jra	l_136a                             	| [$1306: jp   $136A]
l_1309:
	jbsr	l_1581                            	| [$1309: call $1581]
	move.b	(moving_door_floor_02,a2),d0                    	| [$130c: ld   a,(ix+$02)]
	cmp.b	#0x07,d0                         	| [$130f: cp   $07]
	jcs	door_on_lower_floors_1350                             	| [$1311: jr   c,$1350]
	move.b	(moving_door_column_04,a2),d0                    	| [$1313: ld   a,(ix+$04)]
	lsl.b	#3,d0                            	| [$1316: add  a,a]
												| [$1317: add  a,a]
												| [$1318: add  a,a]
	move.b	d0,d1                           	| [$1319: ld   b,a]
	add.b	d1,d0                            	| [$131a: add  a,b]
	add.b	d1,d0                            	| [$131b: add  a,b]
	add.b	#0x20,d0                         	| [$131c: add  a,$20]
	move.b	d0,(moving_door_x_00,a2)          	| [$131e: ld   (ix+character_x_00),a]
	add.b	#0x0F,d0                         	| [$1321: add  a,$0F]
	move.b	d0,(moving_door_unknown_01,a2)    	| [$1323: ld   (ix+character_x_right_01),a]
l_1326:
	jbsr	animate_moving_door_sprite_1486                            	| [$1326: call $1486]
	move.b	(moving_door_floor_02,a2),d0                    	| [$1329: ld   a,(ix+$02)]
	lea	door_back_tile_table_1340,a0                          	| [$132c: ld   hl,door_back_tile_table_1340]
	cmp.b	#0x10,d0                         	| [$132f: cp   $10]
	jcc	l_133c                             	| [$1331: jp   nc,$133C]
	cmp.b	#0x0B,d0                         	| [$1334: cp   $0B]
	jcs	l_133c                             	| [$1336: jp   c,$133C]
	* dark floors, select another tile for door top
	lea	door_back_tile_table_1340+8,a0                          	| [$1339: ld   hl,$1348]
l_133c:
	jbsr	draw_door_tiles_14c3                            	| [$133c: call $14C3]
	rts                                    	| [$133f: ret]
	
	
door_back_tile_table_1340:
	.byte	0x9D
	.byte	0x9D
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x9F
	.byte	0x9F
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.align	2
	
* < A2: pointer on moving_door_slot_8xxx
door_on_lower_floors_1350:
	move.b	(moving_door_column_04,a2),d0                    	| [$1350: ld   a,(ix+$04)]
	                             	| [$1353: or   a]
	jne	l_1360                             	| [$1354: jr   nz,$1360]
	* first slot
	move.b	#0x18,(0,a2)       	| [$1356: ld   (ix+0),$18]
	move.b	#0x27,(1,a2) 	| [$135a: ld   (ix+1),$27]
	jra	l_1326                             	| [$135e: jr   $1326]
l_1360:
	* must be last slot (lower floors only have 2 doors at the extremities)
	move.b	#0xD0,(0,a2)       	| [$1360: ld   (ix+0),$D0]
	move.b	#0xDF,(1,a2) 	| [$1364: ld   (ix+1),$DF]
	jra	l_1326                             	| [$1368: jr   $1326]


l_136a:
	subq.b	#1,d0                           	| [$136a: dec  a]
	move.b	d0,d1                           	| [$136b: ld   b,a]
	cmp.b	#0x04,d0                         	| [$136c: cp   $04]
	jcs	l_137b                             	| [$136e: jp   c,$137B]
	move.b	#0x0B,d0                        	| [$1371: ld   a,$0B]
	sub.b	d1,d0                            	| [$1373: sub  b]
	cmp.b	#0x04,d0                         	| [$1374: cp   $04]
	jcs	l_137b                             	| [$1376: jp   c,$137B]
	move.b	#0x03,d0                        	| [$1379: ld   a,$03]
l_137b:
	move.b	d0,d1                           	| [$137b: ld   b,a]
	jbsr	l_1539                            	| [$137c: call $1539]
	move.b	d1,d0                           	| [$137f: ld   a,b]
	add.b	d0,d0                            	| [$1380: add  a,a]
	add.b	#0x60,d0                         	| [$1381: add  a,$60]
	move.b	d0,d1                           	| [$1383: ld   b,a]
	move.b	scroll_speed_8004(a6),d0        	| [$1384: ld   a,(scroll_speed_8004)]
	neg.b	d0                               	| [$1387: neg]
	move.b	d0,d2                           	| [$1389: ld   c,a]
	LOAD_POINTER	moving_door_sprite_slot_80EF(a6),a0             	| [$138a: ld   hl,($80EF)]
	addq.w	#2,a0                           	| [$138d: inc  hl] * 2
	move.b	(a0),d0                         	| [$138f: ld   a,(hl)]
	add.b	d2,d0                            	| [$1390: add  a,c]
	move.b	d0,(a0)                         	| [$1391: ld   (hl),a]
	cmp.b	#0x18,d0                         	| [$1392: cp   $18]
	jcs	l_139a                             	| [$1394: jr   c,$139A]
	cmp.b	#0xD8,d0                         	| [$1396: cp   $D8]
	jcs	l_13a8                             	| [$1398: jr   c,$13A8]
l_139a:
	move.b	#0x0D,(moving_door_timer_05,a2) 	| [$139a: ld   (ix+character_delta_x_05),$0D]
	move.b	(moving_door_unknown_07,a2),d0      | [$139e: ld   a,(ix+$07)]
												| [$13a1: or   a]
	jeq	l_13a8                             	    | [$13a2: jr   z,$13A8]
	move.b	#0x15,(moving_door_timer_05,a2) 	| [$13a4: ld   (ix+character_delta_x_05),$15]
l_13a8:
	addq.w	#2,a0                           	| [$13a8: inc  hl]
												| [$13a9: inc  hl]
	move.b	d1,(a0)                         	| [$13aa: ld   (hl),b]
	addq.b	#1,d1                           	| [$13ab: inc  b]
	addq.w	#3,a0                           	| [$13ac: inc  hl] * 3
	move.b	(a0),d0                         	| [$13af: ld   a,(hl)]
	add.b	d2,d0                            	| [$13b0: add  a,c]
	move.b	d0,(a0)                         	| [$13b1: ld   (hl),a]
	addq.w	#2,a0                           	| [$13b2: inc  hl] * 2
	move.b	d1,(a0)                         	| [$13b4: ld   (hl),b]
	rts                                    	| [$13b5: ret]

a_door_has_closed_13b6:
	jbsr	l_1581                            	| [$13b6: call $1581]
	move.b	(moving_door_type_06,a2),d0  	| [$13b9: ld   a,(ix+moving_door_type_06)]
	and.b	#0x01,d0                         	| [$13bc: and  $01]
	move.b	(moving_door_unknown_03,a2),d1   	| [$13be: ld   b,(ix+moving_door_unknown_03)]
	add.b	d1,d0                            	| [$13c1: add  a,b]
	add.b	d1,d0                            	| [$13c2: add  a,b]
	add.b	d0,d0                            	| [$13c3: add  a,a]
	move.b	d0,d1                           	| [$13c4: ld   b,a]
	clr.b	d2                               	| [$13c5: ld   c,$00]
	move.b	(moving_door_floor_02,a2),d0        | [$13c7: ld   a,(ix+$02)]
	cmp.b	#0x10,d0                         	| [$13ca: cp   $10]
	jcc	l_13d6                             	| [$13cc: jp   nc,$13D6]
	cmp.b	#0x0B,d0                         	| [$13cf: cp   $0B]
	jcs	l_13d6                             	| [$13d1: jp   c,$13D6]
	* dark floors
	move.b	#0x01,d2                        	| [$13d4: ld   c,$01]
l_13d6:
	move.b	d1,d0                           	| [$13d6: ld   a,b]
	add.b	d2,d0                            	| [$13d7: add  a,c]
	lsl.b	#3,d0                            	| [$13d8: add  a,a]
												| [$13d9: add  a,a]
												| [$13da: add  a,a]
	moveq	#0,d1                               | [$13dc: ld   b,$00]
	move.b	d0,d1                           	| [$13db: ld   c,a]
	lea	door_tiles_table_1416,a0                          	| [$13de: ld   hl,door_tiles_table_1416]
	add.w	d1,a0                            	| [$13e1: add  hl,bc]
	jbsr	draw_door_tiles_14c3                | [$13e2: call $14C3]
	move.b	(moving_door_type_06,a2),d0  	| [$13e5: ld   a,(ix+moving_door_type_06)]
	cmp.b	#2,d0         	| [$13e8: cp   $02]
	jcc	a_red_door_has_closed_13fe                             	| [$13ea: jr   nc,$13FE]


a_blue_door_has_closed_13ec:
	st.b	d0                                	| [$13ec: ld   a,$FF]
	move.b	d0,(moving_door_timer_05,a2)    	| [$13ee: ld   (ix+moving_door_timer_05),a]
	move.b	d0,(moving_door_floor_02,a2)	    | [$13f1: ld   (ix+moving_door_floor_02),a]
	LOAD_POINTER	moving_door_sprite_slot_80EF(a6),a0             	| [$13f4: ld   hl,($80EF)]
	* invalidate both sprite structures (lower/upper)
	move.b	d0,(a0)                         	| [$13f7: ld   (hl),a]
	move.w	#0x0005,d3                      	| [$13f8: ld   de,$0005] 5
	add.w	d3,a0                            	| [$13fb: add  hl,de]
	move.b	d0,(a0)                         	| [$13fc: ld   (hl),a]
	rts                                    	| [$13fd: ret]

a_red_door_has_closed_13fe:
	jbsr	l_1500                            	| [$13fe: call $1500]
	st.b	d0                                	| [$1401: ld   a,$FF]
	LOAD_POINTER	moving_door_sprite_slot_80EF(a6),a0             	| [$1403: ld   hl,($80EF)]
	* invalidate both sprite structures (lower/upper)
	move.b	d0,(a0)                         	| [$1406: ld   (hl),a]
	move.w	#0x0005,d3                      	| [$1407: ld   de,$0005] 5
	add.w	d3,a0                            	| [$140a: add  hl,de]
	move.b	d0,(a0)                         	| [$140b: ld   (hl),a]
	addq.w	#2,a0                           	| [$140c: inc  hl] * 2
	move.b	scroll_speed_8004(a6),d0        	| [$140e: ld   a,(scroll_speed_8004)]
	neg.b	d0                               	| [$1411: neg]
	add.b	(a0),d0                          	| [$1413: add  a,(hl)]
	move.b	d0,(a0)                         	| [$1414: ld   (hl),a]
	rts                                    	| [$1415: ret]
door_tiles_table_1416:
	.byte	0x57
	.byte	0x57
	.byte	0x58
	.byte	0x58
	.byte	0x59
	.byte	0x58
	.byte	0x58
	.byte	0x58
	.byte	0x40
	.byte	0x40
	.byte	0x40
	.byte	0x40
	.byte	0x40
	.byte	0x40
	.byte	0x40
	.byte	0x40
	.byte	0x9E
	.byte	0x9E
	.byte	0x82
	.byte	0x82
	.byte	0x83
	.byte	0x82
	.byte	0x82
	.byte	0x82
	.byte	0x80
	.byte	0x80
	.byte	0x82
	.byte	0x82
	.byte	0x83
	.byte	0x82
	.byte	0x82
	.byte	0x82
	.byte	0x57
	.byte	0x57
	.byte	0x58
	.byte	0x58
	.byte	0x58
	.byte	0x5A
	.byte	0x58
	.byte	0x58
	.byte	0x40
	.byte	0x40
	.byte	0x40
	.byte	0x40
	.byte	0x40
	.byte	0x40
	.byte	0x40
	.byte	0x40
	.byte	0x9E
	.byte	0x9E
	.byte	0x82
	.byte	0x82
	.byte	0x82
	.byte	0x84
	.byte	0x82
	.byte	0x82
	.byte	0x80
	.byte	0x80
	.byte	0x82
	.byte	0x82
	.byte	0x82
	.byte	0x84
	.byte	0x82
	.byte	0x82
	.align	2
	
* make "500" points flash on the door, play reward sound
reward_for_documents_1456:
	move.b	(moving_door_timer_05,a2),d0    	| [$1456: ld   a,(ix+character_delta_x_05)]
	move.b	#0x2F,d1                        	| [$145b: ld   b,$2F]
	btst.b	#2,d0                           	| [$1459: bit  2,a]
	jne	l_1461                             	| [$145d: jr   nz,$1461]
	move.b	#0x01,d1                        	| [$145f: ld   b,$01]
l_1461:
	LOAD_POINTER	moving_door_sprite_slot_80EF(a6),a0             	| [$1461: ld   hl,($80EF)]
	st.b	(a0)                      	        | [$1464: ld   (hl),$FF]
	move.w	#0x0005,d3                      	| [$1466: ld   de,$0005] 5
	add.w	d3,a0                            	| [$1469: add  hl,de]
 	clr.b	(a0)                             	| [$146a: ld   (hl),$00]
	addq.w	#2,a0                           	| [$146c: inc  hl] * 2
	move.b	scroll_speed_8004(a6),d0        	| [$146e: ld   a,(scroll_speed_8004)]
	neg.b	d0                               	| [$1471: neg]
	add.b	(a0),d0                          	| [$1473: add  a,(hl)]
	move.b	d0,(a0)+                         	| [$1474: ld   (hl),a]
	                           	| [$1475: inc  hl]
	clr.b	(a0)+                             	| [$1476: ld   (hl),$00]
	                           	| [$1478: inc  hl]
	move.b	d1,(a0)                         	| [$1479: ld   (hl),b]
	move.b	(moving_door_timer_05,a2),d0    	| [$147a: ld   a,(ix+character_delta_x_05)]
	cmp.b	#0x0F,d0                         	| [$147d: cp   $0F]
	beq.b	0f                               	| [...]
	rts                                    	| [$147f: ret  nz] [...]
0:
	move.b	#0x36,d0                        	| [$1480: ld   a,$36] bonus for document retrieved sound
	jbsr	play_sound_3656                   	| [$1482: call play_sound_3656]
	rts                                    	| [$1485: ret]

animate_moving_door_sprite_1486:
	LOAD_POINTER	moving_door_sprite_slot_80EF(a6),a0             	| [$1486: ld   hl,($80EF)]
	move.b	#0x01,(a0)+                      	| [$1489: ld   (hl),$01] high priority
	                                         	| [$148b: inc  hl]
	move.b	(moving_door_x_00,a2),d0            | [$148c: ld   a,(ix+character_x_00)] X never changes
	move.b	d0,(a0)+                         	| [$148f: ld   (hl),a]
	                           	                | [$1490: inc  hl]
	move.b	(moving_door_floor_02,a2),d1	    | [$1491: ld   b,(ix+character_y_offset_down_02)]
	clr.b	d2                               	| [$1494: ld   c,$00]
	move.b	#0x04,d3                        	| [$1496: ld   d,$04]
	move.l	a0,-(sp)                        	| [$1498: push hl]
	jbsr	compute_delta_height_1e6c                            	| [$1499: call $1E6C]
	move.b	d6,d2                           	| [$149c: ld   c,l]
	move.l	(sp)+,a0                        	| [$149d: pop  hl]
	move.b	d2,(a0)+                         	| [$149e: ld   (hl),c] door Y, computed from floor & scroll value
	                           	                | [$149f: inc  hl]
	move.b	(moving_door_type_06,a2),d0         | [$14a0: ld   a,(ix+$06)]
	not.b	d0                               	| [$14a3: cpl]
	and.b	#0x01,d0                         	| [$14a4: and  $01]
	add.b	d0,d0                            	| [$14a6: add  a,a]
	add.b	d0,d0                            	| [$14a7: add  a,a]
	add.b	(moving_door_unknown_03,a2),d0    	| [$14a8: add  a,(ix+character_y_offset_03)]
	move.b	d0,d3                           	| [$14ab: ld   d,a]
	move.b	d3,(a0)+                         	| [$14ac: ld   (hl),d]
	                           	                | [$14ad: inc  hl]
	move.b	#0x60,(a0)+                      	| [$14ae: ld   (hl),$60]
	                           	                | [$14b0: inc  hl]
	move.b	#0x01,(a0)+                      	| [$14b1: ld   (hl),$01] high priority
	                           	                | [$14b3: inc  hl]
	move.b	(moving_door_x_00,a2),d0      | [$14b4: ld   a,(ix+character_x_00)]
	move.b	d0,(a0)+                         	| [$14b7: ld   (hl),a]
	                           	                | [$14b8: inc  hl]
	move.b	d2,d0                           	| [$14b9: ld   a,c]
	* lower part
	add.b	#0x10,d0                         	| [$14ba: add  a,$10]
	move.b	d0,(a0)+                         	| [$14bc: ld   (hl),a] Y
	                           	                | [$14bd: inc  hl]
	move.b	d3,(a0)+                         	| [$14be: ld   (hl),d]
	                           	                | [$14bf: inc  hl]
	move.b	#0x61,(a0)                      	| [$14c0: ld   (hl),$61]
	rts                                    	    | [$14c2: ret]

* either draw background (when door is opening) or draw door (when closed)
draw_door_tiles_14c3:
	move.l	a0,-(sp)                        	| [$14c3: push hl]
	move.b	(moving_door_floor_02,a2),d1	| [$14c4: ld   b,(ix+character_y_offset_down_02)]
	move.b	(moving_door_column_04,a2),d2                    	| [$14c7: ld   c,(ix+$04)]
	jbsr	l_5605                            	| [$14ca: call $5605]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,d1                           	| [$14cd: ld   b,h]
	move.b	d6,d2                           	| [$14ce: ld   c,l]
	move.l	(sp)+,a0                        	| [$14cf: pop  hl]
	LOAD_POINTER	opening_door_screen_address_copy_80ED(a6),a1             	| [$14d0: ld   de,($80ED)]
	jbsr	update_behind_door_tile_14e5        | [$14d4: call $14E5]
	jbsr	update_behind_door_tile_14e5        | [$14d7: call $14E5]
	jbsr	update_behind_door_tile_14e5        | [$14da: call $14E5]
	jbsr	update_behind_door_tile_14e5        | [$14dd: call $14E5]
	STORE_POINTER	a1,opening_door_screen_address_copy_80ED(a6)            	| [$14e0: ld   ($80ED),de]
	rts                                    	| [$14e4: ret]
	
update_behind_door_tile_14e5:
	move.b	#0xC8,d0                        	| [$14e5: ld   a,$C8]
	add.b	d1,d0                            	| [$14e7: add  a,b]
	move.b	d0,(a1)+                         	| [$14e8: ld   (de),a]
	                           	| [$14e9: inc  de]
	move.b	d2,d0                           	| [$14ea: ld   a,c]
	move.b	d0,(a1)+                         	| [$14eb: ld   (de),a]
	                           	| [$14ec: inc  de]
	move.b	(a0)+,(a1)+                         	| [$14ed: ld   a,(hl)]
	                         	| [$14ee: ld   (de),a]
	                           	| [$14ef: inc  hl]
	                           	| [$14f0: inc  de]
	move.b	(a0)+,(a1)+                         	| [$14f1: ld   a,(hl)]
	                         	| [$14f2: ld   (de),a]
	                           	| [$14f3: inc  hl]
	                           	| [$14f4: inc  de]
	move.b	d2,d0                           	| [$14f5: ld   a,c]
	add.b	#0x20,d0                         	| [$14f6: add  a,$20]
	move.b	d0,d2                           	| [$14f8: ld   c,a]
	move.b	d1,d0                           	| [$14f9: ld   a,b]
	move.b	#0x00,d7                        	| [$14fa: adc  a,$00]
	addx.b	d7,d0                           	| [$14fa: adc  a,$00]
	and.b	#0x03,d0                         	| [$14fc: and  $03]
	move.b	d0,d1                           	| [$14fe: ld   b,a]
	rts                                    	| [$14ff: ret]
l_1500:
	move.b	(moving_door_floor_02,a2),d1	| [$1500: ld   b,(ix+character_y_offset_down_02)]
	move.b	(moving_door_column_04,a2),d2                    	| [$1503: ld   c,(ix+$04)]
	jbsr	l_5605                            	| [$1506: call $5605]
												| [$1509: ld   de,$C87F]
	add.w	#0xC87F,d5                            	| [$150c: add  hl,de]
	                           	| [$150d: ld   a,h]
	and.w	#0xCBFF,d5           | [$150e: and  $CB]
	                           	| [$1510: ld   h,a]
	exg	d3,d5                              	| [$1511: ex   de,hl]
	move.b	#0x5C,d1                        	| [$1512: ld   b,$5C]
	move.b	(moving_door_column_04,a2),d0                    	| [$1514: ld   a,(ix+$04)]
	cmp.b	#0x04,d0                         	| [$1517: cp   $04]
	jcs	l_151d                             	| [$1519: jr   c,$151D]
	addq.w	#2,d3                           	| [$151b: inc  de] * 2
l_151d:
	move.b	(moving_door_floor_02,a2),d0	| [$151d: ld   a,(ix+character_y_offset_down_02)]
	cmp.b	#0x0B,d0                         	| [$1520: cp   $0B]
	jcs	l_152a                             	| [$1522: jr   c,$152A]
	cmp.b	#0x10,d0                         	| [$1524: cp   $10]
	jcc	l_152a                             	| [$1526: jr   nc,$152A]
	move.b	#0x85,d1                        	| [$1528: ld   b,$85]
l_152a:
	LOAD_D3D4_FROM_D3_16
	LOAD_POINTER	opening_door_screen_address_copy_80ED(a6),a0             	| [$152a: ld   hl,($80ED)]

	move.b	d3,(a0)+                         	| [$152d: ld   (hl),d]
	                           	| [$152e: inc  hl]
	move.b	d4,(a0)+                         	| [$152f: ld   (hl),e]
	                           	| [$1530: inc  hl]
	move.b	d1,(a0)+                         	| [$1531: ld   (hl),b]
	                           	| [$1532: inc  hl]
	move.b	d1,(a0)+                         	| [$1533: ld   (hl),b]
	                           	| [$1534: inc  hl]
	STORE_POINTER	a0,opening_door_screen_address_copy_80ED(a6)            	| [$1535: ld   ($80ED),hl]
	rts                                    	| [$1538: ret]
l_1539:
	move.b	(moving_door_column_04,a2),d0                    	| [$1539: ld   a,(ix+$04)]
	lsl.b	#3,d0                            	| [$153c: add  a,a]
												| [$153d: add  a,a]
												| [$153e: add  a,a]
	move.b	d0,d3                           	| [$153f: ld   d,a]
	add.b	d3,d0                            	| [$1540: add  a,d]
	add.b	d3,d0                            	| [$1541: add  a,d]
	add.b	#0x20,d0                         	| [$1542: add  a,$20]
	move.b	d0,d3                           	| [$1544: ld   d,a]
	move.b	d1,d0                           	| [$1545: ld   a,b]
	clr.b	d2                               	| [$1546: ld   c,$00]
	cmp.b	#0x01,d0                         	| [$1548: cp   $01]
	jmi	l_155b                             	| [$154a: jp   m,$155B]
	move.b	#0x02,d2                        	| [$154d: ld   c,$02]
	cmp.b	#0x01,d0
	jeq	l_155b                             	| [$154f: jp   z,$155B]
 	move.b	#0x05,d2                        	| [$1552: ld   c,$05]
	cmp.b	#0x02,d0                         	| [$1554: cp   $02]
	jeq	l_155b                             	| [$1556: jp   z,$155B]
	move.b	#0x08,d2                        	| [$1559: ld   c,$08]
l_155b:
	move.b	(moving_door_unknown_03,a2),d0   	| [$155b: ld   a,(ix+character_y_offset_03)]
	                             	| [$155e: or   a]
	jne	l_1568                             	| [$155f: jp   nz,$1568]
	move.b	d3,d0                           	| [$1562: ld   a,d]
	add.b	d2,d0                            	| [$1563: add  a,c]
	move.b	d0,(moving_door_x_00,a2)          	| [$1564: ld   (ix+character_x_00),a]
	rts                                    	| [$1567: ret]
l_1568:
	move.b	d3,d0                           	| [$1568: ld   a,d]
	add.b	#0x10,d0                         	| [$1569: add  a,$10]
	sub.b	d2,d0                            	| [$156b: sub  c]
	move.b	d0,(moving_door_unknown_01,a2)    	| [$156c: ld   (ix+character_x_right_01),a]
	rts                                    	| [$156f: ret]

update_door_background_1570:
	lea	opening_door_screen_address_80BD(a6),a0	| [$1570: ld   hl,opening_door_screen_address_80BD]
l_1573:
	move.b	(a0),d0                         	| [$1573: ld   a,(hl)]
	                             	| [$1574: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$1575: ret  z] [...]
0:
* change door into background: it's opening
	move.b	d0,d3                           	| [$1576: ld   d,a]
	addq.w	#1,a0                           	| [$1577: inc  hl]
	move.b	(a0)+,d4                         	| [$1578: ld   e,(hl)] load DE as screen address of door to update
	LOAD_D3_16_FROM_D3D4
	lea		videoram_layer_1_C400-0xC400(a6),a1
	add.l	d3,a1		| long add!!
	jbsr	ldi_video                               	| [$157a: ldi]
	jbsr	ldi_video                               	| [$157c: ldi]
	jra	l_1573                             	| [$157e: jp   $1573]

l_1581:
	lea	red_door_position_array_8210(a6),a0	| [$1581: ld   hl,red_door_position_array_8210]
	move.b	(moving_door_type_06,a2),d0                    	| [$1584: ld   a,(ix+$06)]
	and.b	#0xFE,d0                         	| [$1587: and  $FE]
	move.b	d0,(moving_door_type_06,a2)                    	| [$1589: ld   (ix+$06),a]
	moveq	#0,d1                               	| [$158f: ld   b,$00]
	move.b	(moving_door_floor_02,a2),d1                    	| [$158c: ld   c,(ix+$02)]
	add.w	d1,a0                            	| [$1591: add  hl,bc]
	move.b	(a0),d0                         	| [$1592: ld   a,(hl)]
	cmp.b	(moving_door_column_04,a2),d0                     	| [$1593: cp   (ix+$04)]
	beq.b	0f                               	| [...]
	rts                                    	| [$1596: ret  nz] [...]
0:
	move.b	#0x01,d0                        	| [$1597: ld   a,$01]
	or.b	(moving_door_type_06,a2),d0                      	| [$1599: or   (ix+$06)]
	move.b	d0,(moving_door_type_06,a2)                    	| [$159c: ld   (ix+$06),a]
	rts                                    	| [$159f: ret]

update_sprite_shadow_ram_15a0:
	lea	sprites_shadow_ram_8169(a6),a1     	| [$15a0: ld   de,sprites_shadow_ram_8169]
	move.b	#0x02,d1                        	| [$15a6: ld   b,$02]
	clr.b	d2                               	| [$15a8: ld   c,$00]
* disabled code (cocktail mode only)
*	move.b	flip_screen_81D8(a6),d0     | [$15a3: ld   a,($81D8)]
	                             	| [$15aa: or   a]
*	jeq	l_15b1                             	| [$15ab: jr   z,$15B1]
*	st.b	d1                                	| [$15ad: ld   b,$FF]
*	move.b	#0xFE,d2                        	| [$15af: ld   c,$FE]
l_15b1:
	jbsr	exx                               	| [$15b1: exx] save registers (a0/a1)
 	move.b	#0x04,d0                        	| [$15b2: ld   a,$04]
	move.w	#0x0005,d3                      	| [$15b4: ld   de,$0005] 5
l_15b7:
	move.w	#0x18-1,d1                        	| [$15b7: ld   b,$18] 24 objects total
	* coords are exactly the same as sprite ram, except that for the leading byte which is
	* the display priority 0 (highest) ->4 (lowest). It loops 4 times, each time adding to sprite shadow ram but filtering
	* by display priority for the 24 possible displayable sprites
	*
	* so:
	* 0: priority 0-4 (lowest)
	* 1: X coord
	* 2: Y coord
	* 3: attribute
	* 4: code
	
	lea	sprite_and_priority_shadow_ram_80F1(a6),a0               | [$15b9: ld   hl,$80F1] 5 bytes per object
* loop
l_15bc:
	cmp.b	(a0),d0                          	| [$15bc: cp   (hl)]
	jeq	update_sprite_ram_with_object_15d4      | [$15bd: jr   z,$15D4] layer id/priority matches
next_object_15bf:
	add.w	d3,a0                            	| [$15bf: add  hl,de]
	dbf	d1,l_15bc                             	| [$15c0: djnz $15BC] next object
	subq.b	#1,d0                           	| [$15c2: dec  a]
	jpl	l_15b7                             	    | [$15c3: jp   p,$15B7]
	jbsr	exx                               	| [$15c6: exx] restore registers (a1)
	lea	sprites_shadow_ram_8169+0x60(a6),a0     | [$15c7: ld   hl,$81C9] top sprite shadow ram
	clr.b	d0                               	| [$15ca: xor  a] not useful for 68k sub, but d0 needs to be zero
	cmp.l	a1,a0                            	| [$15cb: sbc  hl,de] check if sprite address as a1 got past base+0x60
	bne.b	0f                               	| [...]
	* if reached, exit (sprite shadow ram is full)
	rts                                    	| [$15cd: ret  z] [...]
0:
	sub.l	a1,a0		| perform suba, doesn't set Z flag, hence the need of cmp above!
	* compute A0 "msb"
	move.l	a0,d6
	sub.l	a6,d6
	moveq	#0,d1
	move.b	d6,d1                           	| [$15ce: ld   b,l]
	subq	#1,d1
	* clear rest of shadow ram (old objects get clobbered)
l_15cf:
	move.b	d0,(a1)+                         	| [$15cf: ld   (de),a]
	                           	                | [$15d0: inc  de]
	dbf	d1,l_15cf                             	| [$15d1: djnz $15CF]
	rts                                    	    | [$15d3: ret]
	
update_sprite_ram_with_object_15d4:
	exg	d0,d7                              	    | [$15d4: ex   af,af'] save d0
	move.l	a0,-(sp)                        	| [$15d5: push hl]
	jbsr	exx                               	| [$15d6: exx] restore target shadow ram
 	move.l	(sp)+,a0                        	| [$15d7: pop  hl]
	addq.w	#1,a0                           	| [$15d8: inc  hl] skip status
	move.b	(a0)+,d0                         	| [$15d9: ld   a,(hl)]
	add.b	d1,d0                            	| [$15da: add  a,b]
	move.b	d0,(a1)+                         	| [$15db: ld   (de),a] X coord
	                           	| [$15dc: inc  hl]
	                           	| [$15dd: inc  de]
	move.b	(a0)+,(a1)+                         	| [$15de: ld   a,(hl)] Y coord
	* no cocktail mode, no Y offset  	| [$15df: add  a,c]
									| [$15e0: ld   (de),a]
	                           	| [$15e1: inc  hl]
	                           	| [$15e2: inc  de]
	move.b	(a0)+,(a1)+         | [$15e3: ld   a,(hl)] sprite attributes
	                         	| [$15e4: ld   (de),a]
	                           	| [$15e5: inc  hl]
	                           	| [$15e6: inc  de]
	move.b	(a0)+,(a1)+         | [$15e7: ld   a,(hl)] sprite code
	                      	    | [$15e8: ld   (de),a]
	                           	| [$15e9: inc  hl]
	                           	| [$15ea: inc  de]
	jbsr	exx                               	| [$15eb: exx] save target shadow ram
	exg	d0,d7                              	| [$15ec: ex   af,af'] restore d0
	jra	next_object_15bf                             	| [$15ed: jp   $15BF]

update_sprites_15F0:
	lea	sprites_shadow_ram_8169(a6),a0     	| [$15f0: ld   hl,sprites_shadow_ram_8169]
	* jotd: simplified/faster code
	lea	sprite_ram_d100+0x7C,a1            	| [$15f3: ld   de,sprite_ram_d100+$7C]
	.rept	4											
	move.b	(a0)+,(a1)+                               	| [$15f6: ldi]
												| [$15f8: ldi]
												
												| [$15fa: ldi]
	.endr										| [$15fc: ldi]
											
    * main character sprite is in D100-D108 ex:
	* 77 72 01 40 77 82 01 4E
    * X   Y  P  C
    * X,Y, P properties: 1: mirror, 0: normal, C: code, with bit 1 set (select tileset?)
	*
	lea	sprite_ram_d100,a1                 	| [$15fe: ld   de,sprite_ram_d100]
	.rept	0x40/4										| [$1601: ldi]
	move.l	(a0)+,(a1)+									| [...]
	.endr										| [$167f: ldi]

	lea	sprite_ram_d100+0x60,a1            	| [$1681: ld   de,sprite_ram_d100+$60]
	.rept	0x1C/4                               	| [$1684: ldi]
	move.l	(a0)+,(a1)+                               	| [$1686: ldi]
	.endr								| [...]
	                               	| [$16ba: ldi]

	rts                                    	| [$16bc: ret]

l_16bd:
	lea	l_81CE(a6),a0                      	| [$16bd: ld   hl,$81CE]
	move.b	#0x06,(a0)+                      	| [$16c0: ld   (hl),$06]
	                           	| [$16c2: inc  hl]
	move.b	#0x0C,(a0)+                      	| [$16c3: ld   (hl),$0C]
	                           	| [$16c5: inc  hl]
	move.b	l_802D(a6),d0                   	| [$16c6: ld   a,($802D)]
	move.b	d0,d2                           	| [$16c9: ld   c,a]
	addq.w	#1,d2                           	| [$16ca: inc  c]
	lsl.b	#5,d0
												| [$16cb: add  a,a]
												| [$16cc: add  a,a]
												| [$16cd: add  a,a]
												| [$16ce: add  a,a]
												| [$16cf: add  a,a]
	add.b	#0x31,d0                         	| [$16d0: add  a,$31]
	move.b	d0,(a0)+                         	| [$16d2: ld   (hl),a]
	                           	| [$16d3: inc  hl]
	move.b	d2,(a0)+                         	| [$16d4: ld   (hl),c]
	                           	| [$16d5: inc  hl]
	add.b	#0x16,d0                         	| [$16d6: add  a,$16]
	move.b	d0,(a0)+                         	| [$16d8: ld   (hl),a]
	                           	| [$16d9: inc  hl]
	move.b	#0x0C,(a0)+                      	| [$16da: ld   (hl),$0C]
	                           	| [$16dc: inc  hl]
	move.b	#0xFA,(a0)+                      	| [$16dd: ld   (hl),$FA]
	                           	| [$16df: inc  hl]
	move.b	#0x0B,(a0)                      	| [$16e0: ld   (hl),$0B]
	rts                                    	| [$16e2: ret]

table_16E3:
	.byte	0x06,0x0C
	.byte	0x31,0x01,0x47
	.byte	0x0C
	.byte	0x51
	.byte	0x02
	.byte	0x67
	.byte	0x0C
	.byte	0x71
	.byte	0x03
	.byte	0x87
	.byte	0x0C
	.byte	0x91
	.byte	0x04
	.byte	0xA7
	.byte	0x0C
	.byte	0xB1
	.byte	0x05
	.byte	0xC7
	.byte	0x0C
	.byte	0xFA,0x0B,0x5B
	.byte	0x20,0x2B
	.byte	0x36,0x4B
	.byte	0x24
	.byte	0x2F
	.byte	0x1C
	.byte	0x06,0x0C
	.byte	0x31,0x01,0x47
	.byte	0x0C
	.byte	0x51
	.byte	0x02
	.byte	0x67
	.byte	0x0C
	.byte	0x71
	.byte	0x03
	.byte	0x87
	.byte	0x0C
	.byte	0x91
	.byte	0x04
	.byte	0xA7
	.byte	0x0C
	.byte	0xB1
	.byte	0x05
	.byte	0xC7
	.byte	0x0C
	.byte	0xFA,0x0B,0x5B
	.byte	0x20,0x2B
table_171E:
	.byte	0x84
	.byte	0x6F
	.byte	0x7F
	.byte	0x84
	.byte	0x82
	.byte	0x06,0x0C
	.byte	0x31,0x01,0x47
	.byte	0x0C
	.byte	0x51
	.byte	0x02
	.byte	0x67
	.byte	0x0C
	.byte	0x71
	.byte	0x03
	.byte	0x87
	.byte	0x0C
	.byte	0x91
	.byte	0x04
	.byte	0xA7
	.byte	0x0C
	.byte	0xB1
	.byte	0x05
	.byte	0xC7
	.byte	0x0C
	.byte	0xFA,0x0B,0x5B
	.byte	0x20,0x2B
	.byte	0x36,0x4B
	.byte	0x24
	.byte	0x2F
	.byte	0x1C
	.byte	0x06,0x0C
	.byte	0x31,0x01,0x47
	.byte	0x0C
	.byte	0x51
	.byte	0x02
	.byte	0x67
	.byte	0x0C
	.byte	0x71
	.byte	0x03
	.byte	0x87
	.byte	0x0C
	.byte	0x91
	.byte	0x04
	.byte	0xA7
	.byte	0x0C
	.byte	0xB1
	.byte	0x05
	.byte	0xC7
	.byte	0x0C
	.byte	0xFA,0x0B,0x5B
	.byte	0x20,0x2B
	.byte	0x36,0x4B
	.byte	0x24
	.byte	0x2F
	.byte	0x1C
	.byte	0x06,0x0C
	.byte	0x31,0x01,0x47
	.byte	0x0C
	.byte	0x51
	.byte	0x02
	.byte	0x67
	.byte	0x0C
	.byte	0x71
	.byte	0x03
	.byte	0x87
	.byte	0x0C
	.byte	0x91
	.byte	0x04
	.byte	0xA7
	.byte	0x0C
	.byte	0xB1
	.byte	0x05
	.byte	0xC7
	.byte	0x0C
	.byte	0xFA,0x0B,0x5B
	.byte	0x20,0x2B
	.byte	0x36,0x4B
	.byte	0x24
	.byte	0x2F
	.byte	0x1C
	.byte	0x06,0x0C
	.byte	0x31,0x01,0x47
	.byte	0x0C
	.byte	0x51
	.byte	0x02
	.byte	0x67
	.byte	0x0C
	.byte	0x71
	.byte	0x03
	.byte	0x87
	.byte	0x0C
	.byte	0x91
	.byte	0x04
	.byte	0xA7
	.byte	0x0C
	.byte	0xB1
	.byte	0x05
	.byte	0xC7
	.byte	0x0C
	.byte	0xFA,0x0B,0x5B
	.byte	0x20,0x2B
	.byte	0x36,0x4B
	.byte	0x24
	.byte	0x2F
	.byte	0x1C
	.byte	0x06,0x0C
	.byte	0x31,0x01,0x47
	.byte	0x0C
	.byte	0x51
	.byte	0x02
	.byte	0x67
	.byte	0x0C
	.byte	0x91
	.byte	0x04
	.byte	0xA7
	.byte	0x0C
	.byte	0xB1
	.byte	0x05
	.byte	0xC7
	.byte	0x0C
	.byte	0xFA,0x0B,0x5B
	.byte	0x20,0x2B
	.byte	0x36,0x4B
	.byte	0x24
	.byte	0x2F
	.byte	0x1C
	.byte	0x45
	.byte	0xD2,0x37,0xD4
	.byte	0x06,0x0C
	.byte	0x11,0x00,0x27
	.byte	0x0C
	.byte	0x51
	.byte	0x02
	.byte	0x67
	.byte	0x0C
	.byte	0x91
	.byte	0x04
	.byte	0xA7
	.byte	0x0C
	.byte	0xB1
	.byte	0x05
	.byte	0xC7
	.byte	0x0C
	.byte	0xD1
	.byte	0x06,0xE7
	.byte	0x0C
	.byte	0xFA,0x0B,0x5B
	.byte	0x20,0x2B
	.byte	0x36,0x4B
	.byte	0x24
	.byte	0x2F
	.byte	0x1C
	.byte	0x06,0x0C
	.byte	0x11,0x00,0x27
	.byte	0x0C
	.byte	0xD1
	.byte	0x06,0xE7
	.byte	0x0C
	.byte	0xFA,0x0B,0x5B
	.byte	0x20,0x2B
	.byte	0x36,0x4B
	.byte	0x24
	.byte	0x2F
	.byte	0x1C
	.byte	0x3B
	.byte	0x6E
	.byte	0x01,0x20,0x21
	.byte	0x36,0x5F
	.byte	0x24
	.byte	0x39
	.byte	0x62
	.byte	0x31,0xD2,0x06
	.byte	0x0C
	.byte	0x11,0x00,0x27
	.byte	0x0C
	.byte	0xD1
	.byte	0x06,0xE7
	.byte	0x0C
	.byte	0xFA,0x0B,0xBF
	.byte	0x20,0x35
	.byte	0x36,0x55
	.byte	0x24
	.byte	0x2F
	.byte	0x30,0x3B
	.byte	0x6E
	.byte	0x01,0xE8,0x49
	.byte	0x36,0x19
	.byte	0x24
	.byte	0x25
	.byte	0x62
	.byte	0x27
	.byte	0xD2,0x06,0x0C
	.byte	0x11,0x00,0x27
	.byte	0x0C
	.byte	0x71
	.byte	0x08
	.byte	0x87
	.byte	0x0C
	.byte	0xD1
	.byte	0x06,0xE7
	.byte	0x0C
	.byte	0xFA,0x0B,0x1F
	.byte	0x52
	.byte	0x2B
	.byte	0x40
	.byte	0x4B
	.byte	0x4C
	.byte	0x1B
	.byte	0x1C
	.byte	0x29
	.byte	0x34
	.byte	0x21,0x40,0x5F
	.byte	0x38,0x25
	.byte	0x62
	.byte	0x06,0x0C
	.byte	0x11,0x00,0x27
	.byte	0x0C
	.byte	0x71
	.byte	0x08
	.byte	0x87
	.byte	0x0C
	.byte	0xD1
	.byte	0x06,0xE7
	.byte	0x0C
	.byte	0xFA,0x0B,0x33
	.byte	0x2A,0x17,0x0E7
	.byte	0x5F
	.byte	0x38,0x1B
	.byte	0x76
	.byte	0x29
	.byte	0x34
	.byte	0x21,0x40,0x5F
	.byte	0x38,0x25
	.byte	0xE4,0x06,0x0C
	.byte	0x71
	.byte	0x08
	.byte	0x87
	.byte	0x0C
	.byte	0xD1
	.byte	0x06,0xE7
	.byte	0x0C
	.byte	0xFA,0x0B,0xBF
	.byte	0x20,0x35
	.byte	0x36,0x55
	.byte	0x24
	.byte	0x2F
	.byte	0x30,0x3B
	.byte	0x6E
	.byte	0x01,0xE8,0x49
	.byte	0x36,0x19
	.byte	0x24
	.byte	0x25
	.byte	0x62
	.byte	0x27
	.byte	0xD2,0x06,0x0C
	.byte	0x11,0x07,0x27
	.byte	0x0C
	.byte	0xD1
	.byte	0x06,0xE7
	.byte	0x0C
	.byte	0xFA,0x0B,0xBF
	.byte	0x20,0x35
	.byte	0x36,0x55
	.byte	0x24
	.byte	0x2F
	.byte	0x30,0x3B
	.byte	0x6E
	.byte	0x01,0xE8,0x49
	.byte	0x36,0x19
	.byte	0x24
	.byte	0x25
	.byte	0x62
	.byte	0x27
	.byte	0xD2,0x06,0x0C
	.byte	0x11,0x07,0x27
	.byte	0x0C
	.byte	0xFA,0x0B,0xBF
	.byte	0x20,0x35
	.byte	0x36,0x55
	.byte	0x24
	.byte	0x2F
	.byte	0x30,0x3B
	.byte	0x6E
	.byte	0x6F
	.byte	0x70
	.byte	0x5B
	.byte	0xE8
	.byte	0x35
	.byte	0x22,0x19,0x24
	.byte	0x43
	.byte	0x44
	.byte	0x27
	.byte	0xD2,0x6F,0x70
	.byte	0x06,0x0C
	.byte	0x11,0x07,0x27
	.byte	0x0C
	.byte	0x71
	.byte	0x09
	.byte	0x87
	.byte	0x0C
	.byte	0xFA,0x0B,0x8D
	.byte	0x0C
	.byte	0x17
	.byte	0x36,0x2D
	.byte	0x24
	.byte	0x43
	.byte	0x30,0x3B
	.byte	0x6E
	.byte	0x1F
	.byte	0x84
	.byte	0x49
	.byte	0x36,0x19
	.byte	0x2E,0x25
	.byte	0x1C
	.byte	0x27
	.byte	0xD2,0x06,0x0C
	.byte	0x71
	.byte	0x09
	.byte	0x87
	.byte	0x0C
	.byte	0xFA,0x0B,0x79
	.byte	0x16,0x35
	.byte	0x18,0x55
	.byte	0x1A
	.byte	0x1B
	.byte	0x30,0x1D
	.byte	0x6E
	.byte	0x0B
	.byte	0x0C
	.byte	0x01,0xDE,0x49
	.byte	0x18,0x19
	.byte	0x1A
	.byte	0x1B
	.byte	0x62
	.byte	0x3B
	.byte	0xD2,0x0B,0x0C
	.byte	0x06,0x0C
	.byte	0x71
	.byte	0x09
	.byte	0x87
	.byte	0x0C
	.byte	0xFA,0x0B,0x79
	.byte	0x16,0x35
	.byte	0x18,0x55
	.byte	0x1A
	.byte	0x1B
	.byte	0x30,0x1D
	.byte	0x6E
	.byte	0x0B
	.byte	0x0C
	.byte	0x01,0xDE,0x49
	.byte	0x18,0x19
	.byte	0x1A
	.byte	0x1B
	.byte	0x62
	.byte	0x3B
	.byte	0xD2,0x0B,0x0C
	.byte	0x06,0x0C
	.byte	0x79
	.byte	0x0B
	.byte	0x7F
	.byte	0x0C
	.byte	0xFA,0x0B,0x79
	.byte	0x16,0x35
	.byte	0x18,0x55
	.byte	0x1A
	.byte	0x1B
	.byte	0x30,0x1D
	.byte	0x6E
	.byte	0x0B
	.byte	0x0C
	.byte	0x01,0xDE,0x49
	.byte	0x18,0x19
	.byte	0x1A
	.byte	0x1B
	.byte	0x62
	.byte	0x3B
	.byte	0xD2,0x0B,0x0C
	.byte	0x06,0x0C
	.byte	0x71
	.byte	0x0A
	.byte	0x87
	.byte	0x0C
	.byte	0xFA,0x0B,0x79
	.byte	0x16,0x35
	.byte	0x18,0x55
	.byte	0x1A
	.byte	0x1B
	.byte	0x30,0x1D
	.byte	0x6E
	.byte	0x0B
	.byte	0x0C
	.byte	0x01,0xDE,0x49
	.byte	0x18,0x19
	.byte	0x1A
	.byte	0x1B
	.byte	0x62
	.byte	0x3B
	.byte	0xD2,0x0B,0x0C
	.byte	0x06,0x0C
	.byte	0x71
	.byte	0x0A
	.byte	0x87
	.byte	0x0C
	.byte	0xA9
	.byte	0x0B
	.byte	0xAF
	.byte	0x0C
	.byte	0xFA,0x0B,0x35
	.byte	0x18,0x55
	.byte	0x1A
	.byte	0x1B
	.byte	0x30,0x1D
	.byte	0x6E
	.byte	0x0B
	.byte	0x0C
	.byte	0x49
	.byte	0x18,0x19
	.byte	0x1A
	.byte	0x1B
	.byte	0x62
	.byte	0x3B
	.byte	0xD2,0x0B,0x0C
	.byte	0x26,0x0C
	.byte	0x71
	.byte	0x0A
	.byte	0x87
	.byte	0x0C
	.byte	0xD2,0x0B,0x79
	.byte	0x16,0x35
	.byte	0x18,0x55
	.byte	0x1A
	.byte	0x1B
	.byte	0x30,0x1D
	.byte	0x6E
	.byte	0x0B
	.byte	0x0C
	.byte	0x01,0xDE,0x49
	.byte	0x18,0x19
	.byte	0x1A
	.byte	0x1B
	.byte	0x62
	.byte	0x3B
	.byte	0xD2,0x0B,0x0C
	.byte	0x26,0x0C
	.byte	0x71
	.byte	0x0A
	.byte	0x87
	.byte	0x0C
	.byte	0xD2,0x0B,0x79
	.byte	0x16,0x35
	.byte	0x18,0x55
	.byte	0x1A
	.byte	0x1B
	.byte	0x30,0x1D
	.byte	0x6E
	.byte	0x0B
	.byte	0x0C
	.byte	0x01,0xDE,0x49
	.byte	0x18,0x19
	.byte	0x1A
	.byte	0x1B
	.byte	0x62
	.byte	0x3B
	.byte	0xD2,0x0B,0x0C
	.byte	0x26,0x0C
	.byte	0x71
	.byte	0x0A
	.byte	0x87
	.byte	0x0C
	.byte	0xD2,0x0B,0x79
	.byte	0x16,0x35
	.byte	0x18,0x55
	.byte	0x1A
	.byte	0x1B
	.byte	0x30,0x1D
	.byte	0x6E
	.byte	0x0B
	.byte	0x0C
	.byte	0x01,0xDE,0x49
	.byte	0x18,0x19
	.byte	0x1A
	.byte	0x1B
	.byte	0x62
	.byte	0x3B
	.byte	0xD2,0x0B,0x0C
	.byte	0x26,0x0C
	.byte	0x71
	.byte	0x0A
	.byte	0x87
	.byte	0x0C
	.byte	0xD2,0x0B,0x79
	.byte	0x16,0x35
	.byte	0x18,0x55
	.byte	0x1A
	.byte	0x1B
	.byte	0x30,0x1D
	.byte	0x6E
	.byte	0x0B
	.byte	0x0C
	.byte	0x01,0xDE,0x49
	.byte	0x18,0x19
	.byte	0x1A
	.byte	0x1B
	.byte	0x62
	.byte	0x3B
	.byte	0xD2,0x0B,0x0C
	.byte	0x26,0x0C
	.byte	0x71
	.byte	0x0A
	.byte	0x87
	.byte	0x0C
	.byte	0xD2,0x0B,0x79
	.byte	0x16,0x35
	.byte	0x18,0x55
	.byte	0x1A
	.byte	0x1B
	.byte	0x30,0x1D
	.byte	0x6E
	.byte	0x0B
	.byte	0x0C
	.byte	0x01,0xDE,0x49
	.byte	0x18,0x19
	.byte	0x1A
	.byte	0x1B
	.byte	0x62
	.byte	0x3B
	.byte	0xD2,0x0B,0x0C
	.byte	0x26,0x0C
	.byte	0x71
	.byte	0x0A
	.byte	0x87
	.byte	0x0C
	.byte	0xD2,0x0B,0x79
	.byte	0x16,0x35
	.byte	0x18,0x55
	.byte	0x1A
	.byte	0x1B
	.byte	0x30,0x1D
	.byte	0x6E
	.byte	0x0B
	.byte	0x0C
	.byte	0x01,0xDE,0x49
	.byte	0x18,0x19
	.byte	0x1A
	.byte	0x1B
	.byte	0x62
	.byte	0x3B
	.byte	0xD2,0x0B,0x0C
	.byte	0x26,0x0C
	.byte	0x71
	.byte	0x0A
	.byte	0x87
	.byte	0x0C
	.byte	0xD2,0x0B,0x79
	.byte	0x16,0x35
	.byte	0x18,0x55
	.byte	0x1A
	.byte	0x1B
	.byte	0x30,0x1D
	.byte	0x6E
	.byte	0x0B
	.byte	0x0C
	.byte	0x01,0xDE,0x49
	.byte	0x18,0x19
	.byte	0x1A
	.byte	0x1B
	.byte	0x62
	.byte	0x3B
	.byte	0xD2,0x0B,0x0C
	.byte	0x26,0x0C
	.byte	0x71
	.byte	0x0A
	.byte	0x87
	.byte	0x0C
	.byte	0xD2,0x0B,0x79
	.byte	0x16,0x35
	.byte	0x18,0x55
	.byte	0x1A
	.byte	0x1B
	.byte	0x30,0x1D
	.byte	0x6E
	.byte	0x0B
	.byte	0x0C
	.byte	0x01,0xDE,0x49
	.byte	0x18,0x19
	.byte	0x1A
	.byte	0x1B
	.byte	0x62
	.byte	0x3B
	.byte	0xD2,0x0B,0x0C
	.byte	0x26,0x0C
	.byte	0x71
	.byte	0x0A
	.byte	0x87
	.byte	0x0C
	.byte	0xD2,0x0B,0x79
	.byte	0x16,0x35
	.byte	0x18,0x55
	.byte	0x1A
	.byte	0x1B
	.byte	0x30,0x1D
	.byte	0x6E
	.byte	0x0B
	.byte	0x0C
	.byte	0x01,0xDE,0x49
	.byte	0x18,0x19
	.byte	0x1A
	.byte	0x1B
	.byte	0x62
	.byte	0x3B
	.byte	0xD2,0x0B,0x0C
	.byte	0x26,0x0C
	.byte	0x71
	.byte	0x0A
	.byte	0x87
	.byte	0x0C
	.byte	0xD2,0x0B,0x79
	.byte	0x16,0x35
	.byte	0x18,0x55
	.byte	0x1A
	.byte	0x1B
	.byte	0x30,0x1D
	.byte	0x6E
	.byte	0x0B
	.byte	0x0C
	.byte	0x01,0xDE,0x49
	.byte	0x18,0x19
	.byte	0x1A
	.byte	0x1B
	.byte	0x62
	.byte	0x3B
	.byte	0xD2,0x0B,0x0C
	.byte	0x26,0x0C
	.byte	0x71
	.byte	0x0A
	.byte	0x87
	.byte	0x0B
	.byte	0x79
	.byte	0x16,0x35
	.byte	0x18,0x55
	.byte	0x1A
	.byte	0x1B
	.byte	0x30,0x1D
	.byte	0x6E
	.byte	0x0B
	.byte	0x0C
	.byte	0x71
	.byte	0x01,0xDE,0x49
	.byte	0x18,0x19
	.byte	0x1A
	.byte	0x1B
	.byte	0x62
	.byte	0x3B
	.byte	0xD2,0x0B,0x0C
	.byte	0x71
	.align	2

enemy_in_elevator_1AE3:
	clr.b	d0                               	| [$1ae3: xor  a]
	move.b	d0,(0x18,a2)                    	| [$1ae4: ld   (ix+$18),a]
	move.b	d0,(0x1a,a2)                    	| [$1ae7: ld   (ix+$1a),a]
	move.b	d0,(0x17,a2)                    	| [$1aea: ld   (ix+$17),a]
	move.b	#0x5A,(0x0e,a2)                 	| [$1aed: ld   (ix+$0e),$5A]
	move.b	player_structure_851A+current_floor_07(a6),d0	| [$1af1: ld   a,(player_structure_851A+current_floor_07)]
	cmp.b	#0x07,d0                         	| [$1af4: cp   $07]
	jcs	l_1b25                             	| [$1af6: jp   c,$1B25]
	move.b	(0x10,a2),d0                    	| [$1af9: ld   a,(ix+$10)]
	                             	| [$1afc: or   a]
	jne	l_1b1c                             	| [$1afd: jp   nz,$1B1C]
	jbsr	should_enemy_shoot_0568                            	| [$1b00: call $0568]
	jcc	l_1b20                             	| [$1b03: jp   nc,$1B20]
	move.b	l_8520(a6),d0                   	| [$1b06: ld   a,($8520)]
	                             	| [$1b09: or   a]
	jeq	l_1b19                             	| [$1b0a: jr   z,$1B19]
	move.b	player_structure_851A+associated_elevator_08(a6),d0	| [$1b0c: ld   a,(player_structure_851A+associated_elevator_08)]
	cmp.b	(associated_elevator_08,a2),d0   	| [$1b0f: cp   (ix+associated_elevator_08)]
	jne	l_1b19                             	| [$1b12: jr   nz,$1B19]
	jbsr	l_1b89                            	| [$1b14: call $1B89]
	jra	l_1b1c                             	| [$1b17: jr   $1B1C]
l_1b19:
	jbsr	l_1b74                            	| [$1b19: call $1B74]
l_1b1c:
	jbsr	l_003b                            	| [$1b1c: call $003B]
	rts                                    	| [$1b1f: ret]
l_1b20:
	clr.b	(0x0f,a2)                        	| [$1b20: ld   (ix+$0f),$00]
	rts                                    	| [$1b24: ret]
l_1b25:
	move.b	(0x10,a2),d0                    	| [$1b25: ld   a,(ix+$10)]
	                             	| [$1b28: or   a]
	jne	l_1b1c                             	| [$1b29: jp   nz,$1B1C]
	jbsr	should_enemy_shoot_0568                            	| [$1b2c: call $0568]
	jcc	l_1b20                             	| [$1b2f: jp   nc,$1B20]
	jbsr	l_1c44                            	| [$1b32: call $1C44]
	jra	l_1b1c                             	| [$1b35: jp   $1B1C]

enemy_jumping_above_elevator_1B38:
	clr.b	d0                               	| [$1b38: xor  a]
	move.b	d0,(0x18,a2)                    	| [$1b39: ld   (ix+$18),a]
	move.b	d0,(0x1a,a2)                    	| [$1b3c: ld   (ix+$1a),a]
	move.b	d0,(0x17,a2)                    	| [$1b3f: ld   (ix+$17),a]
	move.b	#0x5A,(0x0e,a2)                 	| [$1b42: ld   (ix+$0e),$5A]
	move.b	(0x11,a2),d0                    	| [$1b46: ld   a,(ix+$11)]
	                            	| [$1b49: or   a]
	jeq	l_1b61                             	| [$1b4a: jr   z,$1B61]
	move.b	(0x12,a2),d0                    	| [$1b4c: ld   a,(ix+$12)]
	cmp.b	#0x04,d0                         	| [$1b4f: cp   $04]
	jcc	l_1b5d                             	| [$1b51: jr   nc,$1B5D]
	move.b	(0x0b,a2),d0                    	| [$1b53: ld   a,(ix+$0b)]
	eor.b	#0x01,d0                         	| [$1b56: xor  $01]
	move.b	d0,(0x0b,a2)                    	| [$1b58: ld   (ix+$0b),a]
	jra	l_1b61                             	| [$1b5b: jr   $1B61]
l_1b5d:
	move.b	#0x04,(0x12,a2)                 	| [$1b5d: ld   (ix+$12),$04]
l_1b61:
	move.b	(0x10,a2),d0                    	| [$1b61: ld   a,(ix+$10)]
	                             	| [$1b64: or   a]
	jne	l_1b1c                             	| [$1b65: jp   nz,$1B1C]
	jbsr	should_enemy_shoot_0568                            	| [$1b68: call $0568]
	jcc	l_1b20                             	| [$1b6b: jp   nc,$1B20]
	jbsr	l_1b9e                            	| [$1b6e: call $1B9E]
	jra	l_1b1c                             	| [$1b71: jp   $1B1C]

l_1b74:
	jbsr	load_character_elevator_structure_62CE	| [$1b74: call load_character_elevator_structure_62CE]
	jbsr	l_1baa                            	| [$1b77: call $1BAA]
	move.b	(a3),d0                    	| [$1b7a: ld   a,(iy+$00)]
	cmp.b	#0x10,d0                         	| [$1b7d: cp   $10]
	bcs.b	0f                               	| [...]
	rts                                    	| [$1b7f: ret  nc] [...]
0:
	move.b	#0x03,d0                        	| [$1b80: ld   a,$03]
	or.b	(0x12,a2),d0                      	| [$1b82: or   (ix+$12)]
	move.b	d0,(0x12,a2)                    	| [$1b85: ld   (ix+$12),a]
	rts                                    	| [$1b88: ret]
l_1b89:
	jbsr	l_1baa                            	| [$1b89: call $1BAA]
	move.b	(0x12,a2),d0                    	| [$1b8c: ld   a,(ix+$12)]
	                             	| [$1b8f: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$1b90: ret  nz] [...]
0:
	move.b	#0x03,(0x12,a2)                 	| [$1b91: ld   (ix+$12),$03]
	move.b	(0x0b,a2),d0                    	| [$1b95: ld   a,(ix+$0b)]
	eor.b	#0x01,d0                         	| [$1b98: xor  $01]
	move.b	d0,(0x0b,a2)                    	| [$1b9a: ld   (ix+$0b),a]
	rts                                    	| [$1b9d: ret]
l_1b9e:
	jbsr	l_1baa                            	| [$1b9e: call $1BAA]
	move.b	(0x12,a2),d0                    	| [$1ba1: ld   a,(ix+$12)]
	or.b	#0x03,d0                          	| [$1ba4: or   $03]
	move.b	d0,(0x12,a2)                    	| [$1ba6: ld   (ix+$12),a]
	rts                                    	| [$1ba9: ret]
l_1baa:
	clr.b	(0x12,a2)                        	| [$1baa: ld   (ix+$12),$00]
	LOAD_POINTER	ram_pointer_85BD(a6),a0             	| [$1bae: ld   hl,($85BD)]
	move.b	(a0),d0                         	| [$1bb1: ld   a,(hl)]
	addq.b	#1,d0                           	| [$1bb2: inc  a]
	or.b	(enemy_shoot_timeout_19,a2),d0     | [$1bb3: or   (ix+$19)]
	jne	l_1bd5                             	| [$1bb6: jr   nz,$1BD5]
	move.b	player_structure_851A+9(a6),d0  	| [$1bb8: ld   a,(player_structure_851A+9)]
	subq.b	#0x05,d0                        	| [$1bbb: sub  $05]
	jeq	l_1bd5                             	| [$1bbd: jr   z,$1BD5]
	subq.b	#1,d0                           	| [$1bbf: dec  a]
	jeq	l_1bd5                             	| [$1bc0: jr   z,$1BD5]
	lea	table_1C04,a0                      	| [$1bc2: ld   hl,table_1C04]
	moveq	#0,d3                               	| [$1bc8: ld   d,$00]
	move.b	(enemy_aggressivity_13,a2),d3   	| [$1bc5: ld   e,(ix+enemy_aggressivity_13)]
	add.w	d3,a0                            	| [$1bca: add  hl,de]
	jbsr	pseudo_random_with_regsave_1DF5                	| [$1bcb: call pseudo_random_with_regsave_1DF5]
	cmp.b	(a0),d0                          	| [$1bce: cp   (hl)]
	jcc	l_1bd5                             	| [$1bcf: jr   nc,$1BD5]
	move.b	#0x04,(0x12,a2)                 	| [$1bd1: ld   (ix+$12),$04]
l_1bd5:
	move.b	current_enemy_index_85BA(a6),d0 	| [$1bd5: ld   a,(current_enemy_index_85BA)]
	moveq   #0,d3                               	| [$1bd9: ld   d,$00]
	move.b	d0,d3                           	| [$1bd8: ld   e,a]
	lea	l_82F8(a6),a0                      	| [$1bdb: ld   hl,$82F8]
	add.w	d3,a0                            	| [$1bde: add  hl,de]
	move.b	#0x0A,d0                        	| [$1bdf: ld   a,$0A]
	sub.b	(enemy_aggressivity_13,a2),d0    	| [$1be1: sub  (ix+enemy_aggressivity_13)]
	jcc	l_1be7                             	| [$1be4: jr   nc,$1BE7]
	clr.b	d0                               	| [$1be6: xor  a]
l_1be7:
	move.b	d0,(a0)                         	| [$1be7: ld   (hl),a]
	addq.b	#0x02,d0                        	| [$1be8: add  a,$02]
	cmp.b	#0x07,d0                         	| [$1bea: cp   $07]
	jcc	l_1bf0                             	| [$1bec: jr   nc,$1BF0]
	move.b	#0x07,d0                        	| [$1bee: ld   a,$07]
l_1bf0:
	move.b	d0,(0x10,a2)                    	| [$1bf0: ld   (ix+$10),a]
	move.b	d0,l_8000(a6)                   	| [$1bf3: ld   ($8000),a]
	move.b	player_structure_851A(a6),d0    	| [$1bf6: ld   a,(player_structure_851A)]
	sub.b	(character_x_00,a2),d0           	| [$1bf9: sub  (ix+character_x_00)]
	INVERT_XC_FLAGS                        	| [$1bfc: ccf]
	roxl.b	#1,d0                           	| [$1bfd: rla]
	and.b	#0x01,d0                         	| [$1bfe: and  $01]
	move.b	d0,(0x0b,a2)                    	| [$1c00: ld   (ix+$0b),a]
	rts                                    	| [$1c03: ret]

table_1C04:
	.byte	0x00
	.byte	0x20,0x40
	.byte	0x80
	.byte	0x90
	.byte	0xA0
	.byte	0xB0
	.byte	0xC0
	.byte	0xFF
	.byte	0xFF
	.byte	0xFF
	.byte	0xFF
	.byte	0xFF
	.byte	0xFF
	.byte	0xFF
	.byte	0xFF
	.align	2

enemy_shooting_state_1C14:
	clr.b	(0x1b,a2)                        	| [$1c14: ld   (ix+$1b),$00]
	clr.b	(0x18,a2)                        	| [$1c18: ld   (ix+$18),$00]
	move.b	#0x5A,(0x0e,a2)                 	| [$1c1c: ld   (ix+$0e),$5A]
	move.b	(0x10,a2),d0                    	| [$1c20: ld   a,(ix+$10)]
	                             	| [$1c23: or   a]
	jne	l_1c30                             	| [$1c24: jp   nz,$1C30]
	jbsr	should_enemy_shoot_0568                            	| [$1c27: call $0568]
	jcc	l_1c3b                             	| [$1c2a: jp   nc,$1C3B]
	jbsr	l_1c44                            	| [$1c2d: call $1C44]
l_1c30:
	jbsr	l_05f5                            	| [$1c30: call $05F5]
	jbsr	l_003b                            	| [$1c33: call $003B]
	move.b	#0xFF,(0x08,a2)                 	| [$1c36: ld   (ix+$08),$FF]
	rts                                    	| [$1c3a: ret]
l_1c3b:
	clr.b	(0x0f,a2)                        	| [$1c3b: ld   (ix+$0f),$00]
	clr.b	(0x10,a2)                        	| [$1c3f: ld   (ix+$10),$00]
	rts                                    	| [$1c43: ret]

l_1c44:
	LOAD_POINTER	ram_pointer_85BD(a6),a0             	| [$1c44: ld   hl,($85BD)]
	move.b	(a0),d0                         	| [$1c47: ld   a,(hl)]
	addq.b	#1,d0                           	| [$1c48: inc  a]
	or.b	(enemy_shoot_timeout_19,a2),d0                      	| [$1c49: or   (ix+$19)]
	jeq	l_1c5f                             	| [$1c4c: jr   z,$1C5F]
l_1c4e:
	* 2 values are at 0 (shoot timeout and another!): see if we should fire
	move.b	current_enemy_index_85BA(a6),d0 	| [$1c4e: ld   a,(current_enemy_index_85BA)]
	lea	table_1D75-0x75+0xD5,a0                          	| [$1c53: ld   hl,$1DD5]
	cmp.b	#0x03,d0                         	| [$1c51: cp   $03]
	jcc	l_1c5b                             	| [$1c56: jr   nc,$1C5B]
	lea	table_1D75-0x75+0xB5,a0                          	| [$1c58: ld   hl,$1DB5]
l_1c5b:
	jbsr	l_1d3f                            	| [$1c5b: call $1D3F]
	rts                                    	| [$1c5e: ret]
l_1c5f:
	move.b	player_structure_851A+9(a6),d0  	| [$1c5f: ld   a,(player_structure_851A+9)]
	subq.b	#0x05,d0                        	| [$1c62: sub  $05]
	jeq	l_1c4e                             	| [$1c64: jr   z,$1C4E]
	subq.b	#1,d0                           	| [$1c66: dec  a]
	jeq	l_1c4e                             	| [$1c67: jr   z,$1C4E]
	move.b	current_enemy_index_85BA(a6),d0 	| [$1c69: ld   a,(current_enemy_index_85BA)]
	cmp.b	#0x03,d0                         	| [$1c6c: cp   $03]
	lea	table_1D75+0x20,a0                          	| [$1c6e: ld   hl,$1D95]
	jcc	l_1c76                             	| [$1c71: jr   nc,$1C76]
	lea	table_1D75,a0                      	| [$1c73: ld   hl,table_1D75]
l_1c76:
	jbsr	l_1c7a                            	| [$1c76: call $1C7A]
	rts                                    	| [$1c79: ret]

l_1c7a:
	move.b	(enemy_aggressivity_13,a2),d0   	| [$1c7a: ld   a,(ix+enemy_aggressivity_13)]
	and.b	#0xFE,d0                         	| [$1c7d: and  $FE]
	add.b	d0,d0                            	| [$1c7f: add  a,a]
	moveq   #0,d3                               	| [$1c81: ld   d,$00]
	move.b	d0,d3                           	| [$1c80: ld   e,a]
	add.w	d3,a0                            	| [$1c83: add  hl,de]
	jbsr	pseudo_random_with_regsave_1DF5                	| [$1c84: call pseudo_random_with_regsave_1DF5]
	move.b	#0x04,d1                        	| [$1c87: ld   b,$04]
	cmp.b	(a0),d0                          	| [$1c89: cp   (hl)]
	jcs	l_1c97                             	| [$1c8a: jr   c,$1C97]
	addq.b	#1,d1                           	| [$1c8c: inc  b]
	addq.w	#1,a0                           	| [$1c8d: inc  hl]
	cmp.b	(a0),d0                          	| [$1c8e: cp   (hl)]
	jcs	l_1c97                             	| [$1c8f: jr   c,$1C97]
	addq.b	#1,d1                           	| [$1c91: inc  b]
	addq.w	#1,a0                           	| [$1c92: inc  hl]
	cmp.b	(a0),d0                          	| [$1c93: cp   (hl)]
	jcs	l_1c97                             	| [$1c94: jr   c,$1C97]
	addq.b	#1,d1                           	| [$1c96: inc  b]
l_1c97:
	move.b	d1,(0x12,a2)                    	| [$1c97: ld   (ix+$12),b]
	move.b	current_enemy_index_85BA(a6),d0 	| [$1c9a: ld   a,(current_enemy_index_85BA)]
	moveq   #0,d3                               	| [$1c9e: ld   d,$00]
	move.b	d0,d3                           	| [$1c9d: ld   e,a]
	lea	l_82F8(a6),a0                      	| [$1ca0: ld   hl,$82F8]
	add.w	d3,a0                            	| [$1ca3: add  hl,de]
	move.b	#0x0A,d0                        	| [$1ca4: ld   a,$0A]
	sub.b	(enemy_aggressivity_13,a2),d0    	| [$1ca6: sub  (ix+enemy_aggressivity_13)]
	jcc	l_1cac                             	| [$1ca9: jr   nc,$1CAC]
	clr.b	d0                               	| [$1cab: xor  a]
l_1cac:
	move.b	d0,(a0)                         	| [$1cac: ld   (hl),a]
	addq.b	#0x02,d0                        	| [$1cad: add  a,$02]
	cmp.b	#0x07,d0                         	| [$1caf: cp   $07]
	jcc	l_1cb5                             	| [$1cb1: jr   nc,$1CB5]
	move.b	#0x07,d0                        	| [$1cb3: ld   a,$07]
l_1cb5:
	move.b	d0,(0x10,a2)                    	| [$1cb5: ld   (ix+$10),a]
	move.b	d0,l_8000(a6)                   	| [$1cb8: ld   ($8000),a]
	move.b	player_structure_851A(a6),d0    	| [$1cbb: ld   a,(player_structure_851A)]
	cmp.b	(character_x_00,a2),d0           	| [$1cbe: cp   (ix+character_x_00)]
	INVERT_XC_FLAGS                        	| [$1cc1: ccf]
	clr.b	d0                               	| [$1cc2: ld   a,$00]
	roxl.b	#1,d0                           	| [$1cc4: rla]
	move.b	d0,(0x0b,a2)                    	| [$1cc5: ld   (ix+$0b),a]
	jbsr	l_1ccc                            	| [$1cc8: call $1CCC]
	rts                                    	| [$1ccb: ret]

l_1ccc:
	move.b	(0x12,a2),d0                    	| [$1ccc: ld   a,(ix+$12)]
	cmp.b	#0x06,d0                         	| [$1ccf: cp   $06]
	jeq	l_1cfc                             	| [$1cd1: jr   z,$1CFC]
l_1cd3:
	move.b	(enemy_aggressivity_13,a2),d0   	| [$1cd3: ld   a,(ix+enemy_aggressivity_13)]
	                             	| [$1cd6: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$1cd7: ret  z] [...]
0:
	move.b	l_8530(a6),d0                   	| [$1cd8: ld   a,($8530)]
	sub.b	(0x16,a2),d0                     	| [$1cdb: sub  (ix+$16)]
	add.b	#0x08,d0                         	| [$1cde: add  a,$08]
	jmi	l_1cf1                             	| [$1ce0: jp   m,$1CF1]
	cmp.b	#0x10,d0                         	| [$1ce3: cp   $10]
	bcc.b	0f                               	| [...]
	rts                                    	| [$1ce5: ret  c] [...]
0:
	move.b	(0x12,a2),d0                    	| [$1ce6: ld   a,(ix+$12)]
	cmp.b	#0x07,d0                         	| [$1ce9: cp   $07]
	bne.b	0f                               	| [...]
	rts                                    	| [$1ceb: ret  z] [...]
0:
	move.b	#0x04,(0x12,a2)                 	| [$1cec: ld   (ix+$12),$04]
	rts                                    	| [$1cf0: ret]
l_1cf1:
	move.b	(0x12,a2),d0                    	| [$1cf1: ld   a,(ix+$12)]
	cmp.b	#0x06,d0                         	| [$1cf4: cp   $06]
	bne.b	0f                               	| [...]
	rts                                    	| [$1cf6: ret  z] [...]
0:
	move.b	#0x05,(0x12,a2)                 	| [$1cf7: ld   (ix+$12),$05]
	rts                                    	| [$1cfb: ret]
l_1cfc:
	move.b	(character_x_00,a2),d0          	| [$1cfc: ld   a,(ix+character_x_00)]
	cmp.b	#0x10,d0                         	| [$1cff: cp   $10]
	jcs	l_1d3a                             	| [$1d01: jr   c,$1D3A]
	cmp.b	#0xF0,d0                         	| [$1d03: cp   $F0]
	jcc	l_1d3a                             	| [$1d05: jr   nc,$1D3A]
	move.b	(0x07,a2),d0                    	| [$1d07: ld   a,(ix+$07)]
	cmp.b	#0x07,d0                         	| [$1d0a: cp   $07]
	jeq	l_1d2f                             	| [$1d0c: jr   z,$1D2F]
	cmp.b	#0x06,d0                         	| [$1d0e: cp   $06]
	jeq	l_1d24                             	| [$1d10: jr   z,$1D24]
	jcc	l_1cd3                             	| [$1d12: jr   nc,$1CD3]
	tst.b	d0                             	| [$1d14: or   a]
	jeq	l_1cd3                             	| [$1d15: jr   z,$1CD3]
	move.b	(character_x_00,a2),d0          	| [$1d17: ld   a,(ix+character_x_00)]
	cmp.b	#0x41,d0                         	| [$1d1a: cp   $41]
	jcs	l_1cd3                             	| [$1d1c: jr   c,$1CD3]
	cmp.b	#0xB4,d0                         	| [$1d1e: cp   $B4]
	jcs	l_1d3a                             	| [$1d20: jr   c,$1D3A]
	jra	l_1cd3                             	| [$1d22: jr   $1CD3]
l_1d24:
	move.b	(character_x_00,a2),d0          	| [$1d24: ld   a,(ix+character_x_00)]
	cmp.b	#0x41,d0                         	| [$1d27: cp   $41]
	jcs	l_1cd3                             	| [$1d29: jr   c,$1CD3]
	cmp.b	#0x5A,d0                         	| [$1d2b: cp   $5A]
	jcs	l_1d3a                             	| [$1d2d: jr   c,$1D3A]
l_1d2f:
	move.b	(character_x_00,a2),d0          	| [$1d2f: ld   a,(ix+character_x_00)]
	cmp.b	#0xA0,d0                         	| [$1d32: cp   $A0]
	jcs	l_1cd3                             	| [$1d34: jr   c,$1CD3]
	cmp.b	#0xB4,d0                         	| [$1d36: cp   $B4]
	jcc	l_1cd3                             	| [$1d38: jr   nc,$1CD3]
l_1d3a:
	move.b	#0x05,(0x12,a2)                 	| [$1d3a: ld   (ix+$12),$05]
	rts                                    	| [$1d3e: ret]
l_1d3f:
	move.b	(enemy_aggressivity_13,a2),d0   	| [$1d3f: ld   a,(ix+enemy_aggressivity_13)]
	and.b	#0xFE,d0                         	| [$1d42: and  $FE]
	add.b	d0,d0                            	| [$1d44: add  a,a]
	moveq   #0,d3                               	| [$1d46: ld   d,$00]
	move.b	d0,d3                           	| [$1d45: ld   e,a]
	add.w	d3,a0                            	| [$1d48: add  hl,de]
	jbsr	pseudo_random_with_regsave_1DF5                	| [$1d49: call pseudo_random_with_regsave_1DF5]
	moveq	#0,d1                      	| [$1d4c: ld   bc,$0000] 0
	moveq	#0,d2                      	| [$1d4c: ld   bc,$0000] 0
	cmp.b	(a0),d0                          	| [$1d4f: cp   (hl)]
	jcs	l_1d5f                             	| [$1d50: jr   c,$1D5F]
	addq.b	#1,d1                           	| [$1d52: inc  b]
	addq.w	#1,a0                           	| [$1d53: inc  hl]
	cmp.b	(a0),d0                          	| [$1d54: cp   (hl)]
	jcs	l_1d5f                             	| [$1d55: jr   c,$1D5F]
	move.b	#0x03,d1                        	| [$1d57: ld   b,$03]
	addq.w	#1,a0                           	| [$1d59: inc  hl]
	cmp.b	(a0),d0                          	| [$1d5a: cp   (hl)]
	jcs	l_1d5f                             	| [$1d5b: jr   c,$1D5F]
	move.b	#0x01,d2                        	| [$1d5d: ld   c,$01]
l_1d5f:
	move.b	d1,(0x12,a2)                    	| [$1d5f: ld   (ix+$12),b]
	move.b	#0x0A,(0x10,a2)                 	| [$1d62: ld   (ix+$10),$0A]
	move.b	player_structure_851A(a6),d0    	| [$1d66: ld   a,(player_structure_851A)]
	cmp.b	(character_x_00,a2),d0           	| [$1d69: cp   (ix+character_x_00)]
	INVERT_XC_FLAGS                        	    | [$1d6c: ccf]
	clr.b	d0                               	| [$1d6d: ld   a,$00]
	roxl.b	#1,d0                           	| [$1d6f: rla]
	eor.b	d2,d0                            	| [$1d70: xor  c]
	move.b	d0,(character_facing_direction_0b,a2)      | [$1d71: ld   (ix+$0b),a]
	rts                                    	| [$1d74: ret]

table_1D75:
	.byte	0xC4,0xC4,0xC4
	.byte	0x00
	.byte	0x80
	.byte	0xC4,0xC4,0x00
	.byte	0x40
	.byte	0xC4,0xC4,0x00
	.byte	0x20,0x80
	.byte	0xC4,0x00,0x08
	.byte	0x40
	.byte	0xC4,0x00,0x08
	.byte	0x20,0xC4
	.byte	0x00
	.byte	0x08
	.byte	0x10,0xC4
	.byte	0x00
	.byte	0x00
	.byte	0x08
	.byte	0xC4,0x00,0x40
	.byte	0x40
	.byte	0x40
	.byte	0x00
	.byte	0x30,0x40
	.byte	0x40
	.byte	0x00
	.byte	0x20,0x40
	.byte	0x40
	.byte	0x00
	.byte	0x18,0x30
	.byte	0x40
	.byte	0x00
	.byte	0x10,0x20
	.byte	0x40
	.byte	0x00
	.byte	0x08
	.byte	0x10,0x40
	.byte	0x00
	.byte	0x00
	.byte	0x08
	.byte	0x40
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x40
	.byte	0x00
	.byte	0xC4,0xC4,0xDC
	.byte	0x00
	.byte	0x90
	.byte	0xC4,0xDC,0x00
	.byte	0x80
	.byte	0xC4,0xDC,0x00
	.byte	0x40
	.byte	0xC4,0xDC,0x00
	.byte	0x20,0xC4
	.byte	0xDC,0x00,0x10
	.byte	0xC4,0xDC,0x00
	.byte	0x00
	.byte	0xC4,0xDC,0x00
	.byte	0x00
	.byte	0xC4,0xDC,0x00
	.byte	0x80
	.byte	0x80
	.byte	0xFF
	.byte	0x00
	.byte	0x70
	.byte	0x80
	.byte	0xFF
	.byte	0x00
	.byte	0x60
	.byte	0x80
	.byte	0xFF
	.byte	0x00
	.byte	0x40
	.byte	0x80
	.byte	0xFF
	.byte	0x00
	.byte	0x20,0xC4
	.byte	0xFF
	.byte	0x00
	.byte	0x10,0xC4
	.byte	0xFF
	.byte	0x00
	.byte	0x08
	.byte	0xC4,0xFF,0x00
	.byte	0x00
	.byte	0xC4,0xFF,0x00
	.align	2

pseudo_random_with_regsave_1DF5:
	movem.w	d5/d6,-(sp)                        	| [$1df5: push hl]
	jbsr		pseudo_random_1E06		| [$1df6: ld   hl,(pseudo_random_seed_81D6)]
		| [$1df6: ld   hl,(pseudo_random_seed_81D6)]
		| [$1df9: ld   a,l]
	 	| [$1dfa: add  a,$C7]
		| [$1dfc: ld   l,a]
		| [$1dfd: adc  a,h]
	 	| [$1dfe: sub  $C7]
		| [$1e00: ld   h,a]
	| [$1e01: ld   (pseudo_random_seed_81D6),hl]
		| [$1e01: ld   (pseudo_random_seed_81D6),hl]
	movem.w	(sp)+,d5/d6                        	| [$1e04: pop  hl]
	rts                                    	| [$1e05: ret]


pseudo_random_1E06:
	move.b	pseudo_random_seed_81D6(a6),d6		| [$1e06: ld   hl,(pseudo_random_seed_81D6)]
    move.b	pseudo_random_seed_81D6+1(a6),d5
	move.b	d6,d0                           	| [$1e09: ld   a,l]
	add.b	#0xC7,d0                         	| [$1e0a: add  a,$C7]
	move.b	d0,d6                           	| [$1e0c: ld   l,a]
	addx.b	d5,d0                           	| [$1e0d: adc  a,h]
	sub.b	#0xC7,d0                         	| [$1e0e: sub  $C7]
	move.b	d0,d5                           	| [$1e10: ld   h,a]
	move.b	d6,pseudo_random_seed_81D6(a6)		| [$1e11: ld   (pseudo_random_seed_81D6),hl]
    move.b	d5,pseudo_random_seed_81D6+1(a6)
	rts                                    	| [$1e14: ret]

* seems to be never called. Only called from 1E1D through random_1E2A

	movem.w	d5/d6,-(sp)                        	| [$1e15: push hl]
	jbsr	pseudo_random_1E06                	| [$1e16: call pseudo_random_1E06]
	move.b	#0xA0,d5                        	| [$1e19: ld   h,$A0] standard params for random
l_1e1b:
	move.b	#0x06,d6                        	| [$1e1b: ld   l,$06] not called/used
* now the code is used
some_arith_op_1E1D:
	cmp.b	d5,d0                            	| [$1e1d: cp   h]
	jcs	l_1e22                             	| [$1e1e: jp   c,$1E22] jumps if h > a
	sub.b	d5,d0                            	| [$1e21: sub  h] a = a - h
l_1e22:
	ror.b	#1,d5                            	| [$1e22: rrc  h] h = h / 2
	subq.b	#1,d6                           	| [$1e24: dec  l] do it l times
	jne	some_arith_op_1E1D                 	| [$1e25: jp   nz,some_arith_op_1E1D]
	movem.w	(sp)+,d5/d6                        	| [$1e28: pop  hl]
	rts                                    	| [$1e29: ret]

* random followed by some kind of division to get a small
* number in A
random_1E2A:

	movem.w	d5/d6,-(sp)                        	| [$1e2a: push hl]
	jbsr	pseudo_random_1E06                	| [$1e2b: call pseudo_random_1E06]
	move.b	#0xC0,d5                        	| [$1e2e: ld   h,$C0]
	move.b	#0x07,d6                        	| [$1e30: ld   l,$07]
	jra	some_arith_op_1E1D                 	| [$1e32: jp   some_arith_op_1E1D]

* random dollowed by some kind of division to get a small
* number in A
random_1E35:

	movem.w	d5/d6,-(sp)                        	| [$1e35: push hl]
	jbsr	pseudo_random_1E06                	| [$1e36: call pseudo_random_1E06]
	move.b	#0xE0,d5                        	| [$1e39: ld   h,$E0]
	jra	l_1e1b                             	| [$1e3b: jp   $1E1B]

* < D1: parameter to limit random value
* > D0: pseudo-random
get_random_value_1e3e:
	movem.w	d5/d6,-(sp)                        	| [$1e3e: push hl]
	jbsr	pseudo_random_1E06                	| [$1e3f: call pseudo_random_1E06]
	move.b	d1,d5                           	| [$1e42: ld   h,b]
	clr.b	d6                               	| [$1e43: ld   l,$00]
l_1e45:
	addq.b	#1,d6                           	| [$1e45: inc  l]
	rol.b	#1,d5                            	| [$1e46: rlc  h]
	jcc	l_1e45                             	| [$1e48: jp   nc,$1E45]
	ror.b	#1,d5                            	| [$1e4b: rrc  h]
l_1e4d:
	cmp.b	d5,d0                            	| [$1e4d: cp   h]
	jcs	l_1e52                             	| [$1e4e: jp   c,$1E52]
	sub.b	d5,d0                            	| [$1e51: sub  h]
l_1e52:
	ror.b	#1,d5                            	| [$1e52: rrc  h]
	subq.b	#1,d6                           	| [$1e54: dec  l]
	jne	l_1e4d                             	| [$1e55: jp   nz,$1E4D]
	movem.w	(sp)+,d5/d6                        	| [$1e58: pop  hl]
	rts                                    	| [$1e59: ret]

* > D5.W
* < D1/D2
l_1e5a:
	addq.b	#1,d1                           	| [$1e5a: inc  b]
	move.b	d1,d0                           	| [$1e5b: ld   a,b]
	add.b	d1,d0                            	| [$1e5c: add  a,b]
	add.b	d1,d0                            	| [$1e5d: add  a,b]
	add.b	d0,d0                            	| [$1e5e: add  a,a]
	add.b	d2,d0                            	| [$1e5f: add  a,c]
	addq.b	#1,d0                           	| [$1e60: inc  a]
	clr.w	d5                               	| [$1e61: ld   h,$00]
	move.b	d0,d5                           	| [$1e63: ld   l,a]
	lsl.w	#3,d5                            	| [$1e64: add  hl,hl]
                           	| [$1e65: add  hl,hl]
                           	| [$1e66: add  hl,hl]
	                           	| [$1e67: ld   e,d]
	and.w   #0xFF,d3                               	| [$1e68: ld   d,$00]
	add.w	d3,d5                            	| [$1e6a: add  hl,de]
 	rts                                    	| [$1e6b: ret]


* < D1/D2
* > D5/D6
* > D7: set if carry from sub (used in stabilize_view_handle_falls_01BA)
compute_delta_height_1e6c:
	jbsr	l_1e5a                            	| [$1e6c: call $1E5A]
	LOAD_WORD	absolute_height_802A(a6),d3     | [$1e6f: ld   de,($802A)]

	moveq	#0,d0                              	| [$1e73: xor  a] probably useless, clear carry
	sub.w	d3,d5                            	| [$1e74: sbc  hl,de]
	scs		d7
	LOAD_D5D6_FROM_D5_16
	rts                                    	| [$1e76: ret]



* depending on the context (title or game), set scroll values and 
* corresponding charset

init_hw_scroll_and_charset_260C:
	move.b	#0x06,d0                        	| [$260c: ld   a,$06]
	          	| [$260e: ld   (video_priority_D300),a]
	clr.b	d0                               	| [$2611: xor  a]
	move.b	d0,video_mode_d600              	| [$2612: ld   (video_mode_d600),a]
	move.b	d0,sync_flag_80AB(a6)                   	| [$2615: ld   ($80AB),a]
	jbsr	init_video_269E                   	| [$2618: call init_video_269E]
* write 0 in scroll registers
												| [$261b: ld   ($D501),a]
												| [$261e: ld   ($D503),a]
												| [$2621: ld   ($D505),a]
	moveq	#0,d0                        	| [$2624: ld   a,$10]
	jbsr	osd_set_color_bank               	| [$2626: ld   (colorbank_D506),a]
	              	| [$2629: ld   a,$32]
	              	| [$262b: ld   (colorbank_D507),a]
	move.b	flip_screen_81D8(a6),d0                   	| [$262e: ld   a,($81D8)]
	                             	| [$2631: or   a]
												| [$2632: jr   nz,$2644]
												| [$2634: ld   a,$0D]
												| [$2636: ld   (scroll_d500),a]
												| [$2639: ld   a,$16]
												| [$263b: ld   ($D502),a]
												| [$263e: ld   ($D504),a]
												| [$2641: jp   $2651]
								
												| [$2644: ld   a,$FD]
												| [$2646: ld   (scroll_d500),a]
												| [$2649: ld   a,$F5]
												| [$264b: ld   ($D502),a]
												| [$264e: ld   ($D504),a]
	move.b	menu_or_game_tiles_81D9(a6),d0  	| [$2651: ld   a,(menu_or_game_tiles_81D9)]
	                             	| [$2654: or   a]
	jeq	l_265c                             	| [$2655: jp   z,$265C]
	subq.b	#1,d0                           	| [$2658: dec  a]
	jeq	l_2676                             	| [$2659: jp   z,$2676]
* copy gfx rom contents into character data
l_265c:
	moveq	#1,D0
	jbsr	osd_set_gfx_bank
	
											| [$265c: ld   hl,$0000] game tiles 0
											| [$265f: ld   (gfx_pointer_d509),hl]
											| [$2662: ld   de,character_data_9000]
											| [$2665: ld   bc,$0030] 256*48 bytes 48
											| [$2665: ld   bc,$0030] 256*48 bytes 48
										
												| [$2668: ld   a,(gfx_rom_D404)]
												| [$266b: ld   (de),a]
												| [$266c: inc  de]
												| [...]
											| [$266d: djnz $2668]
												| [$266f: dec  c]
											| [$2670: jp   nz,$2668]
	jra	l_268d                             	| [$2673: jp   $268D]

l_2676:
	moveq	#0,D0
	jbsr	osd_set_gfx_bank				| [$2676: ld   hl,$3000] menu tiles
   	| [$2679: ld   (gfx_pointer_d509),hl]
 
 	| [$267c: ld   de,character_data_9000]
  	| [$267f: ld   bc,$0030] 256*48 bytes 48

  	| [$2682: ld   a,(gfx_rom_D404)]
  	| [$2685: ld   (de),a]
  	| [$2686: inc  de]
  	| [...]
 	| [$2687: djnz $2682]
  	| [$2689: dec  c]

 	| [$268a: jp   nz,$2682]
l_268d:
	move.b	#GS_NEXT_LIFE_07,d0             	| [$268d: ld   a,GS_NEXT_LIFE_07]
	move.b	d0,game_state_80AC(a6)          	| [$268f: ld   (game_state_80AC),a]
	move.b	#0x01,d0                        	| [$2692: ld   a,$01]
	move.b	d0,timer_8bit_reload_value_80A9(a6)	| [$2694: ld   (timer_8bit_reload_value_80A9),a]
	jbsr	reload_8bit_timer_26C2           	| [$2697: call reload_8bit_timer_26C2]
	jbsr	game_tick_73cf                            	| [$269a: call $73CF]
	rts                                    	| [$269d: ret]

init_video_269E:
	lea	videoram_layer_1_C400(a6),a0       	| [$269e: ld   hl,videoram_layer_1_C400]
	move.w	#0x00,d1                      	| [$26a1: ld   bc,$000C] 12
	move.w	#0x0C,d2                      	| [$26a1: ld   bc,$000C] 12
	moveq	#0,d0
l_26a4:
	jbsr	osd_w_videoram                      	| [$26a4: ld   (hl),$00]
	addq.w	#1,a0                           	| [$26a6: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_26a4                             	| [$26a7: djnz $26A4]
	subq.w	#1,d2                           	| [$26a9: dec  c]
 	jne	l_26a4                             	| [$26aa: jp   nz,$26A4]
	* clear sprites
	lea	sprite_ram_d100,a0                 	| [$26ad: ld   hl,sprite_ram_d100]
	move.b	#0x20,d1                        	| [$26b0: ld   b,$80]
l_26b2:
	clr.l	(a0)+                             	| [$26b2: ld   (hl),$00]
												| [$26b4: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_26b2                             	| [$26b5: djnz $26B2]
* reset all column scroll registers
												| [$26b7: ld   hl,$D000]
	* 8 letters 
	move.b	#0x7,d1                        	| [$26ba: ld   b,$60]
	moveq	#0,d0
l_26bc:
	jbsr	osd_set_column_scroll               	| [$26bc: ld   (hl),$00]
	addq.w	#1,a0                           	| [$26be: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_26bc                             	| [$26bf: djnz $26BC]
	rts                                    	| [$26c1: ret]

reload_8bit_timer_26C2:
	move.b	timer_8bit_reload_value_80A9(a6),d0	| [$26c2: ld   a,(timer_8bit_reload_value_80A9)]
	subq.b	#1,d0                           	| [$26c5: dec  a]
	move.b	d0,timer_8bit_80AA(a6)          	| [$26c6: ld   (timer_8bit_80AA),a]
	rts                                    	| [$26c9: ret]

set_level_palette_26ca:
	move.b	menu_or_game_tiles_81D9(a6),d0  	| [$26ca: ld   a,(menu_or_game_tiles_81D9)]
											| [$26cd: or   a]
	jeq	l_26d3                             	| [$26ce: jr   z,$26D3]
	subq.b	#1,d0                           	| [$26d0: dec  a]
	jeq	l_26fb                             	| [$26d1: jr   z,$26FB]
l_26d3:
	
	lea	palette_data_77E3,a0                          	| [$26d3: ld   hl,$77E3]
	move.b	game_in_play_flag_823B(a6),d0   	| [$26d6: ld   a,(game_in_play_flag_823B)]
	                             	| [$26d9: or   a]
	jne	l_26ee                             	| [$26da: jr   nz,$26EE]
	* game in play, adjust palette to level
	move.b	copy_of_dip_switches_3_8250(a6),d0	| [$26dc: ld   a,(copy_of_dip_switches_3_8250)]
	move.b	d0,d1                           	| [$26df: ld   b,a]
	move.b	skill_level_8237(a6),d0         	| [$26e0: ld   a,(skill_level_8237)]
	sub.b	d1,d0                            	| [$26e3: sub  b] minus start skill level
	and.b	#0x03,d0                         	| [$26e4: and  $03] get a 0-3 value for the 4 palettes

	jbsr	osd_set_level_palette
	
	ror.b	#2,d0                            	| [$26e6: rrca] multiply by 64
	* d5 is palette offset to apply to a0     	| [$26e8: ex   de,hl]
	moveq	#0,d5                               	| [$26e9: ld   h,$00]
	move.b	d0,d5                           	| [$26eb: ld   l,a]
	add.w	d5,d5                            	| [$26ec: add  hl,hl]
	add.w	d5,a0                            	| [$26ed: add  hl,de]
l_26ee:
	* TODO here set palette, there are 64 colors in theory
	* but in fact it looks like there are a lot less
	*lea	palette_D200,a1                    	| [$26ee: ld   de,palette_D200]
	*move.w	#0x0080,d1                      	| [$26f1: ld   bc,$0080] 128
	*jbsr	ldir                              	| [$26f4: ldir]
	clr.b	d0                               	| [$26f6: xor  a]
	move.b	d0,sync_flag_80AB(a6)                   	| [$26f7: ld   ($80AB),a]
	rts                                    	| [$26fa: ret]

l_26fb:
	lea	table_79E3,a0                          	| [$26fb: ld   hl,$79E3]
	jra	l_26ee                             	| [$26fe: jr   $26EE]

init_building_2700:
	jbsr	l_270a                            	| [$2700: call $270A]
	jbsr	l_273f                            	| [$2703: call $273F]
	jbsr	l_28b3                            	| [$2706: call $28B3]
	rts                                    	| [$2709: ret]

l_270a:
	lea	l_81DA(a6),a0                      	| [$270a: ld   hl,$81DA]
	move.b	#0x17,d1                        	| [$270d: ld   b,$17]
l_270f:
	move.b	#0x03,(a0)                      	| [$270f: ld   (hl),$03]
	addq.w	#1,a0                           	| [$2711: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_270f                             	| [$2712: djnz $270F]
	move.b	#0x02,d0                        	| [$2714: ld   a,$02]
	move.b	d0,l_81E6(a6)                   	| [$2716: ld   ($81E6),a]
	lea	l_81DD(a6),a0                      	| [$2719: ld   hl,$81DD]
	move.b	#0x05,d1                        	| [$271c: ld   b,$05]
l_271e:
	clr.b	(a0)+                             	| [$271e: ld   (hl),$00]
	                           	| [$2720: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_271e                             	| [$2721: djnz $271E]
	lea	l_81F1(a6),a1                      	| [$2723: ld   de,$81F1]
	lea	table_280E,a0                      	| [$2726: ld   hl,table_280E]
	move.w	#0x001F,d1                      	| [$2729: ld   bc,$001F] 31
	jbsr	ldir                              	| [$272c: ldir]
* reset all red doors
	lea	red_door_position_array_8210(a6),a0	| [$272e: ld   hl,red_door_position_array_8210]
	move.b	#0x1F,d1                        	| [$2731: ld   b,$1F]
l_2733:
	move.b	#0x08,(a0)+                      	| [$2733: ld   (hl),$08]
	                           	| [$2735: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_2733                             	| [$2736: djnz $2733]
	jbsr	position_red_doors_on_lower_floors_2753        	| [$2738: call $2753]
	jbsr	position_red_doors_on_higher_floors_278b        | [$273b: call $278B]
	rts                                    	| [$273e: ret]

l_273f:
	jbsr	pseudo_random_with_regsave_1DF5                	| [$273f: call pseudo_random_with_regsave_1DF5]
	move.b	#0xA0,d2                        	| [$2742: ld   c,$A0]
	move.b	#0x06,d1                        	| [$2744: ld   b,$06]
l_2746:
	cmp.b	d2,d0                            	| [$2746: cp   c]
	jcs	l_274b                             	| [$2747: jp   c,$274B]
	sub.b	d2,d0                            	| [$274a: sub  c]
l_274b:
	ror.b	#1,d2                            	| [$274b: rrc  c]
	subq.b	#1,d1                           	| [...]
	jne	l_2746                             	| [$274d: djnz $2746]
	move.b	d0,l_802D(a6)                   	| [$274f: ld   ($802D),a]
	rts                                    	| [$2752: ret]
position_red_doors_on_lower_floors_2753:
	lea	table_280E-0xE+0x2D,a0                          	| [$2753: ld   hl,$282D]
	move.b	#0x06,d1                        	| [$2756: ld   b,$06]
	move.b	#0x01,d2                        	| [$2758: ld   c,$01]
	jbsr	position_red_doors_27D2           	| [$275a: call position_red_doors_27D2]
	move.b	skill_level_8237(a6),d0         	| [$275d: ld   a,(skill_level_8237)]
	cmp.b	#0x02,d0                         	| [$2760: cp   $02]
	bcc.b	0f                               	| [...]
	rts                                    	| [$2762: ret  c] [...]
0:
	cmp.b	#0x04,d0                         	| [$2763: cp   $04]
	jcs	l_2777                             	| [$2765: jr   c,$2777]
	* highest level of difficulty at start: add even more red doors
	lea	red_door_position_array_8210(a6),a0	| [$2767: ld   hl,red_door_position_array_8210]
	jbsr	l_2784                            	| [$276a: call $2784]
	move.b	d0,d1                           	| [$276d: ld   b,a]
	jbsr	l_2784                            	| [$276e: call $2784]
												| [$2771: dec  hl]
	move.b	#0x07,d0                        	| [$2772: ld   a,$07]
	sub.b	d1,d0                            	| [$2774: sub  b]
	move.b	d0,-(a0)                         	| [$2775: ld   (hl),a]
	rts                                    	| [$2776: ret]
l_2777:
	* high level of difficulty at start: add more red doors
	lea	red_door_position_array_8210(a6),a0	| [$2777: ld   hl,red_door_position_array_8210]
	jbsr	l_2784                            	| [$277a: call $2784]
	move.b	d0,d1                           	| [$277d: ld   b,a]
	jbsr	l_2784                            	| [$277e: call $2784]
												| [$2781: dec  hl]
	move.b	d0,-(a0)                         	| [$2782: ld   (hl),a]
	rts                                    	| [$2783: ret]
l_2784:
	move.b	(a0)+,d0                         	| [$2784: ld   a,(hl)]
											| [$2785: inc  hl]
	cmp.b	#0x08,d0                         	| [$2786: cp   $08]
	jcc	l_2784                             	| [$2788: jr   nc,$2784]
	rts                                    	| [$278a: ret]
	
position_red_doors_on_higher_floors_278b:
	lea	table_280E-0xE+0x36,a0                  | [$278b: ld   hl,$2836]
	move.b	#0x08,d1                        	| [$278e: ld   b,$08]
	move.b	#0x08,d2                        	| [$2790: ld   c,$08]
	jbsr	position_red_doors_27D2           	| [$2792: call position_red_doors_27D2]
	lea	table_280E-0xE+0x3F,a0                  | [$2795: ld   hl,$283F]
	move.b	#0x0B,d1                        	| [$2798: ld   b,$0B]
	move.b	#0x09,d2                        	| [$279a: ld   c,$09]
	jbsr	position_red_doors_27D2           	| [$279c: call position_red_doors_27D2]
	lea	table_280E-0xE+0x48,a0                  | [$279f: ld   hl,$2848]
	move.b	#0x0E,d1                        	| [$27a2: ld   b,$0E]
	move.b	#0x0C,d2                        	| [$27a4: ld   c,$0C]
	jbsr	position_red_doors_27D2           	| [$27a6: call position_red_doors_27D2]
	lea	table_280E-0xE+0x51,a0                  | [$27a9: ld   hl,$2851]
	move.b	#0x11,d1                        	| [$27ac: ld   b,$11]
	move.b	#0x0F,d2                        	| [$27ae: ld   c,$0F]
	jbsr	position_red_doors_27D2           	| [$27b0: call position_red_doors_27D2]
	lea	table_280E-0xE+0x5A,a0                  | [$27b3: ld   hl,$285A]
	move.b	#0x14,d1                        	| [$27b6: ld   b,$14]
	move.b	#0x12,d2                        	| [$27b8: ld   c,$12]
	jbsr	position_red_doors_27D2           	| [$27ba: call position_red_doors_27D2]
	lea	table_280E-0xE+0x63,a0                  | [$27bd: ld   hl,$2863]
	move.b	#0x19,d1                        	| [$27c0: ld   b,$19]
	move.b	#0x15,d2                        	| [$27c2: ld   c,$15]
	jbsr	position_red_doors_27D2           	| [$27c4: call position_red_doors_27D2]
	lea	table_280E-0xE+0x6C,a0                  | [$27c7: ld   hl,$286C]
	move.b	#0x1E,d1                        	| [$27ca: ld   b,$1E]
	move.b	#0x1A,d2                        	| [$27cc: ld   c,$1A]
	jbsr	position_red_doors_27D2           	| [$27ce: call position_red_doors_27D2]
	rts                                    	    | [$27d1: ret]

* < A0: pointer on table
* < D1: max floor
* < D2: min floor

position_red_doors_27D2:
	move.b	skill_level_8237(a6),d0         	| [$27d2: ld   a,(skill_level_8237)]
	move.b	d0,d4                           	| [$27d5: ld   e,a]
	cmp.b	#0x09,d0                         	| [$27d6: cp   $09]
	jcs	l_27dc                             	| [$27d8: jr   c,$27DC]
	move.b	#0x08,d4                        	| [$27da: ld   e,$08] max skill level 8
l_27dc:
	moveq   #0,d3                               	| [$27dc: ld   d,$00]
	move.b	d4,d3
	add.w	d3,a0                            	| [$27de: add  hl,de]
	move.b	(a0),d3                         	| [$27df: ld   d,(hl)]
	move.b	d3,d0                           	| [$27e0: ld   a,d]
	                             	| [$27e1: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$27e2: ret  z] [...]
0:
	move.b	d1,d0                           	| [$27e3: ld   a,b]
	sub.b	d2,d0                            	| [$27e4: sub  c]
	move.b	d0,d1                           	| [$27e5: ld   b,a]
	addq.b	#1,d1                           	| [$27e6: inc  b]
* loop
l_27e7:
	movem.w	d3/d4,-(sp)                    	| [$27e7: push de]
l_27e8:
	jbsr	get_random_value_1e3e               | [$27e8: call $1E3E]
	add.b	d2,d0                            	| [$27eb: add  a,c]
	moveq   #0,d3                               | [$27ed: ld   d,$00]
	move.b	d0,d3                           	| [$27ec: ld   e,a]
	lea	red_door_position_array_8210(a6),a0	    | [$27ef: ld   hl,red_door_position_array_8210]
	add.w	d3,a0                            	| [$27f2: add  hl,de]
	move.b	(a0),d0                         	| [$27f3: ld   a,(hl)]
	cmp.b	#0x08,d0                         	| [$27f4: cp   $08]
	jcs	l_27e8                             	    | [$27f6: jr   c,$27E8] slot taken/unavail / re-cast

	move.l	a0,-(sp)                        	| [$27f8: push hl]
	lea	table_280E-0xE+0x75,a0                  | [$27f9: ld   hl,$2875]
	add.w	d3,a0                            	| [$27fc: add  hl,de]
	add.w	d3,a0                            	| [$27fd: add  hl,de]
	jbsr	pseudo_random_with_regsave_1DF5     | [$27fe: call pseudo_random_with_regsave_1DF5]
	and.b	#0x01,d0                         	| [$2801: and  $01]
	jne	l_2806                             	    | [$2803: jr   nz,$2806]
	addq.w	#1,a0                           	| [$2805: inc  hl]
l_2806:
	move.l	(sp)+,a1                        	| [$2806: pop  de]
	move.b	(a0),d0                         	| [$2807: ld   a,(hl)]
	move.b	d0,(a1)                         	| [$2808: ld   (de),a]
	movem.w	(sp)+,d3/d4                    	| [$2809: pop  de]
	subq.b	#1,d3                           	| [$280a: dec  d]
	jne	l_27e7                             	| [$280b: jr   nz,$27E7]
	rts                                    	| [$280d: ret]

table_280E:
	.byte	0x00
	.byte	0x81
	.byte	0x81
	.byte	0x81
	.byte	0x81
	.byte	0x81
	.byte	0x81
	.byte	0x00
	.byte	0x7E
	.byte	0x7E
	.byte	0x66
	.byte	0x66
	.byte	0xE6,0x7E
	.byte	0x7F
	.byte	0x67
	.byte	0xE6,0x66
	.byte	0x7E
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x00
	.byte	0x01,0x02,0x02
	.byte	0x02
	.byte	0x02
	.byte	0x03
	.byte	0x04
	.byte	0x05
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x01,0x01,0x01
	.byte	0x01,0x01,0x01
	.byte	0x02
	.byte	0x02
	.byte	0x02
	.byte	0x01,0x01,0x02
	.byte	0x01,0x01,0x01
	.byte	0x01,0x01,0x01
	.byte	0x01,0x01,0x01
	.byte	0x01,0x01,0x01
	.byte	0x01,0x01,0x01
	.byte	0x01,0x01,0x01
	.byte	0x01,0x01,0x01
	.byte	0x01,0x01,0x01
	.byte	0x01,0x01,0x01
	.byte	0x01,0x01,0x01
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x01,0x01,0x01
	.byte	0x01,0x01,0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x01,0x01,0x01
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x07
	.byte	0x00
	.byte	0x07
	.byte	0x00
	.byte	0x07
	.byte	0x00
	.byte	0x07
	.byte	0x00
	.byte	0x07
	.byte	0x00
	.byte	0x07
	.byte	0x00
	.byte	0x00
	.byte	0x02
	.byte	0x05
	.byte	0x03
	.byte	0x04
	.byte	0x02
	.byte	0x05
	.byte	0x01,0x06,0x00
	.byte	0x05
	.byte	0x02
	.byte	0x04
	.byte	0x01,0x05,0x02
	.byte	0x06,0x01
	.byte	0x05
	.byte	0x02
	.byte	0x05
	.byte	0x03
	.byte	0x04
	.byte	0x02
	.byte	0x05
	.byte	0x01,0x06,0x01
	.byte	0x05
	.byte	0x02
	.byte	0x06,0x01
	.byte	0x05
	.byte	0x02
	.byte	0x06,0x01
	.byte	0x05
	.byte	0x02
	.byte	0x06,0x01
	.byte	0x05
	.byte	0x02
	.byte	0x06,0x01
	.byte	0x05
	.byte	0x02
	.byte	0x06
	.align	2
l_28b3:
	jbsr	update_scroll_value_from_viewed_floor_28c0                            	| [$28b3: call $28C0]
	jbsr	l_28de                            	| [$28b6: call $28DE]
	jbsr	l_2921                            	| [$28b9: call $2921]
	jbsr	l_16bd                            	| [$28bc: call $16BD]
	rts                                    	| [$28bf: ret]

update_scroll_value_from_viewed_floor_28c0:
	lea	l_8001(a6),a0                      	| [$28c0: ld   hl,$8001]
	clr.b	(a0)+                           | [$28c3: ld   (hl),$00] clear $8002
	                           	| [$28c5: inc  hl]
	clr.b	(a0)+                           | [$28c6: ld   (hl),$00] clear $8003
	                           	| [$28c8: inc  hl]
	move.b	viewed_floor_802C(a6),d0                   	| [$28c9: ld   a,($802C)]
	move.b	d0,d1                           	| [$28cc: ld   b,a]
	subq.b	#2,d0                           	| [$28cd: dec  a] * 2
	move.b	d0,(a0)                         	| [$28cf: ld   (hl),a] update $8003: floor-2
	addq.w	#2,a0                           	| [$28d0: inc  hl] * 2
	* compute floor => scroll value
	move.b	#0x1F,d0                        	| [$28d2: ld   a,$1F]
	sub.b	d1,d0                            	| [$28d4: sub  b]
	move.b	d0,d1                           	| [$28d5: ld   b,a]
	add.b	d1,d0                            	| [$28d6: add  a,b]
	add.b	d1,d0                            	| [$28d7: add  a,b]
	lsl.b	#4,d0                            	| [$28d8: add  a,a]
												| [$28d9: add  a,a]
												| [$28da: add  a,a]
												| [$28db: add  a,a]
	move.b	d0,(a0)                         	| [$28dc: ld   (hl),a] set scroll value
	rts                                    	| [$28dd: ret]

l_28de:
	LOAD_WORD	bottom_floor_fine_horizon_8002(a6),d5             	| [$28de: ld   hl,($8002)]

	st.b	d0                                	| [$28e1: ld   a,$FF]
	move.b	d0,scroll_speed_8004(a6)        	| [$28e3: ld   (scroll_speed_8004),a]

	move.w	d5,-(sp)                        	| [$28e6: push hl]
	move.b	#0x1F,d1                        	| [$28e7: ld   b,$1F]
l_28e9:
	move.w	d1,-(sp)                    	| [$28e9: push bc]
	LOAD_WORD	bottom_floor_fine_horizon_8002(a6),d5             	| [$28ea: ld   hl,($8002)]

	move.w	d5,d1                           	| [$28ed: ld   b,h]
	LOAD_D1D2_FROM_D1_16                           	| [$28ee: ld   c,l]
	jbsr	l_0247                            	| [$28ef: call $0247]
	LOAD_WORD	scroll_tile_pointer_8006(a6),d5	| [$28f2: ld   hl,(scroll_tile_pointer_8006)]
	sub.w	#0x8000,d5
	add.l	a6,d5								| add ram base

	exg	a1,d5                              	| [$28f5: ex   de,hl]
	lea	scroll_row_8008(a6),a0             	| [$28f6: ld   hl,scroll_row_8008]
	move.w	#0x0020,d1                      	| [$28f9: ld   bc,$0020] 32
	jbsr	ldir_video                          	| [$28fc: ldir]
	move.w	(sp)+,d1                    	| [$28fe: pop  bc]
	LOAD_WORD	bottom_floor_fine_horizon_8002(a6),d5             	| [$28ff: ld   hl,($8002)]
	addq.b	#0x1,d5                           	| [$2902: inc  l]
	move.b	d5,d0                           	| [$2903: ld   a,l]
	subq.b	#0x06,d0                        	| [$2904: sub  $06]
	jne	l_290b                             	| [$2906: jp   nz,$290B]
	move.b	d0,d5                           	| [$2909: ld   l,a]
	add.w	#0x100,d5                           	| [$290a: inc  h]
l_290b:
	STORE_WORD	d5,bottom_floor_fine_horizon_8002(a6)            	| [$290b: ld   ($8002),hl]
	subq.b	#1,d1                           	| [...]
	jne	l_28e9                             	| [$290e: djnz $28E9]
	move.w	(sp)+,d5                        	| [$2910: pop  hl]
	STORE_WORD	d5,bottom_floor_fine_horizon_8002(a6)     | [$2911: ld   ($8002),hl]
	        	| [$2914: ld   hl,main_scroll_columns_D020]
	                       	| [$2917: ld   b,$20]
	move.b	main_scroll_value_8005(a6),d0   	| [$2919: ld   a,(main_scroll_value_8005)]
l_291c:
	jbsr	osd_set_main_scroll                      	| [$291c: ld   (hl),a]
	        	| [$291d: inc  hl]
	                     	| [...]
	                    	| [$291e: djnz $291C]
	rts                                    	| [$2920: ret]
l_2921:
	lea	bottom_floor_horizon_8003(a6),a4                      	    | [$2921: ld   bc,$8003]
	clr.w	d5                               	| [$2924: ld   h,$00]
	move.b	(a4),d0                         	| [$2926: ld   a,(bc)]
	move.b	d0,d5                           	| [$2927: ld   l,a]
	addq.b	#1,d5                           	| [$2928: inc  l]
	move.w	d5,d3                           	| [$2929: ld   d,h]
	                           	                | [$292a: ld   e,l]
	add.w	d3,d5                            	| [$292b: add  hl,de]
	add.w	d3,d5                            	| [$292c: add  hl,de]
	add.w	d5,d5                            	| [$292d: add  hl,hl]
												| [$292e: dec  bc]
	move.b	-(a4),d0                         	| [$292f: ld   a,(bc)] bottom_floor_fine_horizon_8002 
	move.b	d0,d3                           	| [$2930: ld   e,a]
	add.w	d3,d5                            	| [$2931: add  hl,de]
	lsl.w	#3,d5                            	| [$2932: add  hl,hl]
	                            	| [$2933: add  hl,hl]
	                           	| [$2934: add  hl,hl]
	STORE_WORD	d5,absolute_height_802A(a6)            	| [$2935: ld   ($802A),hl]
	move.w	#0x00DF,d3                          	| [$2938: ld   de,$00DF]
	add.w	d3,d5                            	| [$293b: add  hl,de]
 	STORE_WORD	d5,l_8028(a6)            	| [$293c: ld   ($8028),hl]
	rts                                    	| [$293f: ret]
	
goto_next_screen_2940:
	jbsr	display_insert_coin_screen_295f      	| [$2940: call $295F]
l_2943:
	jbsr	game_tick_73cf                            	| [$2943: call $73CF]
	move.b	nb_credits_80A2(a6),d0          	| [$2946: ld   a,(nb_credits_80A2)]
	                             	| [$2949: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$294a: ret  nz] [...]
0:
	lea	coin_slot_1_activated_80A3(a6),a0                      	| [$294b: ld   hl,$80A3]
	move.b	(a0)+,d0                         	| [$294e: ld   a,(hl)]
	                           	| [$294f: inc  hl]
	or.b	(a0),d0                           	| [$2950: or   (hl)]
	jne	l_2943                             	| [$2951: jr   nz,$2943]
	LOAD_WORD	a_16bit_timer_822F(a6),d5             	| [$2953: ld   hl,($822F)]
	subq.w	#1,d5                           	| [$2956: dec  hl]
	STORE_WORD	d5,a_16bit_timer_822F(a6)            	| [$2957: ld   ($822F),hl]
	                           	| [$295a: ld   a,h]
	tst.w	d5                             	| [$295b: or   l]
	jne	l_2943                             	| [$295c: jr   nz,$2943]
	rts                                    	| [$295e: ret]
	
	
display_insert_coin_screen_295f:
	clr.b	d0                               	| [$295f: xor  a]
	move.b	d0,sync_flag_80AB(a6)                   	| [$2960: ld   ($80AB),a]
	move.b	d0,video_mode_d600              	| [$2963: ld   (video_mode_d600),a]
	* clear all video memory of all layers
	lea	videoram_layer_1_C400(a6),a0       	| [$2966: ld   hl,videoram_layer_1_C400]
	move.b	#0x0C,d2                        	| [$2969: ld   c,$0C]
	move.b	#0x00,d1                        	| [$2969: ld   c,$0C]
l_296b:
	move.b	d0,d1                           	| [$296b: ld   b,a]
l_296c:
	jbsr	osd_w_videoram                     	| [$296c: ld   (hl),a]
	addq.w	#1,a0                           	| [$296d: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_296c                             	| [$296e: djnz $296C]
	subq.w	#1,d2                           	| [$2970: dec  c]
	jne	l_296b                             	| [$2971: jr   nz,$296B]
	jbsr	display_status_bars_5839                            	| [$2973: call $5839]
	jbsr	update_upper_status_bar_57C6      	| [$2976: call update_upper_status_bar_57C6]
	jbsr	display_credit_info_10b0                            	| [$2979: call $10B0]
	jbsr	display_insert_coin_298e                            	| [$297c: call $298E]
	move.w	#0x012C,d5                          	| [$297f: ld   hl,$012C]
	STORE_WORD	d5,a_16bit_timer_822F(a6)            	| [$2982: ld   ($822F),hl]
	move.b	#GS_INSERT_COIN_09,d0           	| [$2985: ld   a,GS_INSERT_COIN_09]
	move.b	d0,game_state_80AC(a6)          	| [$2987: ld   (game_state_80AC),a]
	jbsr	reload_8bit_timer_26C2           	| [$298a: call reload_8bit_timer_26C2]
	rts                                    	| [$298d: ret]

display_insert_coin_298e:
	lea	insert_coin_string_2A02,a0         	| [$298e: ld   hl,insert_coin_string_2A02]
	lea	l_C589(a6),a1                      	| [$2991: ld   de,$C589]
	jbsr	copy_string_to_screen_29F9        	| [$2994: call copy_string_to_screen_29F9]
	move.b	copy_of_dip_switches_3_8250(a6),d0	| [$2997: ld   a,(copy_of_dip_switches_3_8250)]
	btst.b	#4,d0                           	| [$299a: bit  4,a]
	beq.b	0f                               	| [...]
	rts                                    	| [$299c: ret  nz] [...]
0:
	btst.b	#7,d0                           	| [$299d: bit  7,a]
	jne	l_29c6                             	| [$299f: jr   nz,$29C6]
	lea	left_coin_slot_string_2A13,a0      	| [$29a1: ld   hl,left_coin_slot_string_2A13]
	lea	l_C5EA(a6),a1                      	| [$29a4: ld   de,$C5EA]
	jbsr	copy_string_to_screen_29F9        	| [$29a7: call copy_string_to_screen_29F9]
	move.b	coin_dsw_copy_80A5(a6),d6               	| [$29aa: ld   hl,(coin_dsw_copy_80A5)]
    move.b	coin_dsw_copy_80A5+1(a6),d5
	lea	l_C628(a6),a1                      	| [$29ad: ld   de,$C628]
	jbsr	display_coin_credit_text_29d0                            	| [$29b0: call $29D0]
	lea	right_coin_slot_string_2A22,a0     	| [$29b3: ld   hl,right_coin_slot_string_2A22]
	lea	l_C689(a6),a1                      	| [$29b6: ld   de,$C689]
	jbsr	copy_string_to_screen_29F9        	| [$29b9: call copy_string_to_screen_29F9]
	move.b	coin_slot_2_dsw_copy_80A7(a6),d6             	| [$29bc: ld   hl,($80A7)]
    move.b	coin_slot_2_dsw_copy_80A7+1(a6),d5
	lea	l_C6C8(a6),a1                      	| [$29bf: ld   de,$C6C8]
	jbsr	display_coin_credit_text_29d0                            	| [$29c2: call $29D0]
	rts                                    	| [$29c5: ret]
l_29c6:
	move.b	coin_dsw_copy_80A5(a6),d6             	| [$29c6: ld   hl,(coin_dsw_copy_80A5)]
	move.b	coin_dsw_copy_80A5+1(a6),d5             	| [$29c6: ld   hl,(coin_dsw_copy_80A5)]
	lea	l_C628(a6),a1                      	| [$29c9: ld   de,$C628]
	jbsr	display_coin_credit_text_29d0                            	| [$29cc: call $29D0]
	rts                                    	| [$29cf: ret]

display_coin_credit_text_29d0:
	move.b	d5,d1                           	| [$29d0: ld   b,h]
	move.b	d6,d2                           	| [$29d1: ld   c,l]
	move.b	d2,d0                           	| [$29d2: ld   a,c]
	or.b	#0x10,d0                          	| [$29d3: or   $10]
	exg 	a0,a1                         	| [$29d5: ld   (de),a]
	jbsr	osd_w_videoram
	exg		a0,a1
	addq.w	#2,a1                           	| [$29d6: inc  de] * 2
	lea	coin_string_2A32,a0                	| [$29d8: ld   hl,coin_string_2A32]
	jbsr	copy_string_to_screen_29F9        	| [$29db: call copy_string_to_screen_29F9]
	subq.w	#1,d2                           	| [$29de: dec  c]
 	jeq	l_29e4                             	| [$29df: jr   z,$29E4]
	move.b	#0x2D,d0                        	| [$29e1: ld   a,$2D]
	exg 	a0,a1                         	
	jbsr	osd_w_videoram                      | [$29e3: ld   (de),a]
	exg		a0,a1
l_29e4:
	addq.w	#1,a1                           	| [$29e4: inc  de]
	addq.w	#2,a1                           	| [$29e5: inc  de] * 2
	move.b	d1,d0                           	| [$29e7: ld   a,b]
	or.b	#0x10,d0                          	| [$29e8: or   $10]
	exg 	a0,a1                         	
	jbsr	osd_w_videoram                      | [$29ea: ld   (de),a]
	exg		a0,a1
	addq.w	#2,a1                           	| [$29eb: inc  de] * 2
	lea	credit_string_2A37,a0              	| [$29ed: ld   hl,credit_string_2A37]
	jbsr	copy_string_to_screen_29F9        	| [$29f0: call copy_string_to_screen_29F9]
	subq.b	#1,d1                           	| [$29f3: dec  b]
	bne.b	0f                               	| [...]
	rts                                    	| [$29f4: ret  z] [...]
0:
	move.b	#0x2D,d0                        	| [$29f5: ld   a,$2D]
	exg 	a0,a1                         	
	jbsr	osd_w_videoram					| [$29f7: ld   (de),a]
	exg		a0,a1
	rts                                    	| [$29f8: ret]

copy_string_to_screen_29F9:
	exg	a0,a1
0:
	move.b	(a1),d0                         	| [$29f9: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$29fa: cp   $FF]
	bne.b	1f                               	| [...]
	exg	a0,a1
	rts                                    	| [$29fc: ret  z] [...]
1:
	jbsr	osd_w_videoram                         	| [$29fd: ld   (de),a]
	addq.w	#1,a0                           	| [$29fe: inc  hl]
	addq.w	#1,a1                           	| [$29ff: inc  de]
	jra	0b         	| [$2a00: jr   copy_string_to_screen_29F9]

* "INSERT COIN (S)"
insert_coin_string_2A02:
	.byte	0x2C
	.byte	0x25
	.byte	0x2D
	.byte	0x1E,0x1F
	.byte	0x31,0x00,0x00
	.byte	0x00
	.byte	0x2E,0x2F
	.byte	0x2C
	.byte	0x25
	.byte	0x07
	.byte	0x2D
	.byte	0x08
	.byte	0xFF

* "LEFT COIN SLOT"
left_coin_slot_string_2A13:
	.byte	0x1B
	.byte	0x1E,0x27
	.byte	0x31,0x00,0x2E
	.byte	0x2F
	.byte	0x2C
	.byte	0x25
	.byte	0x00
	.byte	0x2D
	.byte	0x1B
	.byte	0x2F
	.byte	0x31,0xFF

* "RIGHT COIN SLOT"
right_coin_slot_string_2A22:
	.byte	0x1F
	.byte	0x2C
	.byte	0x28,0x2B
	.byte	0x31,0x00,0x2E
	.byte	0x2F
	.byte	0x2C
	.byte	0x25
	.byte	0x00
	.byte	0x2D
	.byte	0x1B
	.byte	0x2F
	.byte	0x31,0xFF

* "COIN"
coin_string_2A32:
	.byte	0x2E
	.byte	0x2F
	.byte	0x2C
	.byte	0x25
	.byte	0xFF

* "CREDIT"
credit_string_2A37:
	.byte	0x2E,0x1F
	.byte	0x1E,0x30
	.byte	0x2C
	.byte	0x31,0xFF
	.align	2

init_level_skill_params_2A2E:
	moveq	#0,d5                      	| [$2a3e: ld   hl,$0000] 0
	STORE_WORD	d5,level_timer_16bit_8231(a6)	| [$2a41: ld   (level_timer_16bit_8231),hl] reset timer
 	move.b	#0x04,d0                        	| [$2a44: ld   a,$04]
	move.b	d0,l_8233(a6)                   	| [$2a46: ld   ($8233),a]
	move.b	skill_level_8237(a6),d0         	| [$2a49: ld   a,(skill_level_8237)]
	lsr.b	#2,d0                            	| [$2a4c: srl  a] * 2
	addq.b	#0x06,d0                        	| [$2a50: add  a,$06]
	cmp.b	#0x08,d0                         	| [$2a52: cp   $08]
	jcs	l_2a58                             	| [$2a54: jr   c,$2A58]
	move.b	#0x08,d0                        	| [$2a56: ld   a,$08] maxed out
l_2a58:
	move.b	d0,l_834C(a6)                   	| [$2a58: ld   ($834C),a]
	move.b	#0x46,d0                        	| [$2a5b: ld   a,$46]
	move.b	d0,l_82ED(a6)                   	| [$2a5d: ld   ($82ED),a]
	clr.b	d0                               	| [$2a60: xor  a]
	move.b	d0,l_8376(a6)                   	| [$2a61: ld   ($8376),a]
	rts                                    	| [$2a64: ret]

init_elevators_2a65:
	jbsr	l_2a75                            	| [$2a65: call $2A75]
l_2a68:
	jbsr	l_2a9a                            	| [$2a68: call $2A9A]
	jbsr	l_2c20                            	| [$2a6b: call $2C20]
	jbsr	l_2d52                            	| [$2a6e: call $2D52]
	jbsr	initialize_elevator_screen_2dac                            	| [$2a71: call $2DAC]
	rts                                    	| [$2a74: ret]

l_2a75:
	move.b	#0x0B,d1                        	| [$2a75: ld   b,$0B]
	lea	l_8383(a6),a0                      	| [$2a77: ld   hl,$8383]
	move.w	#0x0008,d3                      	| [$2a7a: ld   de,$0008] 8
l_2a7d:
	clr.b	(a0)                             	| [$2a7d: ld   (hl),$00]
	add.w	d3,a0                            	| [$2a7f: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2a7d                             	| [$2a80: djnz $2A7D]
	move.b	#0x02,d1                        	| [$2a82: ld   b,$02]
l_2a84:
	jbsr	random_1E35                       	| [$2a84: call random_1E35]
	move.b	d0,d5                           	| [$2a89: ld   l,a]
	clr.w	d5                               	| [$2a87: ld   h,$00]
	add.w	d5,a0                            	| [$2a8a: add  hl,hl]
	add.w	d5,a0                            	| [$2a8b: add  hl,hl]
	add.w	d5,a0                            	| [$2a8c: add  hl,hl]
	lea	l_8383(a6),a1                      	| [$2a8d: ld   de,$8383]
	add.w	d3,a0                            	| [$2a90: add  hl,de]
	move.b	(a0),d0                         	| [$2a91: ld   a,(hl)]
	                             	| [$2a92: or   a]
	jne	l_2a84                             	| [$2a93: jp   nz,$2A84]
	addq.b	#1,(a0)                         	| [$2a96: inc  (hl)]
	subq.b	#1,d1                           	| [...]
	jne	l_2a84                             	| [$2a97: djnz $2A84]
	rts                                    	| [$2a99: ret]

l_2a9a:
	jbsr	init_elevator_params_2aaa                            	| [$2a9a: call $2AAA]
	jbsr	l_2aed                            	| [$2a9d: call $2AED]
	jbsr	l_2b10                            	| [$2aa0: call $2B10]
	jbsr	set_elevators_neutral_controls_0F99	| [$2aa3: call set_elevators_neutral_controls_0F99]
	jbsr	l_2c08                            	| [$2aa6: call $2C08]
	rts                                    	| [$2aa9: ret]

init_elevator_params_2aaa:
	lea	elevator_array_837D(a6),a2         	| [$2aaa: ld   ix,elevator_array_837D]
	lea	table_2AD7,a1                          	| [$2aae: ld   de,$2AD7]
	moveq	#0,d1                               	| [$2ab1: ld   b,$00]
l_2ab3:
	move.b	(a1)+,d0                         	| [$2ab3: ld   a,(de)]
	move.b	d0,(min_floor_03,a2)            	| [$2ab4: ld   (ix+min_floor_03),a]
	                           	| [$2ab7: inc  de]
	move.b	(a1)+,d0                         	| [$2ab8: ld   a,(de)]
	move.b	d0,(0x02,a2)                    	| [$2ab9: ld   (ix+$02),a]
	                           	| [$2abc: inc  de]
	move.b	l_802D(a6),d0                   	| [$2abd: ld   a,($802D)]
	addq.b	#1,d0                           	| [$2ac0: inc  a]
	cmp.b	d1,d0                            	| [$2ac1: cp   b]
	jne	l_2ac8                             	| [$2ac2: jp   nz,$2AC8]
	subq.b	#1,(min_floor_03,a2)            	| [$2ac5: dec  (ix+min_floor_03)]
l_2ac8:
	                    	| [$2ac8: push bc]
	                      	| [$2ac9: ld   bc,$0008] elevator struct size 8
	addq.w	#8,a2                            	| [$2acc: add  ix,bc]
	                    	| [$2ace: pop  bc]
	addq.b	#1,d1                           	| [$2acf: inc  b]
	move.b	d1,d0                           	| [$2ad0: ld   a,b]
	cmp.b	#0x0B,d0                         	| [$2ad1: cp   $0B]
	jne	l_2ab3                             	| [$2ad3: jp   nz,$2AB3]
	rts                                    	| [$2ad6: ret]
table_2AD7:
	.byte	0x07
	.byte	0x0B
	.byte	0x01,0x06,0x01
	.byte	0x07
	.byte	0x01,0x05,0x01
	.byte	0x07
	.byte	0x01,0x07,0x07
	.byte	0x0D
	.byte	0x0D
	.byte	0x0F
	.byte	0x0A
	.byte	0x0C
	.byte	0x0F
	.byte	0x11,0x13,0x1F
	.align	2
l_2aed:
	lea	l_8381(a6),a0                      	| [$2aed: ld   hl,$8381]
	lea	table_2B05,a1                          	| [$2af0: ld   de,table_2B05]
	move.b	#0x0B,d1                        	| [$2af3: ld   b,$0B]
l_2af5:
                    	| [$2af5: push bc]
	move.b	(a1)+,d0                         	| [$2af6: ld   a,(de)]
	move.b	d0,(a0)+                         	| [$2af7: ld   (hl),a]
												| [$2af8: inc  de]
												| [$2af9: inc  hl]
	add.b	#0x15,d0                         	| [$2afa: add  a,$15]
	move.b	d0,(a0)                         	| [$2afc: ld   (hl),a]
												| [$2afd: ld   bc,$0007] 7
	add.w	#7,a0                            	| [$2b00: add  hl,bc]
									| [$2b01: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_2af5                             	| [$2b02: djnz $2AF5]
	rts                                    	| [$2b04: ret]
	
table_2B05:
	.byte	0x11,0x31,0x51
	.byte	0x71
	.byte	0x91
	.byte	0xB1
	.byte	0xD1
	.byte	0x11,0x71,0x71
	.byte	0x71
	.align	2
l_2b10:
	lea	elevator_array_837D(a6),a0         	| [$2b10: ld   hl,elevator_array_837D]
	move.b	#0x0B,d1                        	| [$2b13: ld   b,$0B]
	move.w	#0x0008,d3                      	| [$2b15: ld   de,$0008] 8
l_2b18:
	clr.b	(a0)                             	| [$2b18: ld   (hl),$00]
	add.w	d3,a0                            	| [$2b1a: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2b18                             	| [$2b1b: djnz $2B18]
	lea	l_83AD(a6),a2                      	| [$2b1d: ld   ix,$83AD] end of array?
	move.b	#0x07,d2                        	| [$2b21: ld   c,$07]
	
l_2b23:
	jbsr	l_2b7f                            	| [$2b23: call $2B7F] computes d3 & d4
	move.b	d4,d0                           	| [$2b26: ld   a,e]
	sub.b	d3,d0                            	| [$2b27: sub  d]
	addq.b	#1,d0                           	| [$2b28: inc  a]
	move.b	d0,d1                           	| [$2b29: ld   b,a]
	jbsr	get_random_value_1e3e                            	| [$2b2a: call $1E3E]
	add.b	d3,d0                            	| [$2b2d: add  a,d]
	move.b	d0,(0x1,a2)    	| [$2b2e: ld   (ix+0x1),a]
											| [$2b31: ld   de,$FFF8]
	subq.w	#8,a2                            	| [$2b34: add  ix,de]
	subq.w	#1,d2                           	| [$2b36: dec  c]
 	jne	l_2b23                             	    | [$2b37: jr   nz,$2B23]
	
	move.b	l_837E(a6),d0                   	| [$2b39: ld   a,($837E)]
	addq.b	#0x04,d0                        	| [$2b3c: add  a,$04]
	move.b	d0,l_83B6(a6)                   	| [$2b3e: ld   ($83B6),a]
	jbsr	l_2b57                            	| [$2b41: call $2B57]
	move.b	l_8396(a6),d0                   	| [$2b44: ld   a,($8396)]
	addq.b	#0x07,d0                        	| [$2b47: add  a,$07]
	move.b	d0,l_83BE(a6)                   	| [$2b49: ld   ($83BE),a]
	addq.b	#0x05,d0                        	| [$2b4c: add  a,$05]
	move.b	d0,l_83C6(a6)                   	| [$2b4e: ld   ($83C6),a]
	addq.b	#0x04,d0                        	| [$2b51: add  a,$04]
	move.b	d0,l_83CE(a6)                   	| [$2b53: ld   ($83CE),a]
	rts                                    	| [$2b56: ret]
l_2b57:
	move.b	viewed_floor_802C(a6),d0                   	| [$2b57: ld   a,($802C)]
	cmp.b	#0x13,d0                         	| [$2b5a: cp   $13]
	jcc	l_2b71                             	| [$2b5c: jr   nc,$2B71]
	cmp.b	#0x12,d0                         	| [$2b5e: cp   $12]
	bcs.b	0f                               	| [...]
	rts                                    	| [$2b60: ret  nc] [...]
0:
	cmp.b	#0x0F,d0                         	| [$2b61: cp   $0F]
	jcc	l_2b75                             	| [$2b63: jr   nc,$2B75]
	cmp.b	#0x0D,d0                         	| [$2b65: cp   $0D]
	bcs.b	0f                               	| [...]
	rts                                    	| [$2b67: ret  nc] [...]
0:
	cmp.b	#0x0A,d0                         	| [$2b68: cp   $0A]
	jcc	l_2b79                             	| [$2b6a: jr   nc,$2B79]
	cmp.b	#0x05,d0                         	| [$2b6c: cp   $05]
	jeq	l_2b7b                             	| [$2b6e: jr   z,$2B7B]
	rts                                    	| [$2b70: ret]
l_2b71:
	sub.b	#0x10,d0                         	| [$2b71: sub  $10]
	jra	l_2b7b                             	| [$2b73: jr   $2B7B]
l_2b75:
	sub.b	#0x0C,d0                         	| [$2b75: sub  $0C]
	jra	l_2b7b                             	| [$2b77: jr   $2B7B]
l_2b79:
	subq.b	#0x07,d0                        	| [$2b79: sub  $07]
l_2b7b:
	move.b	d0,l_8396(a6)                   	| [$2b7b: ld   ($8396),a]
	rts                                    	| [$2b7e: ret]
	
* > D3/D4
l_2b7f:
	move.b	bottom_floor_horizon_8003(a6),d0                   	| [$2b7f: ld   a,($8003)]
	move.b	d0,d1                           	| [$2b82: ld   b,a]
	move.b	d2,d0                           	| [$2b83: ld   a,c]
	subq.b	#1,d0                           	| [$2b84: dec  a]
	jeq	l_2bdd                             	| [$2b85: jp   z,$2BDD]
	cmp.b	#0x03,d0                         	| [$2b88: cp   $03]
	jeq	l_2bbe                             	| [$2b8a: jp   z,$2BBE]
l_2b8d:
	move.b	(0x06,a2),d0                    	| [$2b8d: ld   a,(ix+$06)]
	add.b	d0,d0                            	| [$2b90: add  a,a]
	add.b	(0x3,a2),d0    	| [$2b91: add  a,(ix+character_y_offset_03)]
	addq.b	#0x02,d0                        	| [$2b94: add  a,$02]
	move.b	d0,d6                           	| [$2b96: ld   l,a]
	move.b	d1,d5                           	| [$2b97: ld   h,b]
	move.b	d5,d0                           	| [$2b98: ld   a,h]
	cmp.b	d6,d0                            	| [$2b99: cp   l]
	jcc	l_2b9e                             	| [$2b9a: jr   nc,$2B9E]
	move.b	d6,d5                           	| [$2b9c: ld   h,l]
	move.b	d0,d6                           	| [$2b9d: ld   l,a]
l_2b9e:
	move.b	(0x02,a2),d6                    	| [$2b9e: ld   l,(ix+$02)]
	move.b	d5,d0                           	| [$2ba1: ld   a,h]
	cmp.b	d6,d0                            	| [$2ba2: cp   l]
	jcc	l_2ba7                             	| [$2ba3: jr   nc,$2BA7]
	move.b	d6,d5                           	| [$2ba5: ld   h,l]
	move.b	d0,d6                           	| [$2ba6: ld   l,a]
l_2ba7:
	move.b	d6,d0                           	| [$2ba7: ld   a,l]
	subq.b	#0x02,d0                        	| [$2ba8: sub  $02]
	move.b	d0,d3                           	| [$2baa: ld   d,a]
	move.b	(0x06,a2),d0                    	| [$2bab: ld   a,(ix+$06)]
	add.b	d0,d0                            	| [$2bae: add  a,a]
	add.b	d1,d0                            	| [$2baf: add  a,b]
	addq.b	#0x04,d0                        	| [$2bb0: add  a,$04]
	move.b	d0,d6                           	| [$2bb2: ld   l,a]
	move.b	(0x02,a2),d5                    	| [$2bb3: ld   h,(ix+$02)]
	move.b	d5,d0                           	| [$2bb6: ld   a,h]
	cmp.b	d6,d0                            	| [$2bb7: cp   l]
	jcc	l_2bbc                             	| [$2bb8: jr   nc,$2BBC]
	move.b	d6,d5                           	| [$2bba: ld   h,l]
	move.b	d0,d6                           	| [$2bbb: ld   l,a]
l_2bbc:
	move.b	d6,d4                           	| [$2bbc: ld   e,l]
	rts                                    	| [$2bbd: ret]
l_2bbe:
	move.b	d1,d0                           	| [$2bbe: ld   a,b]
	sub.b	#0x12,d0                         	| [$2bbf: sub  $12]
	jcs	l_2b8d                             	| [$2bc1: jp   c,$2B8D]
	move.b	d0,d1                           	| [$2bc4: ld   b,a]
	move.b	d0,d6                           	| [$2bc5: ld   l,a]
	move.b	#0x03,d5                        	| [$2bc6: ld   h,$03]
	move.b	d5,d0                           	| [$2bc8: ld   a,h]
	cmp.b	d6,d0                            	| [$2bc9: cp   l]
	jcc	l_2bce                             	| [$2bca: jr   nc,$2BCE]
	move.b	d6,d5                           	| [$2bcc: ld   h,l]
	move.b	d0,d6                           	| [$2bcd: ld   l,a]
l_2bce:
	move.b	d5,d3                           	| [$2bce: ld   d,h]
	move.b	d1,d6                           	| [$2bcf: ld   l,b]
	move.b	#0x0A,d5                        	| [$2bd0: ld   h,$0A]
	move.b	d5,d0                           	| [$2bd2: ld   a,h]
	cmp.b	d6,d0                            	| [$2bd3: cp   l]
	jcc	l_2bd8                             	| [$2bd4: jr   nc,$2BD8]
	move.b	d6,d5                           	| [$2bd6: ld   h,l]
	move.b	d0,d6                           	| [$2bd7: ld   l,a]
l_2bd8:
	move.b	d6,d0                           	| [$2bd8: ld   a,l]
	addq.b	#0x05,d0                        	| [$2bd9: add  a,$05]
	move.b	d0,d4                           	| [$2bdb: ld   e,a]
	rts                                    	| [$2bdc: ret]
l_2bdd:
	move.b	(0x06,a2),d0                    	| [$2bdd: ld   a,(ix+$06)]
	add.b	d0,d0                            	| [$2be0: add  a,a]
	add.b	(0x3,a2),d0    	| [$2be1: add  a,(ix+character_y_offset_03)]
	move.b	d0,d6                           	| [$2be4: ld   l,a]
	move.b	d1,d5                           	| [$2be5: ld   h,b]
	addq.b	#1,d5                           	| [$2be6: inc  h]
	move.b	d5,d0                           	| [$2be7: ld   a,h]
	cmp.b	d6,d0                            	| [$2be8: cp   l]
	jcc	l_2bed                             	| [$2be9: jr   nc,$2BED]
	move.b	d6,d5                           	| [$2beb: ld   h,l]
	move.b	d0,d6                           	| [$2bec: ld   l,a]
l_2bed:
	move.b	(0x02,a2),d6                    	| [$2bed: ld   l,(ix+$02)]
	subq.w	#2,d6                           	| [$2bf0: dec  l]
 	move.b	d5,d0                           	| [$2bf2: ld   a,h]
	cmp.b	d6,d0                            	| [$2bf3: cp   l]
	jcc	l_2bf8                             	| [$2bf4: jr   nc,$2BF8]
	move.b	d6,d5                           	| [$2bf6: ld   h,l]
	move.b	d0,d6                           	| [$2bf7: ld   l,a]
l_2bf8:
	move.b	d6,d3                           	| [$2bf8: ld   d,l]
	move.b	d1,d0                           	| [$2bf9: ld   a,b]
	addq.b	#0x06,d0                        	| [$2bfa: add  a,$06]
	move.b	d0,d6                           	| [$2bfc: ld   l,a]
	move.b	(0x02,a2),d5                    	| [$2bfd: ld   h,(ix+$02)]
	move.b	d5,d0                           	| [$2c00: ld   a,h]
	cmp.b	d6,d0                            	| [$2c01: cp   l]
	jcc	l_2c06                             	| [$2c02: jr   nc,$2C06]
	move.b	d6,d5                           	| [$2c04: ld   h,l]
	move.b	d0,d6                           	| [$2c05: ld   l,a]
l_2c06:
	move.b	d6,d4                           	| [$2c06: ld   e,l]
	rts                                    	| [$2c07: ret]

l_2c08:
	lea	elevator_directions_array_8081(a6),a0	| [$2c08: ld   hl,elevator_directions_array_8081]
	move.b	#0x0B,d1                        	| [$2c0b: ld   b,$0B]
	jbsr	pseudo_random_with_regsave_1DF5                	| [$2c0d: call pseudo_random_with_regsave_1DF5]
	move.b	d0,d2                           	| [$2c10: ld   c,a]
l_2c11:
	ror.b	#1,d2                            	| [$2c11: rrc  c]
	move.b	d2,d0                           	| [$2c13: ld   a,c]
	and.b	#0x04,d0                         	| [$2c14: and  $04]
	subq.b	#0x02,d0                        	| [$2c16: sub  $02]
	move.b	d0,(a0)+                         	| [$2c18: ld   (hl),a]
	                           	| [$2c19: inc  hl]
	move.b	#0x14,(a0)+                      	| [$2c1a: ld   (hl),$14]
	                           	| [$2c1c: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_2c11                             	| [$2c1d: djnz $2C11]
	rts                                    	| [$2c1f: ret]

l_2c20:
	jbsr	l_2c2d                            	| [$2c20: call $2C2D]
	jbsr	l_2c92                            	| [$2c23: call $2C92]
	jbsr	l_2ce2                            	| [$2c26: call $2CE2]
	jbsr	l_2cff                            	| [$2c29: call $2CFF]
	rts                                    	| [$2c2c: ret]

l_2c2d:
	lea	l_83D5(a6),a2                      	| [$2c2d: ld   ix,$83D5]
	lea	table_2C66(pc),a0                          	| [$2c31: ld   hl,$2C66]
	moveq	#0,d1                               	| [$2c34: ld   b,$00]
l_2c36:
	move.b	(a0)+,d0                         	| [$2c36: ld   a,(hl)]
	move.b	d0,(0x04,a2)                    	| [$2c37: ld   (ix+$04),a]
	                           	| [$2c3a: inc  hl]
	move.b	(a0)+,d0                         	| [$2c3b: ld   a,(hl)]
	move.b	d0,(character_delta_x_05,a2)    	| [$2c3c: ld   (ix+character_delta_x_05),a]
	                           	| [$2c3f: inc  hl]
	move.b	(a0)+,d4                         	| [$2c40: ld   e,(hl)]
	                           	| [$2c41: inc  hl]
	move.b	(a0)+,d3                         	| [$2c42: ld   d,(hl)]
	                           	| [$2c43: inc  hl]
	LOAD_D3_16_FROM_D3D4
	move.w	d5,-(sp)                        	| [$2c44: push hl]
	move.b	l_802D(a6),d0                   	| [$2c45: ld   a,($802D)]
	addq.b	#1,d0                           	| [$2c48: inc  a]
	cmp.b	d1,d0                            	| [$2c49: cp   b]
	jne	l_2c52                             	| [$2c4a: jp   nz,$2C52]
	move.w	#-0x30,d5                          	| [$2c4d: ld   hl,$FFD0]
	add.w	d3,d5                            	| [$2c50: add  hl,de]
	exg	d3,d5                              	| [$2c51: ex   de,hl]
l_2c52:
	LOAD_D3D4_FROM_D3_16
	move.b	d4,(0x06,a2)                    	| [$2c52: ld   (ix+$06),e]
	move.b	d3,(0x07,a2)                    	| [$2c55: ld   (ix+$07),d]
	move.w	(sp)+,d5                        	| [$2c58: pop  hl]
	move.w	#0x0015,d3                      	| [$2c59: ld   de,$0015] 21
	add.w	d3,a2                            	| [$2c5c: add  ix,de]
	addq.b	#1,d1                           	| [$2c5e: inc  b]
	move.b	#0x0B,d0                        	| [$2c5f: ld   a,$0B]
	cmp.b	d1,d0                            	| [$2c61: cp   b]
	jne	l_2c36                             	| [$2c62: jp   nz,$2C36]
	rts                                    	| [$2c65: ret]
	
table_2C66:
	.byte	0x6F
	.byte	0x02
	.byte	0x84
	.byte	0x01
	
	.byte	0x7F,0x01
	.byte	0x64
	.byte	0x00
	
	.byte	0xAF
	.byte	0x01,0x64,0x00
	
	.byte	0x4F
	.byte	0x01,0x64,0x00
	
	.byte	0xAF
	.byte	0x01,0x64,0x00
	
	.byte	0xAF
	.byte	0x01,0x64,0x00
	
	.byte	0xCF
	.byte	0x02
	.byte	0x84
	.byte	0x01,0x2F,0x03
	.byte	0xA4
	.byte	0x02
	.byte	0x9F
	.byte	0x02
	.byte	0x14
	.byte	0x02
	.byte	0x8F
	.byte	0x03
	.byte	0x04
	.byte	0x03
	.byte	0x2F
	.byte	0x06,0xC4
	.byte	0x03
	.align	2
l_2c92:
	lea	l_83D5(a6),a2                      	| [$2c92: ld   ix,$83D5]
	move.b	#0x0B,d1                        	| [$2c96: ld   b,$0B]
l_2c98:
	LOAD_WORD	l_8028(a6),d5             	| [$2c98: ld   hl,($8028)]
	LOAD_D5D6_FROM_D5_16
	move.b	(character_delta_x_05,a2),d3    	| [$2c9b: ld   d,(ix+character_delta_x_05)]
	move.b	(0x04,a2),d4                    	| [$2c9e: ld   e,(ix+$04)]
	move.b	d6,d0                           	| [$2ca1: ld   a,l]
	sub.b	d4,d0                            	| [$2ca2: sub  e]
	move.b	d5,d0                           	| [$2ca3: ld   a,h]
	subx.b	d3,d0                           	| [$2ca4: sbc  a,d]
	jpl	l_2ca9                             	| [$2ca5: jp   p,$2CA9]
	exg	d5,d3                              	| [$2ca8: ex   de,hl]
	exg	d6,d4                              	| [$2ca8: ex   de,hl]
l_2ca9:
	move.b	d4,(character_x_00,a2)          	| [$2ca9: ld   (ix+character_x_00),e]
	move.b	d3,(character_x_right_01,a2)    	| [$2cac: ld   (ix+character_x_right_01),d]
	LOAD_WORD	absolute_height_802A(a6),d5             	| [$2caf: ld   hl,($802A)]
	LOAD_D5D6_FROM_D5_16
	move.b	(0x07,a2),d3                    	| [$2cb2: ld   d,(ix+$07)]
	move.b	(0x06,a2),d4                    	| [$2cb5: ld   e,(ix+$06)]
	move.b	d6,d0                           	| [$2cb8: ld   a,l]
	sub.b	d4,d0                            	| [$2cb9: sub  e]
	move.b	d5,d0                           	| [$2cba: ld   a,h]
	subx.b	d3,d0                           	| [$2cbb: sbc  a,d]
 	jpl	l_2cc0                             	| [$2cbc: jp   p,$2CC0]
	exg	d3,d5                              	| [$2cbf: ex   de,hl]
	exg	d4,d6                              	| [$2cbf: ex   de,hl]
l_2cc0:
	move.b	d6,(character_y_offset_down_02,a2)	| [$2cc0: ld   (ix+character_y_offset_down_02),l]
	move.b	d5,(character_y_offset_03,a2)   	| [$2cc3: ld   (ix+character_y_offset_03),h]
	exg	d5,d3                              	| [$2cc6: ex   de,hl]
	exg	d6,d4                              	| [$2cc6: ex   de,hl]
	move.b	#0x01,(move_direction_0d,a2)    	| [$2cc7: ld   (ix+move_direction_0d),$01]
	move.b	(character_x_right_01,a2),d5    	| [$2ccb: ld   h,(ix+character_x_right_01)]
	move.b	(character_x_00,a2),d6          	| [$2cce: ld   l,(ix+character_x_00)]
	clr.b	d0                               	| [$2cd1: xor  a]
	LOAD_D3_16_FROM_D3D4
	LOAD_D5_16_FROM_D5D6
	sub.w	d3,d5                            	| [$2cd2: sbc  hl,de]
	jcc	l_2cda                             	| [$2cd4: jp   nc,$2CDA]
	subq.b	#1,(move_direction_0d,a2)       	| [$2cd7: dec  (ix+move_direction_0d)]
l_2cda:
	move.w	#0x0015,d3                      	| [$2cda: ld   de,$0015] 21
	add.w	d3,a2                            	| [$2cdd: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2c98                             	| [$2cdf: djnz $2C98]
	rts                                    	| [$2ce1: ret]
l_2ce2:
	lea	l_83D5(a6),a2                      	| [$2ce2: ld   ix,$83D5]
	lea	elevator_array_837D(a6),a3         	| [$2ce6: ld   iy,elevator_array_837D]
	move.b	#0x0B,d1                        	| [$2cea: ld   b,$0B]
l_2cec:
	move.b	(0x06,a3),d0                    	| [$2cec: ld   a,(iy+$06)]
	move.b	d0,(0x0e,a2)                    	| [$2cef: ld   (ix+$0e),a]
	move.w	#0x0015,d3                      	| [$2cf2: ld   de,$0015] 21
	add.w	d3,a2                            	| [$2cf5: add  ix,de]
	move.w	#0x0008,d3                      	| [$2cf7: ld   de,$0008] 8
	add.w	d3,a3                            	| [$2cfa: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2cec                             	| [$2cfc: djnz $2CEC]
	rts                                    	| [$2cfe: ret]
l_2cff:
	lea	elevator_array_837D(a6),a2         	| [$2cff: ld   ix,elevator_array_837D]
	lea	l_83D5(a6),a3                      	| [$2d03: ld   iy,$83D5]
	move.b	#0x0B,d1                        	| [$2d07: ld   b,$0B]
l_2d09:
	movem.w	d1/d2,-(sp)                    	| [$2d09: push bc]
	move.b	(0x01,a3),d5                    	| [$2d0a: ld   h,(iy+$01)]
	move.b	(a3),d6                    	| [$2d0d: ld   l,(iy+$00)]
	jbsr	l_2d36                            	| [$2d10: call $2D36]
	move.b	d2,(0x08,a3)                    	| [$2d13: ld   (iy+$08),c]
	move.b	d1,(0x09,a3)                    	| [$2d16: ld   (iy+$09),b]
	move.b	(0x03,a3),d5                    	| [$2d19: ld   h,(iy+$03)]
	move.b	(0x02,a3),d6                    	| [$2d1c: ld   l,(iy+$02)]
	jbsr	l_2d36                            	| [$2d1f: call $2D36]
	move.b	d2,(0x0a,a3)                    	| [$2d22: ld   (iy+$0a),c]
	move.b	d1,(0x0b,a3)                    	| [$2d25: ld   (iy+$0b),b]
	movem.w	(sp)+,d1/d2                    	| [$2d28: pop  bc]
	move.w	#0x0015,d3                      	| [$2d29: ld   de,$0015] 21
	add.w	d3,a3                            	| [$2d2c: add  iy,de]
	move.w	#0x0008,d3                      	| [$2d2e: ld   de,$0008] 8
	add.w	d3,a2                            	| [$2d31: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2d09                             	| [$2d33: djnz $2D09]
	rts                                    	| [$2d35: ret]
l_2d36:
	move.b	d6,d0                           	| [$2d36: ld   a,l]
	and.b	#0x07,d0                         	| [$2d37: and  $07]
	move.b	d0,d2                           	| [$2d39: ld   c,a]
	move.b	d6,d0                           	| [$2d3a: ld   a,l]
	asr.b	#1,d5                            	| [$2d3b: sra  h]
	roxr.b	#1,d0                           	| [$2d3d: rra]
	asr.b	#1,d5                            	| [$2d3e: sra  h]
	roxr.b	#1,d0                           	| [$2d40: rra]
	asr.b	#1,d5                            	| [$2d41: sra  h]
	roxr.b	#1,d0                           	| [$2d43: rra]
	move.b	d0,d6                           	| [$2d44: ld   l,a]
	move.b	(0x1,a2),d0    	                    | [$2d45: ld   a,(ix+character_x_right_01)]
	addq.b	#1,d0                           	| [$2d48: inc  a]
	move.b	d0,d1                           	| [$2d49: ld   b,a]
	add.b	d1,d0                            	| [$2d4a: add  a,b]
	add.b	d1,d0                            	| [$2d4b: add  a,b]
	add.b	d0,d0                            	| [$2d4c: add  a,a]
	move.b	d0,d1                           	| [$2d4d: ld   b,a]
	move.b	d6,d0                           	| [$2d4e: ld   a,l]
	sub.b	d1,d0                            	| [$2d4f: sub  b]
	move.b	d0,d1                           	| [$2d50: ld   b,a]
	rts                                    	| [$2d51: ret]

l_2d52:
	lea	l_83D5(a6),a2                      	| [$2d52: ld   ix,$83D5]
	lea	elevator_array_837D(a6),a3         	| [$2d56: ld   iy,elevator_array_837D]
	move.b	#0x07,d1                        	| [$2d5a: ld   b,$07]
l_2d5c:
	movem.w	d1/d2,-(sp)                    	| [$2d5c: push bc]
	jbsr	l_2d77                            	| [$2d5d: call $2D77]
	jbsr	l_2d8f                            	| [$2d60: call $2D8F]
	movem.w	(sp)+,d1/d2                    	| [$2d63: pop  bc]
	move.w	#0x0015,d3                      	| [$2d64: ld   de,$0015] 21
	add.w	d3,a2                            	| [$2d67: add  ix,de]
	move.w	#0x0008,d3                      	| [$2d69: ld   de,$0008] 8
	add.w	d3,a3                            	| [$2d6c: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2d5c                             	| [$2d6e: djnz $2D5C]
	jbsr	propagate_main_scroll_value_to_elevators_5f29                            	| [$2d70: call $5F29]
	jbsr	set_elevator_column_scroll_6163   	| [$2d73: call set_elevator_column_scroll_6163]
	rts                                    	| [$2d76: ret]

l_2d77:
	move.b	(0x01,a3),d0                    	| [$2d77: ld   a,(iy+$01)]
	jbsr	return_a_times_48_in_hl_2D84      	| [$2d7a: call return_a_times_48_in_hl_2D84]
	move.b	d6,(0x0f,a2)                    	| [$2d7d: ld   (ix+$0f),l]
	move.b	d5,(0x10,a2)                    	| [$2d80: ld   (ix+$10),h]
	rts                                    	| [$2d83: ret]

return_a_times_48_in_hl_2D84:
	move.b	d0,d1                           	| [$2d84: ld   b,a]
	add.b	d1,d0                            	| [$2d85: add  a,b]
	add.b	d1,d0                            	| [$2d86: add  a,b]
	add.b	d0,d0                            	| [$2d87: add  a,a]
	clr.w	d5                               	| [$2d89: ld   h,$00]
	move.b	d0,d5                           	| [$2d88: ld   l,a]
	lsl.w	#3,d5                            	| [$2d8b: add  hl,hl]
	                            	| [$2d8c: add  hl,hl]
                            	| [$2d8d: add  hl,hl]
	LOAD_D5D6_FROM_D5_16
	rts                                    	| [$2d8e: ret]

l_2d8f:
	move.b	(0x02,a3),d0                    	| [$2d8f: ld   a,(iy+$02)]
	jbsr	return_a_times_48_in_hl_2D84      	| [$2d92: call return_a_times_48_in_hl_2D84]
	move.b	d5,(0x12,a2)                    	| [$2d95: ld   (ix+$12),h]
	move.b	d6,(0x11,a2)                    	| [$2d98: ld   (ix+$11),l]
	move.b	(0x06,a3),d0                    	| [$2d9b: ld   a,(iy+$06)]
	add.b	d0,d0                            	| [$2d9e: add  a,a]
	add.b	(0x03,a3),d0                     	| [$2d9f: add  a,(iy+$03)]
	jbsr	return_a_times_48_in_hl_2D84      	| [$2da2: call return_a_times_48_in_hl_2D84]
	move.b	d5,(0x14,a2)                    	| [$2da5: ld   (ix+$14),h]
	move.b	d6,(0x13,a2)                    	| [$2da8: ld   (ix+$13),l]
	rts                                    	| [$2dab: ret]

* fill first screen with elevator chars
initialize_elevator_screen_2dac:
	lea	l_83D5(a6),a2                      	| [$2dac: ld   ix,$83D5]
	moveq	#0,d1                               	| [$2db0: ld   b,$00]
l_2db2:
	move.b	(0xD,a2),d0       	| [$2db2: ld   a,(ix+0xd)]
	                             	| [$2db5: or   a]
	jeq	l_2de1                             	| [$2db6: jp   z,$2DE1]
	move.b	d1,d0                           	| [$2db9: ld   a,b]
	move.b	d0,l_850E(a6)                   	| [$2dba: ld   ($850E),a]
	move.b	(0x09,a2),d2                    	| [$2dbd: ld   c,(ix+$09)]
l_2dc0:
	movem.w	d1/d2,-(sp)                    	| [$2dc0: push bc]
	lea	elevator_tile_address_84BC(a6),a0  	| [$2dc1: ld   hl,elevator_tile_address_84BC]
	STORE_POINTER	a0,elevator_tile_address_copy_850F(a6)            	| [$2dc4: ld   ($850F),hl]
	jbsr	l_6068                            	| [$2dc7: call $6068]
	move.b	(0x0e,a2),d1                    	| [$2dca: ld   b,(ix+$0e)]
	jbsr	l_60ad                            	| [$2dcd: call $60AD]
	LOAD_POINTER	elevator_tile_address_copy_850F(a6),a0             	| [$2dd0: ld   hl,($850F)]
	clr.b	(a0)                             	| [$2dd3: ld   (hl),$00]
	jbsr	feed_elevator_columns_6177        	| [$2dd5: call feed_elevator_columns_6177]
	movem.w	(sp)+,d1/d2                    	| [$2dd8: pop  bc]
	subq.b	#1,d2                           	| [$2dd9: dec  c]
	move.b	d2,d0                           	| [$2dda: ld   a,c]
	cmp.b	(0x0b,a2),d0                     	| [$2ddb: cp   (ix+$0b)]
	jpl	l_2dc0                             	| [$2dde: jp   p,$2DC0]
l_2de1:
	move.w	#0x0015,d3                      	| [$2de1: ld   de,$0015] 21
	add.w	d3,a2                            	| [$2de4: add  ix,de]
	addq.b	#1,d1                           	| [$2de6: inc  b]
	move.b	d1,d0                           	| [$2de7: ld   a,b]
	cmp.b	#0x0B,d0                         	| [$2de8: cp   $0B]
	jne	l_2db2                             	| [$2dea: jp   nz,$2DB2]
	rts                                    	| [$2ded: ret]

l_2dee:
	jbsr	l_2e2a                            	| [$2dee: call $2E2A]
	jbsr	reload_8bit_timer_26C2           	| [$2df1: call reload_8bit_timer_26C2]
l_2df4:
	jbsr	game_tick_73cf                            	| [$2df4: call $73CF]
	* read "start" buttons
	jbsr	osd_read_inputs_2                  	| [$2df7: ld   a,($D40B)]
	and.b	#0xC0,d0                         	| [$2dfa: and  $C0]
	jeq	l_2df4                             	| [$2dfc: jr   z,$2DF4]
	cmp.b	#0xC0,d0                         	| [$2dfe: cp   $C0]
	jeq	l_2df4                             	| [$2e00: jr   z,$2DF4]
	* one of the bit 6/7 is cleared: game start
	btst.b	#7,d0                           	| [$2e02: bit  7,a]
	jne	game_start_2e1b                       | [$2e04: jr   nz,$2E1B]  1 player
	* 2 players
	move.b	copy_of_dip_switches_1_824E(a6),d0	| [$2e06: ld   a,(copy_of_dip_switches_1_824E)]
	btst.b	#2,d0                           	| [$2e09: bit  2,a]
	jne	l_2e17                             	| [$2e0b: jr   nz,$2E17]
	move.b	nb_credits_80A2(a6),d0          	| [$2e0d: ld   a,(nb_credits_80A2)]
	subq.b	#0x02,d0                        	| [$2e10: sub  $02]
	jcs	l_2df4                             	| [$2e12: jr   c,$2DF4]
	move.b	d0,nb_credits_80A2(a6)          	| [$2e14: ld   (nb_credits_80A2),a]
l_2e17:
	jbsr	l_2e85                            	| [$2e17: call $2E85]
	rts                                    	| [$2e1a: ret]

game_start_2e1b:
	move.b	copy_of_dip_switches_1_824E(a6),d0	| [$2e1b: ld   a,(copy_of_dip_switches_1_824E)]
	btst.b	#2,d0                           	| [$2e1e: bit  2,a]
	jne	l_2e26                             	| [$2e20: jr   nz,$2E26] free play: skip credit decrease
	lea	nb_credits_80A2(a6),a0             	| [$2e22: ld   hl,nb_credits_80A2]
	subq.b	#1,(a0)                         	| [$2e25: dec  (hl)]
l_2e26:
	jbsr	l_2e50                            	| [$2e26: call $2E50]
	rts                                    	| [$2e29: ret]
	
	
l_2e2a:
	clr.b	d0                               	| [$2e2a: xor  a]
	move.b	d0,sync_flag_80AB(a6)                   	| [$2e2b: ld   ($80AB),a]
	move.b	d0,current_player_is_p2_8236(a6)                   	| [$2e2e: ld   ($8236),a]
	jbsr	l_71e1                            	| [$2e31: call $71E1]
	move.b	#0x01,d0                        	| [$2e34: ld   a,$01]
	* set menu/title tiles
	move.b	d0,menu_or_game_tiles_81D9(a6)  	| [$2e36: ld   (menu_or_game_tiles_81D9),a]
	jbsr	init_hw_scroll_and_charset_260C                            	| [$2e39: call $260C]
	move.b	#GS_PUSH_START_03,d0            	| [$2e3c: ld   a,GS_PUSH_START_03]
	move.b	d0,game_state_80AC(a6)          	| [$2e3e: ld   (game_state_80AC),a]
	move.b	#0x01,d0                        	| [$2e41: ld   a,$01]
	move.b	d0,timer_8bit_reload_value_80A9(a6)	| [$2e43: ld   (timer_8bit_reload_value_80A9),a]
	jbsr	display_status_bars_5839                            	| [$2e46: call $5839]
	jbsr	update_upper_status_bar_57C6      	| [$2e49: call update_upper_status_bar_57C6]
	jbsr	display_credit_info_10b0                            	| [$2e4c: call $10B0]
	rts                                    	| [$2e4f: ret]

l_2e50:
	jbsr	init_player_data_2e98                            	| [$2e50: call $2E98]
l_2e53:
	moveq	#0,d0
	LOAD_WORD	dynamic_ram_code_argument_8248(a6),d0             	| [$2e53: ld   ix,($8248)]
	move.l	d0,a2		| a2 = original ROM address
	move.b	(0x17,a2),d6                    	| [$2e57: ld   l,(ix+$17)]
	move.b	(0x18,a2),d5                    	| [$2e5a: ld   h,(ix+$18)]
	LOAD_D5_16_FROM_D5D6
	move.l	a6,a0
	sub.l	#0x8000,a0
	add.l	d5,a0
	
	move.b	l_8245(a6),d0                   	| [$2e5d: ld   a,($8245)]
	                               	| [$2e60: neg]
	bne.b	0f                               	| [...]
	jbsr	execute_dynamic_ram_code_8246                        	| [$2e62: call z,$8246]
0:
	sne		d7		| capture Z flag
	move.b	#0xDD,d0                        	| [$2e65: ld   a,$DD]  jp (xx)
	lea	dynamic_ram_code_8246(a6),a2                      	| [$2e67: ld   ix,$8246]
	move.b	d0,(a2)                    	| [$2e6b: ld   (ix+$00),a]
	lea	l_8245(a6),a2                      	| [$2e6e: ld   ix,$8245]
	move.b	d0,(a2)                    	| [$2e72: ld   (ix+$00),a]
	tst.b	d7
	jeq	l_2e53                             	| [$2e75: jr   z,$2E53]

	move.b	nb_credits_80A2(a6),d0          	| [$2e77: ld   a,(nb_credits_80A2)]
	move.b	d0,(a0)                         	| [$2e7a: ld   (hl),a]
	move.b	#0x01,d0                        	| [$2e7b: ld   a,$01]
	move.b	d0,number_of_players_8235(a6)                   	| [$2e7d: ld   ($8235),a]
	clr.b	d0                               	| [$2e80: xor  a]
	move.b	d0,current_player_is_p2_8236(a6)                   	| [$2e81: ld   ($8236),a]
	rts                                    	| [$2e84: ret]

l_2e85:
	jbsr	init_player_data_2e98                            	| [$2e85: call $2E98]
	jbsr	switch_players_data_359e                            	| [$2e88: call $359E]
	jbsr	init_player_data_2e98                            	| [$2e8b: call $2E98]
	move.b	#0x02,d0                        	| [$2e8e: ld   a,$02]
	move.b	d0,number_of_players_8235(a6)                   	| [$2e90: ld   ($8235),a]
	clr.b	d0                               	| [$2e93: xor  a]
	move.b	d0,current_player_is_p2_8236(a6)                   	| [$2e94: ld   ($8236),a]
	rts                                    	| [$2e97: ret]

init_player_data_2e98:
	move.b	dsw_copy_nb_lives_per_play_8252(a6),d0	| [$2e98: ld   a,(dsw_copy_nb_lives_per_play_8252)]
	move.b	d0,nb_lives_8234(a6)            	| [$2e9b: ld   (nb_lives_8234),a]
	clr.b	d0                               	| [$2e9e: xor  a]
	lea	current_player_score_834D(a6),a0                      	| [$2e9f: ld   hl,$834D]
	move.b	d0,(a0)+                         	| [$2ea2: ld   (hl),a]
	                           	| [$2ea3: inc  hl]
	move.b	d0,(a0)+                         	| [$2ea4: ld   (hl),a]
	                           	| [$2ea5: inc  hl]
	move.b	d0,(a0)                         	| [$2ea6: ld   (hl),a]
	move.b	d0,l_824A(a6)                   	| [$2ea7: ld   ($824A),a]
	move.b	d0,l_8373(a6)                   	| [$2eaa: ld   ($8373),a]
	move.b	copy_of_dip_switches_3_8250(a6),d0	| [$2ead: ld   a,(copy_of_dip_switches_3_8250)]
	and.b	#0x03,d0                         	| [$2eb0: and  $03]
	move.b	d0,skill_level_8237(a6)         	| [$2eb2: ld   (skill_level_8237),a]
	rts                                    	| [$2eb5: ret]

l_2eb6:
	lea	push_string_2EE0,a0                	| [$2eb6: ld   hl,push_string_2EE0]
	lea	l_C54E(a6),a1                      	| [$2eb9: ld   de,$C54E]
	jbsr	copy_string_to_screen_29F9        	| [$2ebc: call copy_string_to_screen_29F9]
	move.b	copy_of_dip_switches_1_824E(a6),d0	| [$2ebf: ld   a,(copy_of_dip_switches_1_824E)]
	btst.b	#2,d0                           	| [$2ec2: bit  2,a]
	jne	l_2ed6                             	| [$2ec4: jr   nz,$2ED6]
	move.b	nb_credits_80A2(a6),d0          	| [$2ec6: ld   a,(nb_credits_80A2)]
	subq.b	#1,d0                           	| [$2ec9: dec  a]
	jne	l_2ed6                             	| [$2eca: jr   nz,$2ED6]
	lea	only_1_player_button_string_2EE5,a0	| [$2ecc: ld   hl,only_1_player_button_string_2EE5]
	lea	l_C5A4(a6),a1                      	| [$2ecf: ld   de,$C5A4]
	jbsr	copy_string_to_screen_29F9        	| [$2ed2: call copy_string_to_screen_29F9]
	rts                                    	| [$2ed5: ret]

l_2ed6:
	lea	one_or_two_players_button_string_2EFD,a0	| [$2ed6: ld   hl,one_or_two_players_button_string_2EFD]
	lea	l_C5A4(a6),a1                      	| [$2ed9: ld   de,$C5A4]
	jbsr	copy_string_to_screen_29F9        	| [$2edc: call copy_string_to_screen_29F9]
	rts                                    	| [$2edf: ret]
* "PUSH"
push_string_2EE0:
	.byte	0x1A
	.byte	0x22,0x2D,0x2B
	.byte	0xFF

* "ONLY 1 PLAYER BUTTON"
only_1_player_button_string_2EE5:
	.byte	0x00
	.byte	0x00
	.byte	0x2F
	.byte	0x25
	.byte	0x1B
	.byte	0x1D
	.byte	0x00
	.byte	0x11,0x00,0x1A
	.byte	0x1B
	.byte	0x1C
	.byte	0x1D
	.byte	0x1E,0x1F
	.byte	0x00
	.byte	0x29
	.byte	0x22,0x31,0x31
	.byte	0x2F
	.byte	0x25
	.byte	0x00
	.byte	0xFF

* "1 - OR 2 PLAYERS BUTTON"
one_or_two_players_button_string_2EFD:
	.byte	0x11,0x2A,0x00
	.byte	0x2F
	.byte	0x1F
	.byte	0x00
	.byte	0x00
	.byte	0x12
	.byte	0x2A,0x1A,0x1B
	.byte	0x1C
	.byte	0x1D
	.byte	0x1E,0x1F
	.byte	0x00
	.byte	0x00
	.byte	0x29
	.byte	0x22,0x31,0x31
	.byte	0x2F
	.byte	0x25
	.byte	0xFF
	.align	2
	
l_2f15:
	clr.b	d0                               	| [$2f15: xor  a]
l_2f16:
	move.b	#0x14,d0                        	| [$2f16: ld   a,$14]
	rts                                    	| [$2f18: ret]


											| [$2f19: push hl]
											| [$2f1a: ld   a,$01]
											| [$2f1c: ld   hl,$2E2A]
* dynamic code executed by game
l_2f1f:
	add.b	(a0),d0                          	| [$2f1f: add  a,(hl)]
	exg	a5,a3                            	| [$2f20: ex   (sp),iy]  ???
	move.b	#0xC9,d1                        	| [$2f22: ld   b,$C9]
	subx.b	d1,d0                           	| [$2f24: sbc  a,b]
	add.b	#0xC5,d0                         	| [$2f25: add  a,$C5]
	exg	a5,a3                            	| [$2f27: ex   (sp),iy]
	jne	l_2f15                             	| [$2f29: jr   nz,$2F15]
	* never reached??
	move.b	(0x19,a2),d6                    	| [$2f2b: ld   l,(ix+$19)]
	move.b	(0x1a,a2),d5                    	| [$2f2e: ld   h,(ix+$1a)]
	LOAD_D5_16_FROM_D5D6
	illegal
	NOP
	cmp.l	a0,a0
	cmp.l	a0,a0
	cmp.l	a0,a0
	* TODO: jump depending on known values of ROM addresses in D5
	* OR this is just a protection to jump in the woods
	move.l	a0,a2                        	| [$2f31: push hl]
	                        	            | [$2f32: pop  ix]
	jra	(a2)                               	| [$2f34: jp   (ix)]
	

l_2f3a:
	lea	l_80FB(a6),a0                      	| [$2f3a: ld   hl,$80FB]
	move.b	#0x28,d1                        	| [$2f3d: ld   b,$28]
l_2f3c:
	add.b	d1,d0                            	| [$2f3c: add  a,b]
	move.b	#0x28,d1                        	| [$2f3d: ld   b,$28]
l_2f3f:
	st.b	(a0)+                      	| [$2f3f: ld   (hl),$FF]
	                           	| [$2f41: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_2f3f                             	| [$2f42: djnz $2F3F]
	lea	enemy_1_853A(a6),a0                	| [$2f44: ld   hl,enemy_1_853A]
	move.b	#0x80,d1                        	| [$2f47: ld   b,$80]
l_2f49:
	clr.b	(a0)+                             	| [$2f49: ld   (hl),$00]
	                           	| [$2f4b: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_2f49                             	| [$2f4c: djnz $2F49]
	lea	enemy_1_853A(a6),a0                	| [$2f4e: ld   hl,enemy_1_853A]
	move.b	#0x04,d2                        	| [$2f51: ld   c,$04]
	move.w	#0x0012,d3                      	| [$2f53: ld   de,$0012] 18
l_2f56:
	move.b	#0x0E,d1                        	| [$2f56: ld   b,$0E]
l_2f58:
	st.b	(a0)+                      	| [$2f58: ld   (hl),$FF]
	                           	| [$2f5a: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_2f58                             	| [$2f5b: djnz $2F58]
	add.w	d3,a0                            	| [$2f5d: add  hl,de]
	subq.b	#1,d2                           	| [$2f5e: dec  c]
	jne	l_2f56                             	| [$2f5f: jr   nz,$2F56]
	lea	l_854A(a6),a0                      	| [$2f61: ld   hl,$854A]
	move.w	#0x0020,d3                      	| [$2f64: ld   de,$0020] 32
	move.b	#0x04,d1                        	| [$2f67: ld   b,$04]
	move.b	#0x0A,d0                        	| [$2f69: ld   a,$0A]
l_2f6b:
	move.b	d0,(a0)                         	| [$2f6b: ld   (hl),a]
	add.b	#0x0F,d0                         	| [$2f6c: add  a,$0F]
	add.w	d3,a0                            	| [$2f6e: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2f6b                             	| [$2f6f: djnz $2F6B]
	rts                                    	| [$2f71: ret]
	
set_player_initial_state_2f72:
	jbsr	get_sprite_shadow_ram_46a9                            	| [$2f72: call $46A9]
	* invalidate active objects
	move.b	#0x0A,d1                        	| [$2f75: ld   b,$0A] 2 objects for the player
l_2f77:
	st.b	(a0)+                      	| [$2f77: ld   (hl),$FF]
	                           	| [$2f79: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_2f77                             	| [$2f7a: djnz $2F77]
	lea	initial_player_structure_2F9C,a0   	| [$2f7c: ld   hl,initial_player_structure_2F9C]
	lea	player_structure_851A(a6),a1       	| [$2f7f: ld   de,player_structure_851A]
	move.w	#0x000E,d1                      	| [$2f82: ld   bc,$000E] 14
	jbsr	ldir                              	| [$2f85: ldir] copy initial player structure to current player structure at start
	move.b	#0x12,d1                        	| [$2f87: ld   b,$12]
	clr.b	d0                               	| [$2f89: ld   a,$00]
	move.b	d0,l_8238(a6)                   	| [$2f8b: ld   ($8238),a]
l_2f8e:
	move.b	d0,(a1)+                         	| [$2f8e: ld   (de),a]
	                           	| [$2f8f: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_2f8e                             	| [$2f90: djnz $2F8E]
	move.b	viewed_floor_802C(a6),d0                   	| [$2f92: ld   a,($802C)]
	move.b	d0,player_structure_851A+current_floor_07(a6)	| [$2f95: ld   (player_structure_851A+current_floor_07),a]
	jbsr	l_2faa                            	| [$2f98: call $2FAA]
	rts                                    	| [$2f9b: ret]

initial_player_structure_2F9C:
	.byte	0x67     | x
 	.byte	0x6F     | fine x
	.byte	0x1C    
	.byte	0x06    | y offset
	.byte	0x02
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	1,0,0
	.align	2

l_2faa:
	lea	player_structure_851A(a6),a2       	| [$2faa: ld   ix,player_structure_851A]
	move.b	(current_floor_07,a2),d0                    	| [$2fae: ld   a,(ix+$07)]
	cmp.b	#0x1F,d0                         	| [$2fb1: cp   $1F]
	bcs.b	0f                               	| [...]
	* on top floor! do nothing
	rts                                    	| [$2fb3: ret  nc] [...]
0:
	moveq   #0,d4                               	| [$2fb5: ld   d,$00]
	move.b	d0,d4                           	| [$2fb4: ld   e,a]
	lea	red_door_position_array_8210(a6),a0	| [$2fb7: ld   hl,red_door_position_array_8210]
	add.w	d4,a0                            	| [$2fba: add  hl,de]
	move.b	(a0),d0                         	| [$2fbb: ld   a,(hl)] position of door at player floor
	cmp.b	#0x08,d0                         	| [$2fbc: cp   $08]
	bcs.b	0f                               	| [...]
	* no door at this floor
	rts                                    	| [$2fbe: ret  nc] [...]
0:
	move.b	d0,d3                           	| [$2fbf: ld   d,a]
	move.b	d4,d0                           	| [$2fc0: ld   a,e]
	cmp.b	#0x07,d0                         	| [$2fc1: cp   $07]
	jcc	l_2fd0                             	| [$2fc3: jr   nc,$2FD0]
	move.b	d3,d0                           	| [$2fc5: ld   a,d]
	cmp.b	#0x04,d0                         	| [$2fc6: cp   $04]
	scs		d7
	move.b	#0x1C,d0                        	| [$2fc8: ld   a,$1C]
	tst.b	d7
	jne	l_2fd8                             	| [$2fca: jr   c,$2FD8]
 	move.b	#0xD4,d0                        	| [$2fcc: ld   a,$D4]
	jra	l_2fd8                             	| [$2fce: jr   $2FD8]
l_2fd0:
	move.b	d3,d0                           	| [$2fd0: ld   a,d]
	add.b	d3,d0                            	| [$2fd1: add  a,d]
	add.b	d3,d0                            	| [$2fd2: add  a,d]
	lsl.b	#3,d0                            	| [$2fd3: add  a,a]
												| [$2fd4: add  a,a]
												| [$2fd5: add  a,a]
	add.b	#0x24,d0                         	| [$2fd6: add  a,$24]
l_2fd8:
	move.b	d0,(character_x_00,a2)          	| [$2fd8: ld   (ix+character_x_00),a]
	add.b	#0x08,d0                         	| [$2fdb: add  a,$08]
	move.b	d0,(character_x_right_01,a2)    	| [$2fdd: ld   (ix+character_x_right_01),a]
	cmp.b	#0x80,d0                         	| [$2fe0: cp   $80]
	bcs.b	0f                               	| [...]
	rts                                    	| [$2fe2: ret  nc] [...]
0:
	clr.b	(0x0b,a2)                        	| [$2fe3: ld   (ix+$0b),$00]
	rts                                    	| [$2fe7: ret]

l_2fe8:
	lea	player_structure_851A(a6),a2       	| [$2fe8: ld   ix,player_structure_851A]
	clr.b	d0                               	| [$2fec: ld   a,$00]
	move.b	d0,current_enemy_index_85BA(a6) 	| [$2fee: ld   (current_enemy_index_85BA),a]
	lea	sprite_and_priority_shadow_ram_80F1(a6),a0     | [$2ff1: ld   hl,$80F1]
	STORE_POINTER	a0,ram_pointer_85BF(a6)            	| [$2ff4: ld   ($85BF),hl]
	lea	l_8164(a6),a0                      	| [$2ff7: ld   hl,$8164]
	STORE_POINTER	a0,ram_pointer_85BB(a6)            	| [$2ffa: ld   ($85BB),hl]
	lea	l_812D(a6),a0                      	| [$2ffd: ld   hl,$812D]
	STORE_POINTER	a0,ram_pointer_85BD(a6)            	| [$3000: ld   ($85BD),hl]
	jbsr	l_301c                            	| [$3003: call $301C]
	move.b	#0x01,(0x1b,a2)                 	| [$3006: ld   (ix+$1b),$01]
	jbsr	l_432a                            	| [$300a: call $432A]
	jbsr	l_618a                            	| [$300d: call $618A]
	jbsr	handle_elevator_sound_3046        	| [$3010: call handle_elevator_sound_3046]
	move.b	(player_unknown_13,a2),d0                    	| [$3013: ld   a,(ix+$13)]
	                             	| [$3016: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$3017: ret  z] [...]
0:
	subq.b	#1,(player_unknown_13,a2)                    	| [$3018: dec  (ix+$13)]
	rts                                    	| [$301b: ret]

l_301c:
	move.b	(0x11,a2),d0                    	| [$301c: ld   a,(ix+$11)]
	                             	| [$301f: or   a]
	jeq	l_303d                             	| [$3020: jr   z,$303D]
	subq.b	#1,d0                           	| [$3022: dec  a]
	jeq	l_303d                             	| [$3023: jr   z,$303D]
	addq.b	#1,(0x14,a2)                    	| [$3025: inc  (ix+$14)]
	move.b	(0x14,a2),d0                    	| [$3028: ld   a,(ix+$14)]
	cmp.b	#0x08,d0                         	| [$302b: cp   $08]
	jcc	l_3034                             	| [$302d: jr   nc,$3034]
	clr.b	(0x11,a2)                        	| [$302f: ld   (ix+$11),$00]
	rts                                    	| [$3033: ret]
l_3034:
	st.b	(0x11,a2)                 	| [$3034: ld   (ix+$11),$FF]
	clr.b	(0x14,a2)                        	| [$3038: ld   (ix+$14),$00]
	rts                                    	| [$303c: ret]
l_303d:
	clr.b	(0x11,a2)                        	| [$303d: ld   (ix+$11),$00]
	clr.b	(0x14,a2)                        	| [$3041: ld   (ix+$14),$00]
	rts                                    	| [$3045: ret]

handle_elevator_sound_3046:
	moveq   #0,d4                               	| [$3046: ld   d,$00]
	move.b	player_structure_851A+character_situation_06(a6),d0	| [$3048: ld   a,(player_structure_851A+character_situation_06)]
												| [$304b: or   a]
	jeq	l_306f                             	| [$304c: jr   z,$306F]
	cmp.b	#0x03,d0                         	| [$304e: cp   $03]
	jcc	l_306f                             	| [$3050: jr   nc,$306F]
	move.b	player_structure_851A+9(a6),d0  	| [$3052: ld   a,(player_structure_851A+9)]
	cmp.b	#0x05,d0                         	| [$3055: cp   $05]
	jcs	l_305d                             	| [$3057: jr   c,$305D]
	cmp.b	#0x07,d0                         	| [$3059: cp   $07]
	jne	l_306f                             	| [$305b: jr   nz,$306F]
l_305d:
	move.b	player_structure_851A+8(a6),d0  	| [$305d: ld   a,(player_structure_851A+8)]
	and.b	#0x7F,d0                         	| [$3060: and  $7F]
	move.b	d0,d4                           	| [$3062: ld   e,a]
	add.b	d0,d0                            	| [$3063: add  a,a]
	add.b	d0,d0                            	| [$3064: add  a,a]
	add.b	d4,d0                            	| [$3065: add  a,e]
	add.b	d0,d0                            	| [$3066: add  a,a]
	add.b	d0,d0                            	| [$3067: add  a,a]
	add.b	d4,d0                            	| [$3068: add  a,e]
	moveq	#0,d4
	move.b	d0,d4                           	| [$3069: ld   e,a]
	lea	l_83E1(a6),a0                      	| [$306a: ld   hl,$83E1]
	add.w	d4,a0                            	| [$306d: add  hl,de]
	move.b	(a0),d3                         	| [$306e: ld   d,(hl)]
l_306f:
	lea	l_8238(a6),a0                      	| [$306f: ld   hl,$8238]
	move.b	(a0),d0                         	| [$3072: ld   a,(hl)]
	move.b	d3,(a0)                         	| [$3073: ld   (hl),d]
	cmp.b	d3,d0                            	| [$3074: cp   d]
	bne.b	0f                               	| [...]
	rts                                    	| [$3075: ret  z] [...]
0:
	move.b	d3,d0                           	| [$3076: ld   a,d]
	move.b	#0x64,d0                        	| [$3078: ld   a,$64] elevator move sound
	tst.b	d3                             	| [$3077: or   a]
	jne	l_307d                             	| [$307a: jr   nz,$307D]
	addq.b	#1,d0                           	| [$307c: inc  a] elevator sound stop?
l_307d:
	jbsr	play_sound_3656                   	| [$307d: call play_sound_3656]
	rts                                    	| [$3080: ret]

update_enemies_3081:
	lea	enemy_1_853A(a6),a2                	| [$3081: ld   ix,enemy_1_853A]
	move.b	#0x01,d0                        	| [$3085: ld   a,$01]
	move.b	d0,current_enemy_index_85BA(a6) 	| [$3087: ld   (current_enemy_index_85BA),a]
	lea	l_80FB(a6),a0                      	| [$308a: ld   hl,$80FB]
	STORE_POINTER	a0,ram_pointer_85BF(a6)            	| [$308d: ld   ($85BF),hl]
	lea	l_8132(a6),a0                      	| [$3090: ld   hl,$8132]
	STORE_POINTER	a0,ram_pointer_85BD(a6)            	| [$3093: ld   ($85BD),hl]
	STORE_POINTER	a0,ram_pointer_85BB(a6)            	| [$3096: ld   ($85BB),hl]
l_3099:
	jbsr	l_432a                            	| [$3099: call $432A]
	jbsr	l_618a                            	| [$309c: call $618A]
	move.w	#0x0020,d3                      	| [$309f: ld   de,$0020] 32
	add.w	d3,a2                            	| [$30a2: add  ix,de]
	LOAD_POINTER	ram_pointer_85BF(a6),a0             	| [$30a4: ld   hl,($85BF)]
 
	move.w	#0x0005,d3                      	| [$30a7: ld   de,$0005] 5
	add.w	d3,a0                            	| [$30aa: add  hl,de]
 	add.w	d3,a0                            	| [$30ab: add  hl,de]
	* next "object" (made of 2 sprites)
	STORE_POINTER	a0,ram_pointer_85BF(a6)            	| [$30ac: ld   ($85BF),hl]
	LOAD_POINTER	ram_pointer_85BD(a6),a0             	| [$30af: ld   hl,($85BD)]

	add.w	d3,a0                            	| [$30b2: add  hl,de]
	STORE_POINTER	a0,ram_pointer_85BD(a6)            	| [$30b3: ld   ($85BD),hl]
	LOAD_POINTER	ram_pointer_85BB(a6),a0             	| [$30b6: ld   hl,($85BB)]

	add.w	d3,a0                            	| [$30b9: add  hl,de]
	STORE_POINTER	a0,ram_pointer_85BB(a6)            	| [$30ba: ld   ($85BB),hl]
	move.b	current_enemy_index_85BA(a6),d0 	| [$30bd: ld   a,(current_enemy_index_85BA)]
	addq.b	#1,d0                           	| [$30c0: inc  a]
	move.b	d0,current_enemy_index_85BA(a6) 	| [$30c1: ld   (current_enemy_index_85BA),a]
	cmp.b	#0x05,d0                         	| [$30c4: cp   $05]
	jne	l_3099                             	| [$30c6: jp   nz,$3099]
	rts                                    	| [$30c9: ret]

l_30ca:
	clr.b	d0                               	| [$30ca: xor  a]
	move.b	d0,shoot_gun_requested_823A(a6) 	| [$30cb: ld   (shoot_gun_requested_823A),a]
	rts                                    	| [$30ce: ret]

handle_player_controls_30CF:
	move.b	game_in_play_flag_823B(a6),d0   	| [$30cf: ld   a,(game_in_play_flag_823B)]
	                             	| [$30d2: or   a]
	jne	demo_controls_310C                             	| [$30d3: jp   nz,$310C]
	move.b	copy_of_dip_switches_1_824E(a6),d0	| [$30d6: ld   a,(copy_of_dip_switches_1_824E)]
	rol.b	#2,d0                            	| [$30d9: rlca] * 2
	and.b	#0x01,d0                         	| [$30db: and  $01]
	move.b	d0,d1                           	| [$30dd: ld   b,a]
	                  	| [$30de: ld   a,($81D8)]
	      	| [$30e1: xor  b]
	    	| [$30e2: jr   nz,$30E9]
	jbsr	osd_read_inputs_1                 	| [$30e4: ld   a,(input_1_D408)]
                             	| [$30e7: jr   $30EC]
* probably cocktail mode: read input 2

               	| [$30e9: ld   a,(input_2_D409)]

* up: 8, down/crouch: 4, fire: $10, jump: $20, left: 1, right: 2, else 0
carry_on_with_controls_30ec:
	not.b	d0                               	| [$30ec: cpl]
	move.b	d0,d1                           	| [$30ed: ld   b,a]
	and.b	#0x0F,d0                         	| [$30ee: and  $0F]
	move.b	d0,d2                           	| [$30f0: ld   c,a] keep only directions in c
	move.b	d1,d0                           	| [$30f1: ld   a,b]
	and.b	#0x20,d0                         	| [$30f2: and  $20]
	ror.b	#1,d0                            	| [$30f4: rrca]
	move.b	d0,d3                           	| [$30f5: ld   d,a]
	move.b	d1,d0                           	| [$30f6: ld   a,b]
	and.b	#0x10,d0                         	| [$30f7: and  $10]
	rol.b	#1,d0                            	| [$30f9: rlca]
	or.b	d3,d0                             	| [$30fa: or   d]
	move.b	d0,d1                           	| [$30fb: ld   b,a]
	move.b	shoot_gun_requested_823A(a6),d0 	| [$30fc: ld   a,(shoot_gun_requested_823A)]
	not.b	d0                               	| [$30ff: cpl]
	and.b	d1,d0                            	| [$3100: and  b]
	and.b	#0x30,d0                         	| [$3101: and  $30]
	or.b	d2,d0                             	| [$3103: or   c]
* $10: jump, 1 move left, 2 move right... see above
	move.b	d0,player_move_direction_8527(a6)	| [$3104: ld   (player_move_direction_8527),a]
	move.b	d1,d0                           	| [$3107: ld   a,b]
	move.b	d0,shoot_gun_requested_823A(a6) 	| [$3108: ld   (shoot_gun_requested_823A),a]
	rts                                    	| [$310b: ret]


demo_controls_310C:
	jbsr	get_recorded_input             	| [$310c: ld   hl,($823C)]
	                          	| [$310f: dec  a]
	                         	| [$3110: jr   z,$311C]

	move.b	(a0),d0                         	| [$3112: ld   a,(hl)]
	jne		0f
	* end of sequence. The original game "wraps" to ROM address 0
	* (in case of "NO HIT" mode). Here I prefer to start with first
	* demo sequence again so I don't need to include a copy of the ROM
	* just for that
	moveq	#-1,d5
0:
	addq.w	#1,d5                           	          | [$3113: inc  hl]
	* in "no hit" mode, it ends up reading start of ROM too									   
	                           	| [$3114: res  7,h]  ensure it remains in ROM range even if it reads garbage
	STORE_WORD	d5,recorded_input_rom_address_823C(a6)            	| [$3116: ld   ($823C),hl]
	jra	carry_on_with_controls_30ec                             	| [$3119: jp   $30EC]
l_311c:
	* this is not reachable, as the routine is only called if game in play
	* so with D0==1 or D0==2 (demo)
	* it is probably a leftover of input recording code
	| [$311c: ld   a,(input_1_D408)]
	| [$311f: ld   (hl),a]
	| [$3120: inc  hl]
           	| [$3121: ld   ($823C),hl]

| [$3124: jp   $30EC]

l_3127:
	move.b	player_structure_851A+9(a6),d0  	| [$3127: ld   a,(player_structure_851A+9)]
	cmp.b	#0x07,d0                         	| [$312a: cp   $07]
	beq.b	0f                               	| [...]
	rts                                    	| [$312c: ret  nz] [...]
0:
	move.b	l_8520(a6),d0                   	| [$312d: ld   a,($8520)]
	cmp.b	#0x03,d0                         	| [$3130: cp   $03]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3132: ret  nc] [...]
0:
	lea	player_structure_851A(a6),a2       	| [$3133: ld   ix,player_structure_851A]
	move.b	(character_x_00,a2),d3          	| [$3137: ld   d,(ix+character_x_00)]
	move.b	(character_x_right_01,a2),d4    	| [$313a: ld   e,(ix+character_x_right_01)]
	move.b	(0x15,a2),d5                    	| [$313d: ld   h,(ix+$15)]
	move.b	(0x16,a2),d6                    	| [$3140: ld   l,(ix+$16)]
	clr.b	d0                               	| [$3143: xor  a]
	move.b	d0,l_8528(a6)                   	| [$3144: ld   ($8528),a]
	lea	enemy_1_853A(a6),a2                	| [$3147: ld   ix,enemy_1_853A]
	jbsr	unknown_enemy_handling_3164       	| [$314b: call unknown_enemy_handling_3164]
	lea	enemy_2_855A(a6),a2                	| [$314e: ld   ix,enemy_2_855A]
	jbsr	unknown_enemy_handling_3164       	| [$3152: call unknown_enemy_handling_3164]
	lea	enemy_3_857A(a6),a2                	| [$3155: ld   ix,enemy_3_857A]
	jbsr	unknown_enemy_handling_3164       	| [$3159: call unknown_enemy_handling_3164]
	lea	enemy_4_859A(a6),a2                	| [$315c: ld   ix,enemy_4_859A]
	jbsr	unknown_enemy_handling_3164       	| [$3160: call unknown_enemy_handling_3164]
	rts                                    	| [$3163: ret]

unknown_enemy_handling_3164:
	move.b	(enemy_state_09,a2),d0                    	| [$3164: ld   a,(ix+$09)]
	cmp.b	#0x05,d0                         	| [$3167: cp   $05]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3169: ret  nc] [...]
0:
	move.b	(character_situation_06,a2),d0  	| [$316a: ld   a,(ix+character_situation_06)]
	cmp.b	#CS_FALLING_03,d0                	| [$316d: cp   CS_FALLING_03]
	bcs.b	0f                               	| [...]
	rts                                    	| [$316f: ret  nc] [...]
0:
	move.b	(0x15,a2),d0                    	| [$3170: ld   a,(ix+$15)]
	cmp.b	d6,d0                            	| [$3173: cp   l]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3174: ret  c] [...]
0:
	move.b	(0x16,a2),d0                    	| [$3175: ld   a,(ix+$16)]
	cmp.b	d5,d0                            	| [$3178: cp   h]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3179: ret  nc] [...]
0:
	move.b	(character_x_00,a2),d0          	| [$317a: ld   a,(ix+character_x_00)]
	cmp.b	d4,d0                            	| [$317d: cp   e]
	bcs.b	0f                               	| [...]
	rts                                    	| [$317e: ret  nc] [...]
0:
	move.b	(character_x_right_01,a2),d0    	| [$317f: ld   a,(ix+character_x_right_01)]
	cmp.b	d3,d0                            	| [$3182: cp   d]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3183: ret  c] [...]
0:
	clr.b	(0x0a,a2)                        	| [$3184: ld   (ix+$0a),$00]
	move.b	#0x05,(enemy_state_09,a2)                 	| [$3188: ld   (ix+$09),$05]
	jbsr	l_56b9                            	| [$318c: call $56B9]
	move.b	#0xCB,d0                        	| [$318f: ld   a,$CB] jumped/killed enemy
	jbsr	play_sound_3656                   	| [$3191: call play_sound_3656]
	clr.b	d0                               	| [$3194: xor  a]
	move.b	d0,l_82EC(a6)                   	| [$3195: ld   ($82EC),a]
	move.b	game_in_play_flag_823B(a6),d0   	| [$3198: ld   a,(game_in_play_flag_823B)]
	                            	| [$319b: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$319c: ret  nz] [...]
0:

	move.l	a0,-(sp)                        	| [$319d: push hl]
	lea	l_85C2(a6),a0                      	| [$319e: ld   hl,$85C2]
	addq.w	#2,a0                           	| [$31a1: inc  hl] * 2
	clr.b	d0                               	| [$31a3: xor  a]
	or.b	(a0),d0                           	| [$31a4: or   (hl)]
	move.l	(sp)+,a0                        	| [$31a5: pop  hl]
	move.b	d0,l_8642(a6)                   	| [$31a6: ld   ($8642),a]
	jne	make_building_dark_3265                             	| [$31a9: jp   nz,$3265]
	rts                                    	| [$31ac: ret]

l_31ad:
	st.b	d0                                	| [$31ad: ld   a,$FF]
	move.b	d0,lamp_shot_state_8240(a6)     	| [$31af: ld   (lamp_shot_state_8240),a]
	move.b	d0,l_8164(a6)                   	| [$31b2: ld   ($8164),a]
	clr.b	d0                               	| [$31b5: xor  a]
	move.b	d0,building_is_dark_8242(a6)                   	| [$31b6: ld   ($8242),a]
	rts                                    	| [$31b9: ret]

update_shot_lamp_31BA:
	move.b	lamp_shot_state_8240(a6),d0     	| [$31ba: ld   a,(lamp_shot_state_8240)]
	addq.b	#1,d0                           	| [$31bd: inc  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$31be: ret  z] [...]
0:
	move.b	d0,lamp_shot_state_8240(a6)     	| [$31bf: ld   (lamp_shot_state_8240),a]
	subq.b	#1,d0                           	| [$31c2: dec  a]
	jeq	l_31e1                             	| [$31c3: jp   z,$31E1]
	cmp.b	#0x03,d0                         	| [$31c6: cp   $03]
	jcs	l_3207                             	| [$31c8: jp   c,$3207]
	jeq	change_to_falling_lamp_sprite_3214                             	| [$31cb: jp   z,$3214]
	cmp.b	#0x15,d0                         	| [$31ce: cp   $15]
	jcs	l_3225                             	| [$31d0: jp   c,$3225]
	cmp.b	#0x18,d0                         	| [$31d3: cp   $18]
	jcs	l_3251                             	| [$31d5: jp   c,$3251]
	jeq	make_building_dark_3265                             	| [$31d8: jp   z,$3265]
	cmp.b	#0x5A,d0                         	| [$31db: cp   $5A]
	jeq	restore_building_lights_3292                             	| [$31dd: jp   z,$3292]
	rts                                    	| [$31e0: ret]
l_31e1:
	move.b	#0x24,d0                        	| [$31e1: ld   a,$24]
	move.b	d0,l_823F(a6)                   	| [$31e3: ld   ($823F),a]
	jbsr	l_333a                            	| [$31e6: call $333A]
	jbsr	l_3355                            	| [$31e9: call $3355]
	lea	l_8164(a6),a0                      	| [$31ec: ld   hl,$8164]
	clr.b	(a0)+                             	| [$31ef: ld   (hl),$00]
	                           	| [$31f1: inc  hl]
	move.b	falling_lamp_x_8241(a6),d0      	| [$31f2: ld   a,(falling_lamp_x_8241)]
	subq.b	#0x04,d0                        	| [$31f5: sub  $04]
	move.b	d0,(a0)+                         	| [$31f7: ld   (hl),a]
	                           	| [$31f8: inc  hl]
	jbsr	l_337d                            	| [$31f9: call $337D]
	addq.w	#1,a0                           	| [$31fc: inc  hl]
	clr.b	(a0)+                             	| [$31fd: ld   (hl),$00]
	                           	                | [$31ff: inc  hl]
	move.b	#0x7F,(a0)                      	| [$3200: ld   (hl),$7F] exploding lamp
	move.b	#0xC7,d0                        	| [$3202: ld   a,$C7] lamp falling sound
	jra	play_sound_3656                    	| [$3204: jp   play_sound_3656]
l_3207:
	jbsr	protection_crap_0008                            	| [$3207: rst  $08]
	move.b	scroll_speed_8004(a6),d0        	| [$3208: ld   a,(scroll_speed_8004)]
	move.b	d0,d1                           	| [$320b: ld   b,a]
	move.b	l_8166(a6),d0                   	| [$320c: ld   a,($8166)]
	sub.b	d1,d0                            	| [$320f: sub  b]
	move.b	d0,l_8166(a6)                   	| [$3210: ld   ($8166),a]
	rts                                    	| [$3213: ret]

change_to_falling_lamp_sprite_3214:
	lea	l_8166(a6),a0                      	| [$3214: ld   hl,$8166]
	move.b	scroll_speed_8004(a6),d0        	| [$3217: ld   a,(scroll_speed_8004)]
	move.b	d0,d1                           	| [$321a: ld   b,a]
	move.b	(a0),d0                         	| [$321b: ld   a,(hl)]
	sub.b	d1,d0                            	| [$321c: sub  b]
	move.b	d0,(a0)+                         	| [$321d: ld   (hl),a]
	                           	| [$321e: inc  hl]
	move.b	#0x04,(a0)+                      	| [$321f: ld   (hl),$04]
	                           	| [$3221: inc  hl]
	move.b	#0x7E,(a0)                      	| [$3222: ld   (hl),$7E] lamp falling sprite
	rts                                    	| [$3224: ret]
l_3225:
	move.b	l_823F(a6),d0                   	| [$3225: ld   a,($823F)]
	subq.b	#0x02,d0                        	| [$3228: sub  $02]
	move.b	d0,l_823F(a6)                   	| [$322a: ld   ($823F),a]
	lea	l_8166(a6),a0                      	| [$322d: ld   hl,$8166]
	move.b	scroll_speed_8004(a6),d0        	| [$3230: ld   a,(scroll_speed_8004)]
	move.b	d0,d1                           	| [$3233: ld   b,a]
	move.b	(a0),d0                         	| [$3234: ld   a,(hl)]
	sub.b	d1,d0                            	| [$3235: sub  b]
	subq.b	#0x02,d0                        	| [$3236: sub  $02]
	move.b	d0,(a0)+                         	| [$3238: ld   (hl),a]
	                           	                | [$3239: inc  hl]
	move.b	lamp_shot_state_8240(a6),d0     	| [$323a: ld   a,(lamp_shot_state_8240)]
	roxr.b	#1,d0                           	| [$323d: rra]
 	and.b	#0x01,d0                         	| [$323e: and  $01]
	addq.b	#0x04,d0                        	| [$3240: add  a,$04]
	move.b	d0,(a0)                         	| [$3242: ld   (hl),a]
	jbsr	enemies_vs_lamp_collision_32CC    	| [$3243: call enemies_vs_lamp_collision_32CC]
	move.b	l_8243(a6),d0                   	| [$3246: ld   a,($8243)]
	                             	| [$3249: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$324a: ret  z] [...]
0:
	move.b	#0x15,d0                        	| [$324b: ld   a,$15]
	move.b	d0,lamp_shot_state_8240(a6)     	| [$324d: ld   (lamp_shot_state_8240),a]
	rts                                    	| [$3250: ret]
l_3251:
	lea	l_8166(a6),a0                      	| [$3251: ld   hl,$8166]
	move.b	scroll_speed_8004(a6),d0        	| [$3254: ld   a,(scroll_speed_8004)]
	move.b	d0,d1                           	| [$3257: ld   b,a]
	move.b	(a0),d0                         	| [$3258: ld   a,(hl)]
	sub.b	d1,d0                            	| [$3259: sub  b]
	move.b	d0,(a0)+                         	| [$325a: ld   (hl),a]
	                           	| [$325b: inc  hl]
	move.b	lamp_shot_state_8240(a6),d0     	| [$325c: ld   a,(lamp_shot_state_8240)]
	and.b	#0x01,d0                         	| [$325f: and  $01]
	addq.b	#0x04,d0                        	| [$3261: add  a,$04]
	move.b	d0,(a0)                         	| [$3263: ld   (hl),a]
	rts                                    	| [$3264: ret]
	
make_building_dark_3265:
	st.b	d0                                	| [$3265: ld   a,$FF]
	move.b	d0,l_8164(a6)                   	| [$3267: ld   ($8164),a]
	moveq	#1,d0                        	| [$326a: ld   a,$30]
	jbsr	osd_set_color_bank               	| [$326c: ld   (colorbank_D506),a]
											| [$326f: ld   a,$22]
											| [$3271: ld   (colorbank_D507),a]
	move.b	#0x01,d0                        	| [$3274: ld   a,$01]
	move.b	d0,building_is_dark_8242(a6)                   	| [$3276: ld   ($8242),a]
	move.b	game_in_play_flag_823B(a6),d0   	| [$3279: ld   a,(game_in_play_flag_823B)]
												| [$327c: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$327d: ret  nz] [...]
0:

	move.l	a2,-(sp)                        	| [$327e: push ix]
	lea	l_862B(a6),a2                      	| [$3280: ld   ix,$862B]
	move.b	(0x17,a2),d0                    	| [$3284: ld   a,(ix+$17)] hidden 8642 access!
	                               	| [$3287: and  a]
	movem.l	(sp)+,a2                        	| [$3288: pop  ix]
	bne.b	0f                               	| [...]
	rts                                    	| [$328a: ret  z] [...]
0:
	* ouch! this is going to make game much harder! TODO check this
	* very likely a protection check
	illegal
	move.b	pseudo_random_seed_81D6(a6),d0  	| [$328b: ld   a,(pseudo_random_seed_81D6)]
	move.b	d0,level_timer_16bit_msb_8232(a6)	| [$328e: ld   (level_timer_16bit_msb_8232),a]
	rts                                    	| [$3291: ret]

restore_building_lights_3292:
	jbsr	l_31ad                            	| [$3292: call $31AD]
	moveq	#0,d0                        	| [$3295: ld   a,$10]
	jbsr	osd_set_color_bank               	| [$3297: ld   (colorbank_D506),a]
											| [$329a: ld   a,$32]
											| [$329c: ld   (colorbank_D507),a]
	move.b	game_in_play_flag_823B(a6),d0   	| [$329f: ld   a,(game_in_play_flag_823B)]
	                             	| [$32a2: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$32a3: ret  nz] [...]
0:

	move.l	a3,-(sp)                        	| [$32a4: push iy]
	lea	l_858F(a6),a3                      	| [$32a6: ld   iy,$858F] hidden access for l_85C4
	move.b	(0x35,a3),d0                    	| [$32aa: ld   a,(iy+$35)]
	                               	| [$32ad: and  a]
	movem.l	(sp)+,a3                        	| [$32ae: pop  iy]
	bne.b	0f                               	| [...]
 	rts                                    	| [$32b0: ret  z] [...]
0:
	* ouch! this is going to make game much harder! TODO check this
	* possibly a protection check, there is another one like this above
	* or this is to make demo super hard?
	illegal
	move.b	pseudo_random_seed_81D6(a6),d0  	| [$32b1: ld   a,(pseudo_random_seed_81D6)]
	move.b	d0,level_timer_16bit_msb_8232(a6)	| [$32b4: ld   (level_timer_16bit_msb_8232),a]
	clr.b	d0                               	| [$32b7: xor  a]

	move.l	a2,-(sp)                        	| [$32b8: push ix]
	lea	l_85A4(a6),a2                      	| [$32ba: ld   ix,$85A4]
	move.b	d0,(0x20,a2)                    	| [$32be: ld   (ix+$20),a] 85C4
	lea	l_8244(a6),a2                      	| [$32c1: ld   ix,$8244]
	bset.b	#2,(0x0a,a2)                    	| [$32c5: set  2,(ix+$0a)] 824E set free play!!
	move.l	(sp)+,a2                        	| [$32c9: pop  ix]
	rts                                    	| [$32cb: ret]

enemies_vs_lamp_collision_32CC:
	clr.b	d0                               	| [$32cc: xor  a]
	move.b	d0,l_8243(a6)                   	| [$32cd: ld   ($8243),a]
	lea	enemy_1_853A(a6),a2                	| [$32d0: ld   ix,enemy_1_853A]
	jbsr	enemy_vs_lamp_collision_32ED      	| [$32d4: call enemy_vs_lamp_collision_32ED]
	lea	enemy_2_855A(a6),a2                	| [$32d7: ld   ix,enemy_2_855A]
	jbsr	enemy_vs_lamp_collision_32ED      	| [$32db: call enemy_vs_lamp_collision_32ED]
	lea	enemy_3_857A(a6),a2                	| [$32de: ld   ix,enemy_3_857A]
	jbsr	enemy_vs_lamp_collision_32ED      	| [$32e2: call enemy_vs_lamp_collision_32ED]
	lea	enemy_4_859A(a6),a2                	| [$32e5: ld   ix,enemy_4_859A]
	jbsr	enemy_vs_lamp_collision_32ED      	| [$32e9: call enemy_vs_lamp_collision_32ED]
	rts                                    	| [$32ec: ret]

enemy_vs_lamp_collision_32ED:
	move.b	(enemy_state_09,a2),d0          	| [$32ed: ld   a,(ix+enemy_state_09)]
	addq.b	#1,d0                           	| [$32f0: inc  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$32f1: ret  z] $FF: inactive [...]
0:
	move.b	(character_situation_06,a2),d0  	| [$32f2: ld   a,(ix+character_situation_06)]
	                             	| [$32f5: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$32f6: ret  nz] [...]
0:
* character is on ground
	move.b	l_823E(a6),d0                   	| [$32f7: ld   a,($823E)]
	cmp.b	(0x07,a2),d0                     	| [$32fa: cp   (ix+$07)]
	beq.b	0f                               	| [...]
	rts                                    	| [$32fd: ret  nz] [...]
0:
	move.b	l_823F(a6),d0                   	| [$32fe: ld   a,($823F)]
	cmp.b	(character_y_offset_down_02,a2),d0	| [$3301: cp   (ix+character_y_offset_down_02)]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3304: ret  nc] [...]
0:
	move.b	falling_lamp_x_8241(a6),d0      	| [$3305: ld   a,(falling_lamp_x_8241)]
	cmp.b	(character_x_00,a2),d0           	| [$3308: cp   (ix+character_x_00)]
	jcs	l_3315                             	| [$330b: jp   c,$3315]
	cmp.b	(character_x_right_01,a2),d0     	| [$330e: cp   (ix+character_x_right_01)]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3311: ret  nc] [...]
0:
	jra	enemy_hit_by_lamp_331b                             	| [$3312: jp   $331B]
l_3315:
	add.b	#0x08,d0                         	| [$3315: add  a,$08]
	cmp.b	(character_x_00,a2),d0           	| [$3317: cp   (ix+character_x_00)]
	bcc.b	0f                               	| [...]
	rts                                    	| [$331a: ret  c] [...]
0:
* enemy hit by falling lamp
enemy_hit_by_lamp_331b:
	move.b	d0,l_8243(a6)                   	| [$331b: ld   ($8243),a]
	move.b	(enemy_state_09,a2),d0          	| [$331e: ld   a,(ix+enemy_state_09)]
	cmp.b	#0x05,d0                         	| [$3321: cp   $05]
	bne.b	0f                               	| [...]
	rts                                      	| [$3323: ret  z] already hit [...]
0:
	move.b	#0x05,(enemy_state_09,a2)       	| [$3324: ld   (ix+enemy_state_09),$05]
	clr.b	(0x0a,a2)                        	| [$3328: ld   (ix+$0a),$00]
	jbsr	l_56de                            	| [$332c: call $56DE]
	move.b	#0xCB,d0                        	| [$332f: ld   a,$CB]
	jbsr	play_sound_3656                   	| [$3331: call play_sound_3656]
	clr.b	d0                               	| [$3334: xor  a]
	move.b	d0,l_82EC(a6)                   	| [$3335: ld   ($82EC),a]
	addq.w	#4,a7	                        	| [$3338: pop  af] skip caller (lamp test for other enemies)
	rts                                    	    | [$3339: ret]     and return to caller's caller

l_333a:
	move.b	l_823E(a6),d0                   	| [$333a: ld   a,($823E)]
	sub.b	#0x08,d0                         	| [$333d: sub  $08]
	moveq   #0,d3                               	| [$3340: ld   d,$00]
	move.b	d0,d3                           	| [$333f: ld   e,a]
	lea	l_81DA(a6),a0                      	| [$3342: ld   hl,$81DA]
	add.w	d3,a0                            	| [$3345: add  hl,de]
	move.b	falling_lamp_x_8241(a6),d0      	| [$3346: ld   a,(falling_lamp_x_8241)]
	move.b	#0x02,d1                        	| [$3349: ld   b,$02]
	cmp.b	#0x80,d0                         	| [$334b: cp   $80]
	jcc	l_3351                             	| [$334d: jp   nc,$3351]
	subq.b	#1,d1                           	| [$3350: dec  b]
l_3351:
	move.b	d1,d0                           	| [$3351: ld   a,b]
	and.b	(a0),d0                          	| [$3352: and  (hl)]
	move.b	d0,(a0)                         	| [$3353: ld   (hl),a]
	rts                                    	| [$3354: ret]
l_3355:
	move.b	l_823E(a6),d0                   	| [$3355: ld   a,($823E)]
	cmp.b	#0x10,d0                         	| [$3358: cp   $10]
	jcc	l_3360                             	| [$335a: jp   nc,$3360]
	cmp.b	#0x0B,d0                         	| [$335d: cp   $0B]
	bcs.b	0f                               	| [...]
	rts                                    	| [$335f: ret  nc] [...]
0:
l_3360:
	jbsr	l_5633                            	| [$3360: call $5633]
	move.l	#0xFF69,d5                          	| [$3363: ld   hl,$FF69]
	move.b	falling_lamp_x_8241(a6),d0      	| [$3366: ld   a,(falling_lamp_x_8241)]
	cmp.b	#0x80,d0                         	| [$3369: cp   $80]
	jcs	l_3371                             	| [$336b: jp   c,$3371]
	move.w	#0xFF75,d5                          	| [$336e: ld   hl,$FF75]
l_3371:
	add.w	d3,d5                            	| [$3371: add  hl,de]
	                           	| [$3372: ld   a,h]
	and.w	#0x03FF,d5                         	| [$3373: and  $03]
	                           	| [$3375: ld   h,a]
	lea	videoram_layer_2_C800(a6),a1       	| [$3376: ld   de,videoram_layer_2_C800]
	add.l	a1,d5                            	| [$3379: add  hl,de]
	move.l	d5,a0
	* break the lamp (change to broken lamp tile)
	move.b	#0x97,d0                      	| [$337a: ld   (hl),$97]
	jbsr	osd_w_videoram
	rts                                    	| [$337c: ret]

l_337d:
	move.l	a0,-(sp)                        	| [$337d: push hl]
	move.b	l_823F(a6),d0                   	| [$337e: ld   a,($823F)]
	move.b	d0,d3                           	| [$3381: ld   d,a]
	clr.b	d2                               	| [$3382: ld   c,$00]
	move.b	l_823E(a6),d0                   	| [$3384: ld   a,($823E)]
	move.b	d0,d1                           	| [$3387: ld   b,a]
	jbsr	compute_delta_height_1e6c           | [$3388: call $1E6C]
	move.b	d6,d0                           	| [$338b: ld   a,l]
	move.l	(sp)+,a0                        	| [$338c: pop  hl]
	move.b	d0,(a0)                         	| [$338d: ld   (hl),a]
	rts                                    	| [$338e: ret]

bootup_338f:
	jbsr	osd_disable_interrupts  | di
											| [$3390: ld   sp,mcu_read_8800] set stack pointer

	*im   1			| set interrupt mode
	lea	l_8000(a6),a0                      	   | [$3395: ld   hl,$8000] erase RAM
	clr.b	d0                               	| [$3398: xor  a]
	move.w	#0x1FF,d5
l_3399:
	clr.l	(a0)+                         	| [$3399: ld   (hl),a]
	                           	| [$339a: inc  hl]
	                           	| [$339b: bit  3,h]
	dbf	d5,l_3399                             	| [$339d: jr   z,$3399] until 8800
	clr.b	coin_counter_lock_82EA(a6)   	| [$339f: ld   (coin_counter_lock_82EA),a]
	jbsr	read_dip_switches_3417             	| [$33a2: call $3417]
	lea	table_171E,a0                          	| [$33a5: ld   hl,table_171E]
	lea	l_81C9(a6),a1                      	    | [$33a8: ld   de,$81C9]
	move.w	#0x0005,d1                      	| [$33ab: ld   bc,$0005] 5
	jbsr	ldir                              	| [$33ae: ldir]
	clr.b	d0                               	| [$33b0: xor  a]
	move.b	d0,sync_flag_80AB(a6)                   	| [$33b1: ld   ($80AB),a]
	move.b	d0,game_state_80AC(a6)          	| [$33b4: ld   (game_state_80AC),a]
	st.b	d0                                	| [$33b7: ld   a,$FF]
	move.b	d0,l_8080(a6)                   	| [$33b9: ld   ($8080),a]
	jbsr	hardware_test_779F                	| [$33bc: call hardware_test_779F]
												| [$33bf: ld   hl,$34F9]
	move.w	#0x000A,d1                      	| [$33c2: ld   bc,$000A] 10
	jbsr	osd_enable_interrupts				| ei
* bootleg: below code NOPed out
									| [$33c6: jp   nz,bad_hardware_34C5]
	moveq	#0,d0	| original game value at that point
* bootleg: end of NOPed code
												| [$33c9: call rom_checksum_34AC]
	move.b	d0,l_8080(a6)                   	| [$33cc: ld   ($8080),a]
	move.b	d0,l_85C6(a6)                   	| [$33cf: ld   ($85C6),a]
l_33d2:
	move.b	copy_of_dip_switches_1_824E(a6),d0	| [$33d2: ld   a,(copy_of_dip_switches_1_824E)]
	btst.b	#2,d0                           	| [$33d5: bit  2,a] free play ?
	jne	l_33e4                             	| [$33d7: jr   nz,$33E4] yes? skip title sequence
	jbsr	title_and_insert_coin_sequence_715F                            	| [$33d9: call $715F]
	move.b	nb_credits_80A2(a6),d0          	| [$33dc: ld   a,(nb_credits_80A2)]
	                             	| [$33df: or   a]
	jeq	l_3401                             	| [$33e0: jr   z,$3401]
	                             	| [$33e2: jr   $33E4]
l_33e4:
	jbsr	l_3529                            	| [$33e4: call $3529]
	move.b	#0xC0,d0                        	| [$33e7: ld   a,$C0]
	jbsr	play_sound             	| [$33e9: ld   (sound_latch_D50B),a] no sound?
	jbsr	l_364d                            	| [$33ec: call $364D]
	move.b	copy_of_dip_switches_1_824E(a6),d0	| [$33ef: ld   a,(copy_of_dip_switches_1_824E)]
	btst.b	#2,d0                           	| [$33f2: bit  2,a]
	jne	l_33e4                             	| [$33f4: jr   nz,$33E4]
	move.b	nb_credits_80A2(a6),d0          	| [$33f6: ld   a,(nb_credits_80A2)]
	                             	| [$33f9: or   a]
	jne	l_33e4                             	| [$33fa: jr   nz,$33E4]
	move.b	d0,l_8251(a6)                   	| [$33fc: ld   ($8251),a]
	jra	l_33d2                             	| [$33ff: jr   $33D2]
l_3401:
	jbsr	l_111b                            	| [$3401: call $111B]
	move.b	nb_credits_80A2(a6),d0          	| [$3404: ld   a,(nb_credits_80A2)]
	                             	| [$3407: or   a]
	jne	l_33e4                             	| [$3408: jr   nz,$33E4]
	lea	l_8251(a6),a0                      	| [$340a: ld   hl,$8251]
	addq.b	#1,(a0)                         	| [$340d: inc  (hl)]
	move.b	(a0),d0                         	| [$340e: ld   a,(hl)]
	cmp.b	#0x03,d0                         	| [$340f: cp   $03]
	jcs	l_33d2                             	| [$3411: jr   c,$33D2]
	clr.b	(a0)                             	| [$3413: ld   (hl),$00]
	jra	l_33d2                             	| [$3415: jr   $33D2]

read_dip_switches_3417:
	jbsr	cache_dip_switches_3503           	| [$3417: call cache_dip_switches_3503]
	lea	highest_score_8350(a6),a0                      	| [$341a: ld   hl,$8350]
	clr.b	d0                               	| [$341d: xor  a]
	move.b	d0,(a0)+                         	| [$341e: ld   (hl),a]
	                           	| [$341f: inc  hl]
	move.b	d0,(a0)+                         	| [$3420: ld   (hl),a]
	                           	| [$3421: inc  hl]
	move.b	#0x01,(a0)                      	| [$3422: ld   (hl),$01]
	lea	current_player_score_834D(a6),a0                      	| [$3424: ld   hl,$834D]
	lea	l_8254(a6),a1                      	| [$3427: ld   de,$8254]
	move.b	#0x03,d1                        	| [$342a: ld   b,$03]
l_342c:
	move.b	d0,(a0)+                         	| [$342c: ld   (hl),a]
	move.b	d0,(a1)+                         	| [$342d: ld   (de),a]
											| [$342e: inc  hl]
											| [$342f: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_342c                             	| [$3430: djnz $342C]
	jbsr	read_dip_switches_0fb1                            	| [$3432: call $0FB1]
	move.b	#0x01,d0                        	| [$3435: ld   a,$01]
	move.b	d0,number_of_players_8235(a6)                   	| [$3437: ld   ($8235),a]
	clr.b	d0                               	| [$343a: xor  a]
	move.b	d0,copy_of_port_in2_824B(a6)                   	| [$343b: ld   ($824B),a]
	move.b	d0,copy_of_service_mode_824C(a6)	| [$343e: ld   (copy_of_service_mode_824C),a]
	move.b	#0x03,d1                        	| [$3441: ld   b,$03]
	move.b	copy_of_dip_switches_3_8250(a6),d0	| [$3443: ld   a,(copy_of_dip_switches_3_8250)]
	btst.b	#7,d0                           	| [$3446: bit  7,a]
	jeq	l_344c                             	| [$3448: jr   z,$344C]
	move.b	#0x23,d1                        	| [$344a: ld   b,$23]
l_344c:
	move.b	d1,d0                           	| [$344c: ld   a,b]
	move.b	d0,bank_switch_d50e             	| [$344d: ld   (bank_switch_d50e),a]
	move.b	d0,bank_switch_copy_824D(a6)    	| [$3450: ld   (bank_switch_copy_824D),a]
	move.b	#0xC0,d0                        	| [$3453: ld   a,$C0]
	jbsr	play_sound             	| [$3455: ld   (sound_latch_D50B),a]
	jbsr	l_364d                            	| [$3458: call $364D]
	move.b	copy_of_dip_switches_1_824E(a6),d0	| [$345b: ld   a,(copy_of_dip_switches_1_824E)]
	ror.b	#3,d0                            	| [$345e: rrca] * 3
	and.b	#0x03,d0                         	| [$3461: and  $03]
	addq.b	#0x02,d0                        	| [$3463: add  a,$02]
	move.b	d0,dsw_copy_nb_lives_per_play_8252(a6)	| [$3465: ld   (dsw_copy_nb_lives_per_play_8252),a]
	move.b	copy_of_dip_switches_1_824E(a6),d0	| [$3468: ld   a,(copy_of_dip_switches_1_824E)]
	and.b	#0x03,d0                         	| [$346b: and  $03]
	addq.b	#1,d0                           	| [$346d: inc  a]
	lea	table_34A0-3,a0                    	| [$346e: ld   hl,table_34A0-3]
l_3471:
	addq.w	#3,a0                           	| [$3471: inc  hl]
											| [$3472: inc  hl] * 2
	subq.b	#1,d0                           	| [$3474: dec  a]
	jne	l_3471                             	| [$3475: jr   nz,$3471]
	lea	l_8370(a6),a1                      	| [$3477: ld   de,$8370]
	move.w	#0x0003,d1                      	| [$347a: ld   bc,$0003] 3
	jbsr	ldir                              	| [$347d: ldir]
	move.b	#0xDD,d0                        	| [$347f: ld   a,$DD]
	move.b	d0,l_8245(a6)                   	| [$3481: ld   ($8245),a]

	* install some dynamic code in RAM!
	lea	dynamic_ram_code_8246(a6),a0                      	| [$3484: ld   hl,$8246]
	move.b	d0,(a0)+                         	| [$3487: ld   (hl),a]
	                           	| [$3488: inc  hl]
	move.b	#0xE9,d0                        	| [$3489: ld   a,$E9]
	move.b	d0,(a0)                         	| [$348b: ld   (hl),a]

	move.b	#0x2F,d1                          	| [$348c: ld   bc,$2F1F]  ROM address 2F1F
	move.b	#0x1F,d2                          	| [$348c: ld   bc,$2F1F]
	lea	dynamic_ram_code_argument_8248(a6),a0                      	| [$348f: ld   hl,$8248]
	move.b	d2,(a0)+                         	| [$3492: ld   (hl),c]
	                           	| [$3493: inc  hl]
	move.b	d1,(a0)                         	| [$3494: ld   (hl),b]
	lea	l_8700(a6),a0                      	| [$3495: ld   hl,$8700]
	move.b	#0xA0,d1                        	| [$3498: ld   b,$A0]
	clr.b	d0                               	| [$349a: xor  a]
l_349b:
	move.b	d0,(a0)+                         	| [$349b: ld   (hl),a]
	                           	| [$349c: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_349b                             	| [$349d: djnz $349B]
	rts                                    	| [$349f: ret]

table_34A0:
	.byte	0x00
	.byte	0x00
	.byte	0x01,0x00,0x50
	.byte	0x01,0x00,0x00
	.byte	0x02
	.byte	0x00
	.byte	0x50
	.byte	0x02
	.align	2

	| [$34ac: nop]
  	| [$34ad: ld   b,$00]
 	| [$34af: ld   h,b]
 	| [$34b0: ld   l,b]


 	| [$34b1: ld   a,(hl)]
  	| [$34b2: add  a,b]
 	| [$34b3: ld   b,a]
 	| [$34b4: inc  hl]
 	| [$34b5: ld   a,h]
  	| [$34b6: xor  $80]
 	| [$34b8: ld   (watchdog_d50d),a]
* bootleg: code below patched
	| [$34bb: jr   nz,$34B1]

  	| [$34bd: xor  b]
  	| [...]
	| [$34be: ret  z] [...]

* bootleg: by code below
	| [$34bb: nop]
     	| [$34bc: ld   a,$00]
   	| [$34be: ret]
* bootleg: end patched code
  	| [$34bf: ld   hl,$34E2]
   	| [$34c2: ld   bc,$0017] 23
bad_hardware_34C5:

  	| [$34c5: push hl]
 	| [$34c6: push bc]
  	| [$34c6: push bc]
   	| [$34c7: xor  a]
  	| [$34c8: ld   ($8236),a]
    	| [$34cb: call $71E1]
  	| [$34ce: ld   a,$01]
  	| [$34d0: ld   (menu_or_game_tiles_81D9),a]
    	| [$34d3: call $260C]
  	| [$34d6: pop  bc]
 	| [$34d6: pop  bc]
  	| [$34d7: pop  hl]
 	| [$34d8: ld   de,$C584]
    	| [$34db: ldir]


  	| [$34dd: ld   (watchdog_d50d),a]
 	| [$34e0: jr   $34DD]
   	| [$34e2: rlca]
 	| [$34e3: nop]
* bootleg: code replaced by the code below
								| [$34e4: add  hl,hl]
							
								| [$34e5: inc  e]

								| [$34e6: jr   nc,$34E8]
							
								| [$34e8: rra]
							
								| [$34e9: cpl]
								| [$34ea: jr   nz,$34EC]
								| [...]
								| [$34ec: djnz $34FE] * 2
								| [$34f0: dec  hl]
									| [$34f1: ld   hl,($2717)]

							
							
							
								| [$34f6: dec  hl]
								| [$34f7: nop]
								| [$34f8: ex   af,af']

								| [$34f9: rlca]
								| [$34fa: nop]
								| [$34fb: add  hl,hl]
							
* bootleg: end of original code, replacement code below
l_34e4:
	move.b	#0x81,d0                        	| [$34e4: ld   a,$81]
	move.b	d0,bank_switch_d50e                       	| [$34e6: ld   ($D50E),a]
	jra	l_73de                             	| [$34e9: jp   $73DE]
* entrypoint for aux. bootleg routine where there was room for it
l_34ec:
	move.b	#0x81,d0                        	| [$34ec: ld   a,$81]
	move.b	d0,bank_switch_d50e                       	| [$34ee: ld   ($D50E),a]
	moveq	#0,d1
* lifted from bootleg ROM, when bankswitch is switched to an almost empty part
* except this section
	lea	l_8080(a6),a0                      	| [$7020: ld   hl,$8080]
	move.b	(a0),d1                         	| [$7023: ld   c,(hl)]
	add.w	d1,a0                            	| [$7024: add  hl,bc]

	move.l	a0,-(sp)                        	| [$7025: push hl]
	* disabled this, D0 seems not read
	**lea	l_71FF,a0                          	| [$7026: ld   hl,$71FF]
	**add.w	d1,a0                            	| [$7029: add  hl,bc]
	**move.b	(a0),d0                         	| [$702a: ld   a,(hl)]
	move.w	d0,-(sp)                        	| [$702b: push af]
	                             	| [$702c: jp   $34F4]

	                             	| [$34f1: jp   $7020]
											| [$34f4: ld   a,$01]
											| [$34f6: ld   ($D50E),a]
											| [$34f9: pop  af]
											| [$34fa: pop  hl]
										| [$34fb: ret]
* bootleg: end of replacement code
 	move.b	#0x01,d0                        	| [$34f4: ld   a,$01]
	move.b	d0,bank_switch_d50e                       	| [$34f6: ld   ($D50E),a]
	move.w	(sp)+,d0                        	| [$34f9: pop  af]
	move.l	(sp)+,a0                        	| [$34fa: pop  hl]
	rts                                    	| [$34fb: ret]


| [$3500: ld   h,$00]
| [$3502: ex   af,af']
cache_dip_switches_3503:
	jbsr	osd_read_dsw1            	| [$3503: ld   a,(dip_switches_D40A)]
	not.b	d0                               	| [$3506: cpl] active low?
	move.b	d0,copy_of_dip_switches_1_824E(a6)	| [$3507: ld   (copy_of_dip_switches_1_824E),a] main DSW (lives, skill...)
					| [$350a: ld   hl,$3F07]
						| [$350d: ld   (dip_switches_D40E),hl]
									| [$3510: ld   a,$0E]
									| [$3512: ld   (dip_switches_D40E),a]
	jbsr	osd_read_dsw2            	| [$3515: ld   a,(dip_switches_D40F)]
	not.b	d0                               	| [$3518: cpl]
	move.b	d0,copy_of_dip_switches_2_824F(a6)	| [$3519: ld   (copy_of_dip_switches_2_824F),a] other DSW (coinage...)
	            	| [$351c: ld   a,$0F]
	            	| [$351e: ld   (dip_switches_D40E),a]
	jbsr	osd_read_dsw3            	| [$3521: ld   a,(dip_switches_D40F)]
	not.b	d0                               	| [$3524: cpl]
	move.b	d0,copy_of_dip_switches_3_8250(a6)	| [$3525: ld   (copy_of_dip_switches_3_8250),a] other DSW (coinage...)
	rts                                    	| [$3528: ret]

l_3529:
	jbsr	l_2dee                            	| [$3529: call $2DEE]
	clr.b	d0                               	| [$352c: ld   a,$00]
	move.b	d0,game_in_play_flag_823B(a6)   	| [$352e: ld   (game_in_play_flag_823B),a]
l_3531:
	move.b	l_824A(a6),d0                   	| [$3531: ld   a,($824A)]
	                             	| [$3534: or   a]
	jne	l_3547                             	| [$3535: jr   nz,$3547]
	jbsr	l_76d5                            	| [$3537: call $76D5]
	jbsr	player_arriving_on_roof_anim_4d70          	| [$353a: call $4D70]
	move.b	#0x01,d0                        	| [$353d: ld   a,$01]
	move.b	d0,l_824A(a6)                   	| [$353f: ld   ($824A),a]
	jbsr	start_level_759e                            	| [$3542: call $759E]
	jra	l_3550                             	| [$3545: jr   $3550]
l_3547:
	jbsr	l_76d5                            	| [$3547: call $76D5]
	jbsr	start_music_if_in_game_363f                            	| [$354a: call $363F]
	jbsr	start_next_level_759B             	| [$354d: call start_next_level_759B]
l_3550:
	tst.b	d0                             	| [$3550: or   a]
	jeq	l_3592                             	| [$3551: jr   z,$3592]
	move.b	nb_lives_8234(a6),d0            	| [$3553: ld   a,(nb_lives_8234)]
	                             	| [$3556: or   a]
	jmi	l_356c                             	| [$3557: jp   m,$356C]
	move.b	number_of_players_8235(a6),d0                   	| [$355a: ld   a,($8235)]
	subq.b	#1,d0                           	| [$355d: dec  a]
	jeq	l_3531                             	| [$355e: jr   z,$3531]
	move.b	l_8253(a6),d0                   	| [$3560: ld   a,($8253)]
	                             	| [$3563: or   a]
	jmi	l_3531                             	| [$3564: jp   m,$3531]
	jbsr	switch_players_data_359e                            	| [$3567: call $359E]
	jra	l_3531                             	| [$356a: jr   $3531]
l_356c:
	clr.b	d0                               	| [$356c: xor  a]
	move.b	d0,l_8646(a6)                   	| [$356d: ld   ($8646),a]
	jbsr	l_76c7                            	| [$3570: call $76C7]
	move.b	number_of_players_8235(a6),d0                   	| [$3573: ld   a,($8235)]
	subq.b	#1,d0                           	| [$3576: dec  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$3577: ret  z] [...]
0:
	jbsr	switch_players_data_359e                            	| [$3578: call $359E]
	tst.b	nb_lives_8234(a6)            	| [$357b: ld   a,(nb_lives_8234)]
	                             	| [$357e: or   a]
	jpl	l_3531                             	| [$357f: jp   p,$3531]
	tst.b	current_player_is_p2_8236(a6)                   	| [$3582: ld   a,($8236)]
	                             	| [$3585: or   a]
	beq.b	0f                               	| [...]
	jbsr	switch_players_data_359e                            	| [$3586: call nz,$359E]
0:
	move.b	#0x01,d0                        	| [$3589: ld   a,$01]
	move.b	d0,l_8646(a6)                   	| [$358b: ld   ($8646),a]
	jbsr	l_76c7                            	| [$358e: call $76C7]
	rts                                    	| [$3591: ret]

l_3592:
	jbsr	init_level_skill_params_2A2E      	| [$3592: call init_level_skill_params_2A2E]
	jbsr	init_building_2700                            	| [$3595: call $2700]
	jbsr	init_elevators_2a65                            	| [$3598: call $2A65]
	jra	l_3547                             	| [$359b: jp   $3547]
	
switch_players_data_359e:
	move.b	current_player_is_p2_8236(a6),d0                   	| [$359e: ld   a,($8236)]
	eor.b	#0x01,d0                         	| [$35a1: xor  $01]
	move.b	d0,current_player_is_p2_8236(a6)                   	| [$35a3: ld   ($8236),a]
	lea	l_8253(a6),a0                      	| [$35a6: ld   hl,$8253]
	lea	nb_lives_8234(a6),a1               	| [$35a9: ld   de,nb_lives_8234]
	jbsr	swap_memory_increase_pointers_3613	| [$35ac: call swap_memory_increase_pointers_3613]
	lea	current_player_score_834D(a6),a1                      	| [$35af: ld   de,$834D]
	jbsr	l_361b                            	| [$35b2: call $361B]
	lea	l_824A(a6),a1                      	| [$35b5: ld   de,$824A]
	jbsr	swap_memory_increase_pointers_3613	| [$35b8: call swap_memory_increase_pointers_3613]
	lea	l_8373(a6),a1                      	| [$35bb: ld   de,$8373]
	jbsr	swap_memory_increase_pointers_3613	| [$35be: call swap_memory_increase_pointers_3613]
	lea	skill_level_8237(a6),a1            	| [$35c1: ld   de,skill_level_8237]
	jbsr	swap_memory_increase_pointers_3613	| [$35c4: call swap_memory_increase_pointers_3613]
	lea	viewed_floor_802C(a6),a1                      	| [$35c7: ld   de,$802C]
	jbsr	swap_memory_increase_pointers_3613	| [$35ca: call swap_memory_increase_pointers_3613]
	lea	level_timer_16bit_8231(a6),a1      	| [$35cd: ld   de,level_timer_16bit_8231]
	jbsr	swap_memory_increase_pointers_3613	| [$35d0: call swap_memory_increase_pointers_3613]
	jbsr	swap_memory_increase_pointers_3613	| [$35d3: call swap_memory_increase_pointers_3613]
	lea	l_8233(a6),a1                      	| [$35d6: ld   de,$8233]
	jbsr	swap_memory_increase_pointers_3613	| [$35d9: call swap_memory_increase_pointers_3613]
	lea	l_8000(a6),a1                      	| [$35dc: ld   de,$8000]
	jbsr	swap_memory_increase_pointers_3613	| [$35df: call swap_memory_increase_pointers_3613]
	lea	l_834C(a6),a1                      	| [$35e2: ld   de,$834C]
	jbsr	swap_memory_increase_pointers_3613	| [$35e5: call swap_memory_increase_pointers_3613]
	lea	l_82ED(a6),a1                      	| [$35e8: ld   de,$82ED]
	jbsr	swap_memory_increase_pointers_3613	| [$35eb: call swap_memory_increase_pointers_3613]
	lea	l_81CE(a6),a1                      	| [$35ee: ld   de,$81CE]
	jbsr	l_3623                            	| [$35f1: call $3623]
	lea	l_802D(a6),a1                      	| [$35f4: ld   de,$802D]
	jbsr	swap_memory_increase_pointers_3613	| [$35f7: call swap_memory_increase_pointers_3613]
	lea	l_8383(a6),a1                      	| [$35fa: ld   de,$8383]
	jbsr	l_362f                            	| [$35fd: call $362F]
	lea	l_81DA(a6),a1                      	| [$3600: ld   de,$81DA]
	jbsr	l_3627                            	| [$3603: call $3627]
	lea	red_door_position_array_8210(a6),a1	| [$3606: ld   de,red_door_position_array_8210]
	jbsr	l_362b                            	| [$3609: call $362B]
	lea	l_81F1(a6),a1                      	| [$360c: ld   de,$81F1]
	jbsr	l_362b                            	| [$360f: call $362B]
	rts                                    	| [$3612: ret]

* < HL,DE
* swaps memory pointed by addresses, then increases HL and DE
swap_memory_increase_pointers_3613:
	move.b	(a1),d0                         	| [$3613: ld   a,(de)]
	move.b	(a0),d2                         	| [$3614: ld   c,(hl)]
	move.b	d0,(a0)+                         	| [$3615: ld   (hl),a]
	move.b	d2,d0                           	| [$3616: ld   a,c]
	move.b	d0,(a1)+                         	| [$3617: ld   (de),a]
	                           	| [$3618: inc  hl]
	                           	| [$3619: inc  de]
	rts                                    	| [$361a: ret]

l_361b:
	move.b	#0x03,d1                        	| [$361b: ld   b,$03]
l_361d:
	jbsr	swap_memory_increase_pointers_3613	| [$361d: call swap_memory_increase_pointers_3613]
	subq.b	#1,d1                           	| [...]
	jne	l_361d                             	| [$3620: djnz $361D]
	rts                                    	| [$3622: ret]
l_3623:
	move.b	#0x08,d1                        	| [$3623: ld   b,$08]
	jra	l_361d                             	| [$3625: jr   $361D]
l_3627:
	move.b	#0x17,d1                        	| [$3627: ld   b,$17]
	jra	l_361d                             	| [$3629: jr   $361D]
l_362b:
	move.b	#0x1F,d1                        	| [$362b: ld   b,$1F]
	jra	l_361d                             	| [$362d: jr   $361D]
l_362f:
	move.b	#0x0A,d1                        	| [$362f: ld   b,$0A]
l_3631:
	movem.w	d1/d2,-(sp)                    	| [$3631: push bc]
	jbsr	swap_memory_increase_pointers_3613	| [$3632: call swap_memory_increase_pointers_3613]
	move.w	#0x0007,d1                      	| [$3635: ld   bc,$0007] 7
                              	| [$3638: ex   de,hl]
	add.w	d1,a1                            	| [$3639: add  hl,bc]
	                              	| [$363a: ex   de,hl]
	movem.w	(sp)+,d1/d2                    	| [$363b: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_3631                             	| [$363c: djnz $3631]
	rts                                    	| [$363e: ret]

start_music_if_in_game_363f:
	move.b	game_in_play_flag_823B(a6),d0   	| [$363f: ld   a,(game_in_play_flag_823B)]
	                             	| [$3642: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$3643: ret  nz] [...]
0:
	jbsr	increase_difficulty_if_late_46b7        | [$3644: call $46B7]
	                                    	| [$3647: nop]
	                                    	| [$3648: nop]
	jbsr	music_control_64d2                            	| [$3649: call music_control_64d2]
	rts                                    	| [$364c: ret]

l_364d:
	move.b	#0x80,d0                        	| [$364d: ld   a,$80]
	move.b	d0,music_state_8779(a6)                   	| [$364f: ld   ($8779),a]
	jbsr	music_control_64d2                            	| [$3652: call music_control_64d2]
	rts                                    	| [$3655: ret]

play_sound_3656:
	                           	| [$3656: ld   b,a]
	tst.b	game_in_play_flag_823B(a6)   	| [$3657: ld   a,(game_in_play_flag_823B)]
	                             	| [$365a: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$365b: ret  nz] [...]
0:
* plays sound only if real game (not demo)
	                           	| [$365c: ld   a,b]
	jbra	play_sound             	| [$365d: ld   (sound_latch_D50B),a]
	                                    	| [$3660: ret]

l_3661:
	move.b	(character_situation_06,a2),d0  	| [$3661: ld   a,(ix+character_situation_06)]
	                             	| [$3664: or   a]
	jne	l_366b                             	| [$3665: jp   nz,$366B]
* character on ground
	jra	l_46c5                             	| [$3668: jp   $46C5]

l_366b:
	jbsr	load_character_elevator_structure_62CE	| [$366b: call load_character_elevator_structure_62CE]
	move.b	(current_floor_01,a3),d1        	| [$366e: ld   b,(iy+current_floor_01)] 83CE: elevator current floor
	move.b	(character_y_offset_03,a2),d0   	| [$3671: ld   a,(ix+character_y_offset_03)]
	add.b	(a3),d0                     	| [$3674: add  a,(iy+$00)]
	cmp.b	#0x30,d0                         	| [$3677: cp   $30]
	jcc	l_367c                             	| [$3679: jr   nc,$367C]
	subq.b	#1,d1                           	| [$367b: dec  b]
l_367c:
	move.b	d1,d0                           	| [$367c: ld   a,b]
	add.b	(character_situation_06,a2),d0   	| [$367d: add  a,(ix+character_situation_06)]
	move.b	d0,d1                           	| [$3680: ld   b,a]
	move.b	(0x08,a2),d0                    	| [$3681: ld   a,(ix+$08)]
	and.b	#0x80,d0                         	| [$3684: and  $80]
	jeq	l_368a                             	| [$3686: jr   z,$368A]
	subq.b	#2,d1                           	| [$3688: dec  b] * 2
l_368a:
	move.b	d1,(0x07,a2)                    	| [$368a: ld   (ix+$07),b] set current floor for current elevator?
	jbsr	l_37e9                            	| [$368d: call $37E9]
	move.b	(0x09,a2),d0                    	| [$3690: ld   a,(ix+$09)]
	cmp.b	#0x05,d0                         	| [$3693: cp   $05]
	bne.b	0f                               	| [...]
	rts                                    	| [$3695: ret  z] [...]
0:
	move.b	(0x00,a2),d1                    	| [$3696: ld   b,(ix+$00)]
	move.b	(0x01,a2),d2                    	| [$3699: ld   c,(ix+$01)]
	move.b	(0x04,a3),d3                    	| [$369c: ld   d,(iy+$04)]
	move.b	(0x05,a3),d4                    	| [$369f: ld   e,(iy+$05)]
	move.b	d4,d0                           	| [$36a2: ld   a,e]
	sub.b	d2,d0                            	| [$36a3: sub  c]
	scs		d7
	move.b	d0,d5                           	| [$36a4: ld   h,a]
	tst.b	d7
	jne	l_36da                             	| [$36a5: jp   c,$36DA]
 	move.b	d1,d0                           	| [$36a8: ld   a,b]
	sub.b	d3,d0                            	| [$36a9: sub  d]
	scs		d7
	move.b	d0,d5                           	| [$36aa: ld   h,a]
	tst.b	d7
	jne	l_371a                             	| [$36ab: jp   c,$371A]
	move.b	(character_situation_06,a2),d0  	| [$36ae: ld   a,(ix+character_situation_06)]
	subq.b	#1,d0                           	| [$36b1: dec  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$36b2: ret  z] [...]
0:
* not in elevator
	move.b	d1,d0                           	| [$36b3: ld   a,b]
	add.b	d2,d0                            	| [$36b4: add  a,c]
	sub.b	d3,d0                            	| [$36b5: sub  d]
	sub.b	d4,d0                            	| [$36b6: sub  e]
	jpl	l_36c3                             	| [$36b7: jp   p,$36C3]
	move.b	d3,d0                           	| [$36ba: ld   a,d]
	add.b	#0x0A,d0                         	| [$36bb: add  a,$0A]
	sub.b	d2,d0                            	| [$36bd: sub  c]
	scs		d7
	move.b	d0,d5                           	| [$36be: ld   h,a]
	tst.b	d7
	jne	l_36cc                             	| [$36bf: jp   c,$36CC]
	rts                                    	| [$36c2: ret]
l_36c3:
	move.b	d1,d0                           	| [$36c3: ld   a,b]
	add.b	#0x0A,d0                         	| [$36c4: add  a,$0A]
	sub.b	d4,d0                            	| [$36c6: sub  e]
	scs		d7
	move.b	d0,d5                           	| [$36c7: ld   h,a]
	tst.b	d7
	jne	l_36d3                             	| [$36c8: jp   c,$36D3]
 	rts                                    	| [$36cb: ret]
l_36cc:
	move.b	#0x03,(0x11,a2)                 	| [$36cc: ld   (ix+$11),$03]
	jra	l_375a                             	| [$36d0: jp   $375A]
l_36d3:
	move.b	#0x03,(0x11,a2)                 	| [$36d3: ld   (ix+$11),$03]
	jra	l_3765                             	| [$36d7: jp   $3765]
l_36da:
	move.b	(0x09,a2),d0                    	| [$36da: ld   a,(ix+$09)]
l_36dd:
	cmp.b	#0x08,d0                         	| [$36dd: cp   $08]
	jeq	l_375a                             	| [$36df: jp   z,$375A]
	move.b	(character_delta_x_05,a2),d0    	| [$36e2: ld   a,(ix+character_delta_x_05)]
	                             	| [$36e5: or   a]
	jeq	l_375a                             	| [$36e6: jp   z,$375A]
	bpl.b	0f                               	| [...]
	rts                                    	| [$36e9: ret  m] [...]
0:
	move.b	(0x07,a2),d0                    	| [$36ea: ld   a,(ix+$07)]
	cmp.b	#0x1F,d0                         	| [$36ed: cp   $1F]
	jeq	l_3713                             	| [$36ef: jp   z,$3713]
	jbsr	exx                               	| [$36f2: exx]
	move.b	(character_y_offset_down_02,a2),d1	| [$36f3: ld   b,(ix+character_y_offset_down_02)]
	move.b	(character_y_offset_03,a2),d2   	| [$36f6: ld   c,(ix+character_y_offset_03)]
	move.b	(a3),d3                    	| [$36f9: ld   d,(iy+$00)]
	move.b	d1,d0                           	| [$36fc: ld   a,b]
	add.b	d3,d0                            	| [$36fd: add  a,d]
	cmp.b	#0x30,d0                         	| [$36fe: cp   $30]
	jcs	l_3770                             	| [$3700: jp   c,$3770]
	move.b	(0x01,a3),d0                    	| [$3703: ld   a,(iy+$01)]
	cmp.b	#0x1E,d0                         	| [$3706: cp   $1E]
	jeq	l_3712                             	| [$3708: jp   z,$3712]
	move.b	d2,d0                           	| [$370b: ld   a,c]
	add.b	d3,d0                            	| [$370c: add  a,d]
	cmp.b	#0x34,d0                         	| [$370d: cp   $34]
	jcc	l_3778                             	| [$370f: jp   nc,$3778]
l_3712:
	jbsr	exx                               	| [$3712: exx]
l_3713:
	move.b	#0x04,(0x11,a2)                 	| [$3713: ld   (ix+$11),$04]
	jra	l_375a                             	| [$3717: jp   $375A]
l_371a:
	move.b	(0x09,a2),d0                    	| [$371a: ld   a,(ix+$09)]
	cmp.b	#0x08,d0                         	| [$371d: cp   $08]
	jeq	l_3765                             	| [$371f: jp   z,$3765]
	move.b	(character_delta_x_05,a2),d0    	| [$3722: ld   a,(ix+character_delta_x_05)]
	                             	| [$3725: or   a]
	jeq	l_3765                             	| [$3726: jp   z,$3765]
	bmi.b	0f                               	| [...]
	rts                                    	| [$3729: ret  p] [...]
0:
	move.b	(0x07,a2),d0                    	| [$372a: ld   a,(ix+$07)]
	cmp.b	#0x1F,d0                         	| [$372d: cp   $1F]
	jeq	l_3753                             	| [$372f: jp   z,$3753]
	jbsr	exx                               	| [$3732: exx]
	move.b	(character_y_offset_down_02,a2),d1	| [$3733: ld   b,(ix+character_y_offset_down_02)]
	move.b	(character_y_offset_03,a2),d2   	| [$3736: ld   c,(ix+character_y_offset_03)]
	move.b	(a3),d3                    	| [$3739: ld   d,(iy+$00)]
	move.b	d1,d0                           	| [$373c: ld   a,b]
	add.b	d3,d0                            	| [$373d: add  a,d]
	cmp.b	#0x30,d0                         	| [$373e: cp   $30]
	jcs	l_3770                             	| [$3740: jp   c,$3770]
	move.b	(0x07,a2),d0                    	| [$3743: ld   a,(ix+$07)]
	cmp.b	#0x1E,d0                         	| [$3746: cp   $1E]
	jeq	l_3752                             	| [$3748: jp   z,$3752]
	move.b	d2,d0                           	| [$374b: ld   a,c]
	add.b	d3,d0                            	| [$374c: add  a,d]
	cmp.b	#0x34,d0                         	| [$374d: cp   $34]
	jcc	l_3778                             	| [$374f: jp   nc,$3778]
l_3752:
	jbsr	exx                               	| [$3752: exx]
l_3753:
	move.b	#0x04,(0x11,a2)                 	| [$3753: ld   (ix+$11),$04]
	jra	l_3765                             	| [$3757: jp   $3765]
l_375a:
	move.b	d1,d0                           	| [$375a: ld   a,b]
	add.b	d5,d0                            	| [$375b: add  a,h]
	move.b	d0,(character_x_00,a2)          	| [$375c: ld   (ix+character_x_00),a]
	move.b	d2,d0                           	| [$375f: ld   a,c]
	add.b	d5,d0                            	| [$3760: add  a,h]
	move.b	d0,(character_x_right_01,a2)    	| [$3761: ld   (ix+character_x_right_01),a]
	rts                                    	| [$3764: ret]
l_3765:
	move.b	d1,d0                           	| [$3765: ld   a,b]
	sub.b	d5,d0                            	| [$3766: sub  h]
	move.b	d0,(character_x_00,a2)          	| [$3767: ld   (ix+character_x_00),a]
	move.b	d2,d0                           	| [$376a: ld   a,c]
	sub.b	d5,d0                            	| [$376b: sub  h]
	move.b	d0,(character_x_right_01,a2)    	| [$376c: ld   (ix+character_x_right_01),a]
	rts                                    	| [$376f: ret]
l_3770:
	move.b	d2,d0                           	| [$3770: ld   a,c]
	add.b	d3,d0                            	| [$3771: add  a,d]
	move.b	d0,d2                           	| [$3772: ld   c,a]
	st.b	d3                                	| [$3773: ld   d,$FF]
	jra	l_3780                             	| [$3775: jp   $3780]
l_3778:
	sub.b	#0x30,d0                         	| [$3778: sub  $30]
	move.b	d0,d2                           	| [$377a: ld   c,a]
	moveq   #0,d3                               	| [$377b: ld   d,$00]
	jra	l_3780                             	| [$377d: jp   $3780]
l_3780:
	move.b	(0x01,a3),d0                    	| [$3780: ld   a,(iy+$01)]
	add.b	(0x06,a2),d0                     	| [$3783: add  a,(ix+$06)]
	add.b	d3,d0                            	| [$3786: add  a,d]
	move.b	d0,d1                           	| [$3787: ld   b,a]
	move.b	(0x08,a2),d0                    	| [$3788: ld   a,(ix+$08)]
	roxl.b	#2,d0                           	| [$378b: rla] * 2
	and.b	#0x01,d0                         	| [$378d: and  $01]
	add.b	d0,d0                            	| [$378f: add  a,a]
	neg.b	d0                               	| [$3790: neg]
	add.b	d1,d0                            	| [$3792: add  a,b]
	move.b	d0,(0x07,a2)                    	| [$3793: ld   (ix+$07),a]
	clr.b	(0x06,a2)                        	| [$3796: ld   (ix+$06),$00]
	jra	l_379d                             	| [$379a: jp   $379D]
l_379d:
	move.b	(0x09,a2),d0                    	| [$379d: ld   a,(ix+$09)]
	cmp.b	#0x07,d0                         	| [$37a0: cp   $07]
	jne	l_37a8                             	| [$37a2: jr   nz,$37A8]
	jbsr	l_37d4                            	| [$37a4: call $37D4]
	rts                                    	| [$37a7: ret]
l_37a8:
	move.b	#0x03,(0x09,a2)                 	| [$37a8: ld   (ix+$09),$03]
	move.b	#0x05,d1                        	| [$37ac: ld   b,$05]
	lea	table_44D8-0xD8+0xED,a0                          	| [$37ae: ld   hl,$44ED]
	move.w	#0x0004,d3                      	| [$37b1: ld   de,$0004] 4
	move.b	d2,d0                           	| [$37b4: ld   a,c]
l_37b5:
	cmp.b	(a0),d0                          	| [$37b5: cp   (hl)]
	jcc	l_37bf                             	| [$37b6: jp   nc,$37BF]
	add.w	d3,a0                            	| [$37b9: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_37b5                             	| [$37ba: djnz $37B5]
	lea	table_44D8-0xD8+0x105,a0                          	| [$37bc: ld   hl,$4505]
l_37bf:
	                           	| [$37bf: dec  hl]
	move.b	(-1,a0),d0                         	| [$37c0: ld   a,(hl)]
	move.b	d0,(character_y_offset_down_02,a2)	| [$37c1: ld   (ix+character_y_offset_down_02),a]
	                           	| [$37c4: inc  hl]
	move.b	(a0)+,d0                         	| [$37c5: ld   a,(hl)]
	move.b	d0,(character_y_offset_03,a2)   	| [$37c6: ld   (ix+character_y_offset_03),a]
	                           	| [$37c9: inc  hl]
	move.b	(a0)+,d0                         	| [$37ca: ld   a,(hl)]
	move.b	d0,(0x0c,a2)                    	| [$37cb: ld   (ix+$0c),a]
	                           	| [$37ce: inc  hl]
	move.b	(a0),d0                         	| [$37cf: ld   a,(hl)]
	move.b	d0,(0x0a,a2)                    	| [$37d0: ld   (ix+$0a),a]
	rts                                    	| [$37d3: ret]
l_37d4:
	move.b	d2,d0                           	| [$37d4: ld   a,c]
	cmp.b	#0x06,d0                         	| [$37d5: cp   $06]
	jcc	l_37db                             	| [$37d7: jr   nc,$37DB]
	move.b	#0x06,d2                        	| [$37d9: ld   c,$06]
l_37db:
	move.b	d2,d0                           	| [$37db: ld   a,c]
	sub.b	(character_y_offset_03,a2),d0    	| [$37dc: sub  (ix+character_y_offset_03)]
	add.b	(character_y_offset_down_02,a2),d0	| [$37df: add  a,(ix+character_y_offset_down_02)]
	move.b	d0,(character_y_offset_down_02,a2)	| [$37e2: ld   (ix+character_y_offset_down_02),a]
	move.b	d2,(character_y_offset_03,a2)   	| [$37e5: ld   (ix+character_y_offset_03),c]
	rts                                    	| [$37e8: ret]

l_37e9:
	move.b	(character_situation_06,a2),d0  	| [$37e9: ld   a,(ix+character_situation_06)]
	subq.b	#1,d0                           	| [$37ec: dec  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$37ed: ret  z] [...]
0:
* not in elevator
	move.b	(associated_elevator_08,a2),d0  	| [$37ee: ld   a,(ix+associated_elevator_08)]
	and.b	#0x80,d0                         	| [$37f1: and  $80]
	beq.b	0f                               	| [...]
	rts                                    	| [$37f3: ret  nz] [...]
0:
	move.b	(0x02,a3),d0                    	| [$37f4: ld   a,(iy+$02)]
	sub.b	(0x01,a3),d0                     	| [$37f7: sub  (iy+$01)]
	cmp.b	#0x02,d0                         	| [$37fa: cp   $02]
	bcs.b	0f                               	| [...]
	rts                                    	| [$37fc: ret  nc] [...]
0:
	move.b	(a3),d0                    	| [$37fd: ld   a,(iy+$00)]
	add.b	(0x02,a2),d0                     	| [$3800: add  a,(ix+$02)]
	cmp.b	#0x30,d0                         	| [$3803: cp   $30]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3805: ret  c] [...]
0:
	move.b	#0x06,(enemy_state_09,a2)       	| [$3806: ld   (ix+enemy_state_09),$06]
	clr.b	(0x0a,a2)                        	| [$380a: ld   (ix+$0a),$00]
	move.b	current_enemy_index_85BA(a6),d0 	| [$380e: ld   a,(current_enemy_index_85BA)]
	                             	| [$3811: or   a]
	jeq	l_382a                             	| [$3812: jr   z,$382A]
	move.b	#0x02,d0                        	| [$3814: ld   a,$02]
	move.b	d0,l_82EC(a6)                   	| [$3816: ld   ($82EC),a]
	move.b	l_8520(a6),d0                   	| [$3819: ld   a,($8520)]
	subq.b	#1,d0                           	| [$381c: dec  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$381d: ret  nz] [...]
0:
	move.b	player_structure_851A+8(a6),d0  	| [$381e: ld   a,(player_structure_851A+8)]
	move.b	(0x08,a2),d7
	eor.b	d7,d0                            	| [$3821: xor  (ix+$08)]
	and.b	#0x7F,d0                         	| [$3824: and  $7F]
	bne.b	0f                               	| [...]
	jbsr	l_56e7                            	| [$3826: call z,$56E7]
0:
	rts                                    	| [$3829: ret]

l_382a:
	move.b	#0x02,d0                        	| [$382a: ld   a,$02]
	move.b	d0,l_82EB(a6)                   	| [$382c: ld   ($82EB),a]
	rts                                    	| [$382f: ret]
l_3830:
	move.b	(0x0a,a2),d0                    	| [$3830: ld   a,(ix+$0a)]
	                             	| [$3833: or   a]
	jeq	l_3876                             	| [$3834: jp   z,$3876]
	cmp.b	#0x01,d0                         	| [$3837: cp   $01]
	jeq	l_3880                             	| [$3839: jp   z,$3880]
	addq.b	#1,(0x0a,a2)                    	| [$383c: inc  (ix+$0a)]
	move.b	d0,d1                           	| [$383f: ld   b,a]
	move.b	#0x11,d2                        	| [$3840: ld   c,$11]
	move.b	current_enemy_index_85BA(a6),d0 	| [$3842: ld   a,(current_enemy_index_85BA)]
	                             	| [$3845: or   a]
	jne	l_384b                             	| [$3846: jp   nz,$384B]
	move.b	#0x28,d2                        	| [$3849: ld   c,$28]
l_384b:
	move.b	d1,d0                           	| [$384b: ld   a,b]
	cmp.b	d2,d0                            	| [$384c: cp   c]
	jcs	l_3884                             	| [$384d: jp   c,$3884]
	move.b	d0,d1                           	| [$3850: ld   b,a]
	move.b	current_enemy_index_85BA(a6),d0 	| [$3851: ld   a,(current_enemy_index_85BA)]
	                             	| [$3854: or   a]
	jne	l_385e                             	| [$3855: jp   nz,$385E]
	move.b	d1,d0                           	| [$3858: ld   a,b]
	cmp.b	#0x3C,d0                         	| [$3859: cp   $3C]
	jcs	l_388b                             	| [$385b: jp   c,$388B]
l_385e:
	st.b	d0                                	| [$385e: ld   a,$FF]
	move.b	d0,(0x09,a2)                    	| [$3860: ld   (ix+$09),a]
	move.b	d0,(0x04,a2)                    	| [$3863: ld   (ix+$04),a]
	move.b	l_8375(a6),d0                   	| [$3866: ld   a,($8375)]
	move.b	d0,(0x10,a2)                    	| [$3869: ld   (ix+$10),a]
	LOAD_POINTER	ram_pointer_85BF(a6),a0             	| [$386c: ld   hl,($85BF)]
	move.b	d0,(a0)                         	| [$386f: ld   (hl),a]
	move.w	#0x0005,d3                      	| [$3870: ld   de,$0005] 5
	add.w	d3,a0                            	| [$3873: add  hl,de]
	move.b	d0,(a0)                         	| [$3874: ld   (hl),a]
	rts                                    	| [$3875: ret]
l_3876:
	jbsr	l_388f                            	| [$3876: call $388F]
	jbsr	l_3ae1                            	| [$3879: call $3AE1]
	jbsr	l_3948                            	| [$387c: call $3948]
	rts                                    	| [$387f: ret]
l_3880:
	jbsr	l_38bb                            	| [$3880: call $38BB]
	rts                                    	| [$3883: ret]
l_3884:
	jbsr	l_38e2                            	| [$3884: call $38E2]
	jbsr	l_3948                            	| [$3887: call $3948]
	rts                                    	| [$388a: ret]
l_388b:
	jbsr	l_3948                            	| [$388b: call $3948]
	rts                                    	| [$388e: ret]
l_388f:
	move.b	#0x05,(0x0c,a2)                 	| [$388f: ld   (ix+$0c),$05]
	addq.b	#1,(0x0a,a2)                    	| [$3893: inc  (ix+$0a)]
	move.b	(0x02,a2),d0                    	| [$3896: ld   a,(ix+$02)]
	sub.b	#0x0F,d0                         	| [$3899: sub  $0F]
	jcs	l_38a4                             	| [$389b: jp   c,$38A4]
	move.b	d0,(character_y_offset_03,a2)   	| [$389e: ld   (ix+character_y_offset_03),a]
	jra	l_38ac                             	| [$38a1: jp   $38AC]
l_38a4:
	move.b	#0x15,(0x02,a2)                 	| [$38a4: ld   (ix+$02),$15]
	move.b	#0x06,(character_y_offset_03,a2)	| [$38a8: ld   (ix+character_y_offset_03),$06]
l_38ac:
	move.b	(character_situation_06,a2),d0  	| [$38ac: ld   a,(ix+character_situation_06)]
	                             	| [$38af: or   a]
	jne	l_38b7                             	| [$38b0: jp   nz,$38B7]
* character on ground
	jbsr	l_39b4                            	| [$38b3: call $39B4]
	rts                                    	| [$38b6: ret]
* not on ground (elevator, stairs ...)
l_38b7:
	jbsr	l_3ab5                            	| [$38b7: call $3AB5]
	rts                                    	| [$38ba: ret]
l_38bb:
	move.b	#0x0B,d0                        	| [$38bb: ld   a,$0B]
	sub.b	(0x0c,a2),d0                     	| [$38bd: sub  (ix+$0c)]
	move.b	d0,(0x0c,a2)                    	| [$38c0: ld   (ix+$0c),a]
	move.b	(character_y_offset_03,a2),d0   	| [$38c3: ld   a,(ix+character_y_offset_03)]
	subq.b	#0x04,d0                        	| [$38c6: sub  $04]
	cmp.b	#0x07,d0                         	| [$38c8: cp   $07]
	jcc	l_38d9                             	| [$38ca: jp   nc,$38D9]
	move.b	#0x06,(character_y_offset_03,a2)	| [$38cd: ld   (ix+character_y_offset_03),$06]
	move.b	#0x15,(0x02,a2)                 	| [$38d1: ld   (ix+$02),$15]
	addq.b	#1,(0x0a,a2)                    	| [$38d5: inc  (ix+$0a)]
	rts                                    	| [$38d8: ret]
l_38d9:
	move.b	d0,(character_y_offset_03,a2)   	| [$38d9: ld   (ix+character_y_offset_03),a]
	add.b	#0x0F,d0                         	| [$38dc: add  a,$0F]
	move.b	d0,(0x02,a2)                    	| [$38de: ld   (ix+$02),a]
	rts                                    	| [$38e1: ret]
l_38e2:
	and.b	#0xFC,d0                         	| [$38e2: and  $FC]
	lsr.b	#2,d0                            	| [$38e4: srl  a] * 2
	clr.w	d5                               	| [$38e9: ld   h,$00]
	move.b	d0,d5                           	| [$38e8: ld   l,a]
	jbsr	select_proper_table_3900                            	| [$38eb: call $3900]
	lea		(a1,d5.w),a0                            	| [$38ee: add  hl,de]
	move.b	(0x0c,a2),d0                    	| [$38ef: ld   a,(ix+$0c)]
	cmp.b	#0x0D,d0                         	| [$38f2: cp   $0D]
	jeq	l_38fb                             	| [$38f4: jr   z,$38FB]
	move.b	(a0),d0                         	| [$38f6: ld   a,(hl)]
	move.b	d0,(0x0c,a2)                    	| [$38f7: ld   (ix+$0c),a]
	rts                                    	| [$38fa: ret]
l_38fb:
	st.b	(0x04,a2)                 	| [$38fb: ld   (ix+$04),$FF]
	rts                                    	| [$38ff: ret]
select_proper_table_3900:
	move.b	current_enemy_index_85BA(a6),d0 	| [$3900: ld   a,(current_enemy_index_85BA)]
	                             	| [$3903: or   a]
	jne	l_3913                             	| [$3904: jr   nz,$3913]
	lea	table_3920(pc),a1                          	| [$3906: ld   de,$3920]
	move.b	(0x09,a2),d0                    	| [$3909: ld   a,(ix+$09)]
	cmp.b	#0x05,d0                         	| [$390c: cp   $05]
	bne.b	0f                               	| [...]
	rts                                    	| [$390e: ret  z] [...]
0:
	lea	table_3920+0x14(pc),a1                          	| [$390f: ld   de,$3934]
	rts                                    	| [$3912: ret]
l_3913:
	lea	table_3920+0xC(pc),a1                          	| [$3913: ld   de,$392C]
	move.b	(0x09,a2),d0                    	| [$3916: ld   a,(ix+$09)]
	cmp.b	#0x05,d0                         	| [$3919: cp   $05]
	bne.b	0f                               	| [...]
	rts                                    	| [$391b: ret  z] [...]
0:
	lea	table_3920+0x20,a1                          	| [$391c: ld   de,$3940]
	rts                                    	| [$391f: ret]
	

table_3920:
	.byte	0x04
	.byte	0x03
	.byte	0x05
	.byte	0x0A
	.byte	0x0A
	.byte	0x05
	.byte	0x0A
	.byte	0x05
	.byte	0x0A
	.byte	0x0D
	.byte	0x0D
	.byte	0x0D
	.byte	0x04
	.byte	0x03
	.byte	0x05
	.byte	0x0A
	.byte	0x0D
	.byte	0x0D
	.byte	0x0D
	.byte	0x0D
	.byte	0x04
	.byte	0x0B
	.byte	0x0B
	.byte	0x0B
	.byte	0x0C
	.byte	0x0C
	.byte	0x0C
	.byte	0x0C
	.byte	0x0D
	.byte	0x0D
	.byte	0x0D
	.byte	0x0D
	.byte	0x04
	.byte	0x0B
	.byte	0x0B
	.byte	0x0C
	.byte	0x0D
	.byte	0x0D
	.byte	0x0D
	.byte	0x0D
	.align	2

l_3948:
	move.b	(0x04,a2),d0                    	| [$3948: ld   a,(ix+$04)]
	addq.b	#1,d0                           	| [$394b: inc  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$394c: ret  z] [...]
0:
	move.b	(character_situation_06,a2),d0  	| [$394d: ld   a,(ix+character_situation_06)]
	                             	| [$3950: or   a]
	jeq	character_on_ground_397F           	| [$3951: jp   z,character_on_ground_397F]
	cmp.b	#CS_ABOVE_ELEVATOR_02,d0         	| [$3954: cp   CS_ABOVE_ELEVATOR_02]
	beq.b	0f                               	| [...]
	rts                                    	| [$3956: ret  nz] [...]
0:
* character above elevator
	move.b	(0x08,a2),d0                    	| [$3957: ld   a,(ix+$08)]
	and.b	#0x80,d0                         	| [$395a: and  $80]
	beq.b	0f                               	| [...]
	rts                                    	| [$395c: ret  nz] [...]
0:
	jbsr	load_character_elevator_structure_62CE	| [$395d: call load_character_elevator_structure_62CE]
	move.b	(0x02,a3),d0                    	| [$3960: ld   a,(iy+$02)]
	sub.b	(0x01,a3),d0                     	| [$3963: sub  (iy+$01)]
	cmp.b	#0x02,d0                         	| [$3966: cp   $02]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3968: ret  nc] [...]
0:
	move.b	(a3),d0                    	| [$3969: ld   a,(iy+$00)]
	add.b	(0x02,a2),d0                     	| [$396c: add  a,(ix+$02)]
	cmp.b	#0x30,d0                         	| [$396f: cp   $30]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3971: ret  c] [...]
0:
	jbsr	l_39a7                            	| [$3972: call $39A7]
	move.b	#0xFE,(a0)                      	| [$3975: ld   (hl),$FE]
	move.b	#0x06,(0x09,a2)                 	| [$3977: ld   (ix+$09),$06]
	jbsr	l_3b07                            	| [$397b: call $3B07]
	rts                                    	| [$397e: ret]

character_on_ground_397F:
	move.b	(0x08,a2),d0                    	| [$397f: ld   a,(ix+$08)]
	cmp.b	#0x0C,d0                         	| [$3982: cp   $0C]
	bne.b	0f                               	| [...]
	rts                                    	| [$3984: ret  z] [...]
0:
	jbsr	load_character_elevator_structure_62CE	| [$3985: call load_character_elevator_structure_62CE]
	move.b	(0x06,a3),d0                    	| [$3988: ld   a,(iy+$06)]
	add.b	d0,d0                            	| [$398b: add  a,a]
	add.b	(0x07,a2),d0                     	| [$398c: add  a,(ix+$07)]
	sub.b	(0x01,a3),d0                     	| [$398f: sub  (iy+$01)]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3992: ret  c] [...]
0:
	move.b	(0x02,a2),d0                    	| [$3993: ld   a,(ix+$02)]
	sub.b	(a3),d0                     	| [$3996: sub  (iy+$00)]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3999: ret  c] [...]
0:
	jbsr	l_39a7                            	| [$399a: call $39A7]
	move.b	#0x02,(a0)                      	| [$399d: ld   (hl),$02]
	move.b	#0x06,(0x09,a2)                 	| [$399f: ld   (ix+$09),$06]
	jbsr	l_3b07                            	| [$39a3: call $3B07]
	rts                                    	| [$39a6: ret]
l_39a7:
	move.b	(0x08,a2),d0                    	| [$39a7: ld   a,(ix+$08)]
	and.b	#0x7F,d0                         	| [$39aa: and  $7F]
	clr.w	d5                               	| [$39ad: ld   h,$00]
	move.b	d0,d5                          	| [$39ac: ld   l,a]
	lea	l_8097(a6),a0                      	| [$39af: ld   de,$8097]
	add.w	d5,a0                            	| [$39b2: add  hl,de]
 	rts                                    	| [$39b3: ret]
l_39b4:
	move.b	#0x0C,(0x08,a2)                 	| [$39b4: ld   (ix+$08),$0C]
	clr.b	(character_delta_x_05,a2)        	| [$39b8: ld   (ix+character_delta_x_05),$00]
	jbsr	l_4aad                            	| [$39bc: call $4AAD]
	move.b	(character_x_00,a2),d1          	| [$39bf: ld   b,(ix+character_x_00)]
	move.b	(character_x_right_01,a2),d2    	| [$39c2: ld   c,(ix+character_x_right_01)]
	move.b	#0x0B,d3                        	| [$39c5: ld   d,$0B]
	move.b	d1,d0                           	| [$39c7: ld   a,b]
l_39c8:
	cmp.b	(a0),d0                          	| [$39c8: cp   (hl)]
	jcs	l_39d2                             	| [$39c9: jp   c,$39D2]
	addq.w	#1,a0                           	| [$39cc: inc  hl]
	move.b	(a0)+,d3                         	| [$39cd: ld   d,(hl)]
	                           	| [$39ce: inc  hl]
	jra	l_39c8                             	| [$39cf: jp   $39C8]
l_39d2:
	move.b	(a0)+,d4                         	| [$39d2: ld   e,(hl)]
	                           	| [$39d3: inc  hl]
	move.b	d4,d0                           	| [$39d4: ld   a,e]
	subq.b	#1,d0                           	| [$39d5: dec  a]
	sub.b	d2,d0                            	| [$39d6: sub  c]
	jcs	l_39e4                             	| [$39d7: jp   c,$39E4]
	move.b	d3,(0x08,a2)                    	| [$39da: ld   (ix+$08),d]
	move.b	d3,d0                           	| [$39dd: ld   a,d]
	cmp.b	#0x0C,d0                         	| [$39de: cp   $0C]
	jne	l_3a08                             	| [$39e0: jp   nz,$3A08]
	rts                                    	| [$39e3: ret]
l_39e4:
	move.b	d3,d0                           	| [$39e4: ld   a,d]
	cmp.b	#0x0B,d0                         	| [$39e5: cp   $0B]
	jcs	l_3a1f                             	| [$39e7: jr   c,$3A1F]
	move.b	(a0),d0                         	| [$39e9: ld   a,(hl)]
	cmp.b	#0x0B,d0                         	| [$39ea: cp   $0B]
	jcs	l_3a1f                             	| [$39ec: jr   c,$3A1F]
	cmp.b	#0x0C,d0                         	| [$39ee: cp   $0C]
	jeq	l_39fe                             	| [$39f0: jp   z,$39FE]
	move.b	d4,d0                           	| [$39f3: ld   a,e]
	subq.b	#1,d0                           	| [$39f4: dec  a]
	move.b	d0,(character_x_right_01,a2)    	| [$39f5: ld   (ix+character_x_right_01),a]
	sub.b	#0x08,d0                         	| [$39f8: sub  $08]
	move.b	d0,(character_x_00,a2)          	| [$39fa: ld   (ix+character_x_00),a]
	rts                                    	| [$39fd: ret]
l_39fe:
	move.b	d4,d0                           	| [$39fe: ld   a,e]
	move.b	d0,(character_x_00,a2)          	| [$39ff: ld   (ix+character_x_00),a]
	add.b	#0x08,d0                         	| [$3a02: add  a,$08]
	move.b	d0,(character_x_right_01,a2)    	| [$3a04: ld   (ix+character_x_right_01),a]
	rts                                    	| [$3a07: ret]
l_3a08:
	jbsr	load_character_elevator_structure_62CE	| [$3a08: call load_character_elevator_structure_62CE]
	move.b	(0x03,a3),d0                    	| [$3a0b: ld   a,(iy+$03)]
	cmp.b	(0x07,a2),d0                     	| [$3a0e: cp   (ix+$07)]
	bne.b	0f                               	| [...]
	rts                                    	| [$3a11: ret  z] [...]
0:
	clr.b	(0x09,a2)                        	| [$3a12: ld   (ix+$09),$00]
	clr.b	(0x0a,a2)                        	| [$3a16: ld   (ix+$0a),$00]
	move.b	#CS_FALLING_03,(character_situation_06,a2)	| [$3a1a: ld   (ix+character_situation_06),CS_FALLING_03]
	rts                                    	| [$3a1e: ret]
l_3a1f:
	move.b	d0,(0x08,a2)                    	| [$3a1f: ld   (ix+$08),a]
	jbsr	load_character_elevator_structure_62CE	| [$3a22: call load_character_elevator_structure_62CE]
	move.b	(0x07,a2),d0                    	| [$3a25: ld   a,(ix+$07)]
	cmp.b	(0x03,a3),d0                     	| [$3a28: cp   (iy+$03)]
	jeq	l_3a4b                             	| [$3a2b: jr   z,$3A4B]
	move.b	d0,d1                           	| [$3a2d: ld   b,a]
	move.b	(0x01,a3),d0                    	| [$3a2e: ld   a,(iy+$01)]
	addq.b	#1,d0                           	| [$3a31: inc  a]
	cmp.b	d1,d0                            	| [$3a32: cp   b]
	jcs	l_3a7d                             	| [$3a33: jr   c,$3A7D]
	move.b	d1,d0                           	| [$3a35: ld   a,b]
	add.b	(0x06,a3),d0                     	| [$3a36: add  a,(iy+$06)]
	add.b	(0x06,a3),d0                     	| [$3a39: add  a,(iy+$06)]
	cmp.b	(0x01,a3),d0                     	| [$3a3c: cp   (iy+$01)]
	jcs	l_3a7d                             	| [$3a3f: jr   c,$3A7D]
	jne	l_3a4b                             	| [$3a41: jr   nz,$3A4B]
	move.b	(0x02,a2),d0                    	| [$3a43: ld   a,(ix+$02)]
	cmp.b	(a3),d0                     	| [$3a46: cp   (iy+$00)]
	jcs	l_3a7d                             	| [$3a49: jr   c,$3A7D]
l_3a4b:
	move.b	#0x0C,(0x08,a2)                 	| [$3a4b: ld   (ix+$08),$0C]
	move.b	(character_x_00,a2),d0          	| [$3a4f: ld   a,(ix+character_x_00)]
	add.b	(character_x_right_01,a2),d0     	| [$3a52: add  a,(ix+character_x_right_01)]
	roxr.b	#1,d0                           	| [$3a55: rr   a]
	move.b	d0,d1                           	| [$3a57: ld   b,a]
	move.b	(0x05,a3),d0                    	| [$3a58: ld   a,(iy+$05)]
	add.b	(character_display_priority_04,a3),d0       	| [$3a5b: add  a,(iy+character_display_priority_04)]
	roxr.b	#1,d0                           	| [$3a5e: rr   a]
	cmp.b	d1,d0                            	| [$3a60: cp   b]
	jcs	l_3a70                             	| [$3a61: jr   c,$3A70]
	move.b	(character_display_priority_04,a3),d0      	| [$3a63: ld   a,(iy+character_display_priority_04)]
	subq.b	#1,d0                           	| [$3a66: dec  a]
	move.b	d0,(character_x_right_01,a2)    	| [$3a67: ld   (ix+character_x_right_01),a]
	sub.b	#0x08,d0                         	| [$3a6a: sub  $08]
	move.b	d0,(character_x_00,a2)          	| [$3a6c: ld   (ix+character_x_00),a]
	rts                                    	| [$3a6f: ret]
l_3a70:
	move.b	(0x05,a3),d0                    	| [$3a70: ld   a,(iy+$05)]
	addq.b	#1,d0                           	| [$3a73: inc  a]
	move.b	d0,(character_x_00,a2)          	| [$3a74: ld   (ix+character_x_00),a]
	add.b	#0x08,d0                         	| [$3a77: add  a,$08]
	move.b	d0,(character_x_right_01,a2)    	| [$3a79: ld   (ix+character_x_right_01),a]
	rts                                    	| [$3a7c: ret]
l_3a7d:
	clr.b	(0x09,a2)                        	| [$3a7d: ld   (ix+$09),$00]
	clr.b	(0x0a,a2)                        	| [$3a81: ld   (ix+$0a),$00]
	move.b	#CS_FALLING_03,(character_situation_06,a2)	| [$3a85: ld   (ix+character_situation_06),CS_FALLING_03]
	move.b	(character_x_00,a2),d0          	| [$3a89: ld   a,(ix+character_x_00)]
	add.b	(character_x_right_01,a2),d0     	| [$3a8c: add  a,(ix+character_x_right_01)]
	roxr.b	#1,d0                           	| [$3a8f: rr   a]
	move.b	d0,d1                           	| [$3a91: ld   b,a]
	move.b	(0x05,a3),d0                    	| [$3a92: ld   a,(iy+$05)]
	add.b	(character_display_priority_04,a3),d0       	| [$3a95: add  a,(iy+character_display_priority_04)]
	roxr.b	#1,d0                           	| [$3a98: rr   a]
	cmp.b	d1,d0                            	| [$3a9a: cp   b]
	jcc	l_3aa9                             	| [$3a9b: jr   nc,$3AA9]
	move.b	(0x05,a3),d0                    	| [$3a9d: ld   a,(iy+$05)]
	move.b	d0,(character_x_right_01,a2)    	| [$3aa0: ld   (ix+character_x_right_01),a]
	sub.b	#0x08,d0                         	| [$3aa3: sub  $08]
	move.b	d0,(character_x_00,a2)          	| [$3aa5: ld   (ix+character_x_00),a]
	rts                                    	| [$3aa8: ret]
l_3aa9:
	move.b	(character_display_priority_04,a3),d0      	| [$3aa9: ld   a,(iy+character_display_priority_04)]
	move.b	d0,(character_x_00,a2)          	| [$3aac: ld   (ix+character_x_00),a]
	add.b	#0x08,d0                         	| [$3aaf: add  a,$08]
	move.b	d0,(character_x_right_01,a2)    	| [$3ab1: ld   (ix+character_x_right_01),a]
	rts                                    	| [$3ab4: ret]
l_3ab5:
	clr.b	(character_delta_x_05,a2)        	| [$3ab5: ld   (ix+character_delta_x_05),$00]
	jbsr	load_character_elevator_structure_62CE	| [$3ab9: call load_character_elevator_structure_62CE]
	move.b	(character_x_00,a2),d0          	| [$3abc: ld   a,(ix+character_x_00)]
	cmp.b	(character_display_priority_04,a3),d0       	| [$3abf: cp   (iy+character_display_priority_04)]
	jcs	l_3ad5                             	| [$3ac2: jp   c,$3AD5]
	move.b	(0x05,a3),d0                    	| [$3ac5: ld   a,(iy+$05)]
	cmp.b	(character_x_right_01,a2),d0     	| [$3ac8: cp   (ix+character_x_right_01)]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3acb: ret  nc] [...]
0:
	move.b	d0,(character_x_right_01,a2)    	| [$3acc: ld   (ix+character_x_right_01),a]
	sub.b	#0x08,d0                         	| [$3acf: sub  $08]
	move.b	d0,(character_x_00,a2)          	| [$3ad1: ld   (ix+character_x_00),a]
	rts                                    	| [$3ad4: ret]
l_3ad5:
	move.b	(character_display_priority_04,a3),d0      	| [$3ad5: ld   a,(iy+character_display_priority_04)]
	move.b	d0,(character_x_00,a2)          	| [$3ad8: ld   (ix+character_x_00),a]
	add.b	#0x08,d0                         	| [$3adb: add  a,$08]
	move.b	d0,(character_x_right_01,a2)    	| [$3add: ld   (ix+character_x_right_01),a]
	rts                                    	| [$3ae0: ret]
l_3ae1:
	move.b	current_enemy_index_85BA(a6),d0 	| [$3ae1: ld   a,(current_enemy_index_85BA)]
	                             	| [$3ae4: or   a]
	jeq	l_3af7                             	| [$3ae5: jr   z,$3AF7]
	move.b	l_82EC(a6),d0                   	| [$3ae7: ld   a,($82EC)]
	                             	| [$3aea: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$3aeb: ret  z] [...]
0:
	subq.b	#1,d0                           	| [$3aec: dec  a]
	move.b	d0,l_82EC(a6)                   	| [$3aed: ld   ($82EC),a]
	bne.b	0f                               	| [...]
	rts                                    	| [$3af0: ret  z] [...]
0:
	move.b	#0xC9,d0                        	| [$3af1: ld   a,$C9] crushed by elevator
	jbsr	play_sound_3656                   	| [$3af3: call play_sound_3656]
	rts                                    	| [$3af6: ret]
l_3af7:
	move.b	l_82EB(a6),d0                   	| [$3af7: ld   a,($82EB)]
	                             	| [$3afa: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$3afb: ret  z] [...]
0:
	subq.b	#1,d0                           	| [$3afc: dec  a]
	move.b	d0,l_82EB(a6)                   	| [$3afd: ld   ($82EB),a]
	bne.b	0f                               	| [...]
	rts                                    	| [$3b00: ret  z] [...]
0:
	move.b	#0xC5,d0                        	| [$3b01: ld   a,$C5] player crushed by elevator (loop)
	jbsr	play_sound_3656                   	| [$3b03: call play_sound_3656]
	rts                                    	| [$3b06: ret]

l_3b07:
	move.b	current_enemy_index_85BA(a6),d0 	| [$3b07: ld   a,(current_enemy_index_85BA)]
	                             	| [$3b0a: or   a]
	jeq	l_3b1c                             	| [$3b0b: jr   z,$3B1C]
	move.b	l_82EC(a6),d0                   	| [$3b0d: ld   a,($82EC)]
	                             	| [$3b10: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$3b11: ret  nz] [...]
0:
	addq.b	#1,d0                           	| [$3b12: inc  a]
	move.b	d0,l_82EC(a6)                   	| [$3b13: ld   ($82EC),a]
	move.b	#0xC9,d0                        	| [$3b16: ld   a,$C9]
	jbsr	play_sound_3656                   	| [$3b18: call play_sound_3656]
	rts                                    	| [$3b1b: ret]
l_3b1c:
	move.b	l_82EB(a6),d0                   	| [$3b1c: ld   a,($82EB)]
	                            	| [$3b1f: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$3b20: ret  nz] [...]
0:
	addq.b	#1,d0                           	| [$3b21: inc  a]
	move.b	d0,l_82EB(a6)                   	| [$3b22: ld   ($82EB),a]
	move.b	#0xC5,d0                        	| [$3b25: ld   a,$C5]
	jbsr	play_sound_3656                   	| [$3b27: call play_sound_3656]
	rts                                    	| [$3b2a: ret]
l_3b2b:
	jbsr	l_3b9a                            	| [$3b2b: call $3B9A]
	addq.b	#1,(0x0a,a2)                    	| [$3b2e: inc  (ix+$0a)]
	jbsr	l_3ba7                            	| [$3b31: call $3BA7]
	jbsr	l_3bbb                            	| [$3b34: call $3BBB]
	jbsr	load_character_elevator_structure_62CE	| [$3b37: call load_character_elevator_structure_62CE]
	move.b	(0x01,a3),d0                    	| [$3b3a: ld   a,(iy+$01)]
	sub.b	(current_floor_07,a2),d0                     	| [$3b3d: sub  (ix+$07)]
	jcc	l_3b62                             	| [$3b40: jp   nc,$3B62]
	moveq	#0,d1                               	| [$3b43: ld   b,$00]
	neg.b	d0                               	| [$3b45: neg]
	subq.b	#1,d0                           	| [$3b47: dec  a]
	jeq	l_3b52                             	| [$3b48: jp   z,$3B52]
	jmi	l_3b5c                             	| [$3b4b: jp   m,$3B5C]
	move.b	#0x30,d1                        	| [$3b4e: ld   b,$30]
	subq.b	#1,d0                           	| [$3b50: dec  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$3b51: ret  nz] [...]
0:
l_3b52:
	move.b	d1,d0                           	| [$3b52: ld   a,b]
	add.b	(character_y_offset_03,a2),d0    	| [$3b53: add  a,(ix+character_y_offset_03)]
	sub.b	(a3),d0                     	| [$3b56: sub  (iy+$00)]
	subq.b	#0x06,d0                        	| [$3b59: sub  $06]
	bmi.b	0f                               	| [...]
	rts                                    	| [$3b5b: ret  p] [...]
0:
l_3b5c:
	move.b	#CS_ABOVE_ELEVATOR_02,(character_situation_06,a2)	| [$3b5c: ld   (ix+character_situation_06),CS_ABOVE_ELEVATOR_02]
	jra	l_3b73                             	| [$3b60: jr   $3B73]
l_3b62:
	move.b	(0x07,a2),d0                    	| [$3b62: ld   a,(ix+$07)]
	cmp.b	(0x03,a3),d0                     	| [$3b65: cp   (iy+$03)]
	beq.b	0f                               	| [...]
	rts                                    	| [$3b68: ret  nz] [...]
0:
	move.b	(character_y_offset_03,a2),d0   	| [$3b69: ld   a,(ix+character_y_offset_03)]
	cmp.b	#0x06,d0                         	| [$3b6c: cp   $06]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3b6e: ret  nc] [...]
0:
	move.b	#CS_ON_GROUND_00,(character_situation_06,a2)	| [$3b6f: ld   (ix+character_situation_06),CS_ON_GROUND_00]
l_3b73:
	move.b	#0x06,(character_y_offset_03,a2)	| [$3b73: ld   (ix+character_y_offset_03),$06]
	move.b	#0x15,(0x02,a2)                 	| [$3b77: ld   (ix+$02),$15]
	move.b	#0x05,(0x09,a2)                 	| [$3b7b: ld   (ix+$09),$05]
	clr.b	(0x0a,a2)                        	| [$3b7f: ld   (ix+$0a),$00]
	move.b	current_enemy_index_85BA(a6),d0 	| [$3b83: ld   a,(current_enemy_index_85BA)]
	                             	| [$3b86: or   a]
	jeq	l_3b8f                             	| [$3b87: jr   z,$3B8F]
	move.b	#0x01,d0                        	| [$3b89: ld   a,$01]
	move.b	d0,l_82EC(a6)                   	| [$3b8b: ld   ($82EC),a]
	rts                                    	| [$3b8e: ret]
l_3b8f:
	move.b	#0x01,d0                        	| [$3b8f: ld   a,$01]
	move.b	d0,l_82EB(a6)                   	| [$3b91: ld   ($82EB),a]
	move.b	#0xC4,d0                        	| [$3b94: ld   a,$C4] player killed, death music
	jbsr	play_sound_3656                   	| [$3b96: call play_sound_3656]
	rts                                    	| [$3b99: ret]
l_3b9a:
	move.b	current_enemy_index_85BA(a6),d0 	| [$3b9a: ld   a,(current_enemy_index_85BA)]
	or.b	(0x0a,a2),d0                      	| [$3b9d: or   (ix+$0a)]
	beq.b	0f                               	| [...]
	rts                                    	| [$3ba0: ret  nz] [...]
0:
	move.b	#0xC3,d0                        	| [$3ba1: ld   a,$C3] player falling sound
	jbsr	play_sound_3656                   	| [$3ba3: call play_sound_3656]
	rts                                    	| [$3ba6: ret]
l_3ba7:
	move.b	(0x0a,a2),d0                    	| [$3ba7: ld   a,(ix+$0a)]
	* carry is irrelevant as masked out below
	roxr.b	#1,d0                           	| [$3baa: rra]
	move.b	d0,d1                           	| [$3bab: ld   b,a]
	and.b	#0x01,d0                         	| [$3bac: and  $01]
	addq.b	#0x05,d0                        	| [$3bae: add  a,$05]
	move.b	d0,(0x0c,a2)                    	| [$3bb0: ld   (ix+$0c),a]
	move.b	d1,d0                           	| [$3bb3: ld   a,b]
	roxr.b	#1,d0                           	| [$3bb4: rra]
	and.b	#0x01,d0                         	| [$3bb5: and  $01]
	move.b	d0,(0x0b,a2)                    	| [$3bb7: ld   (ix+$0b),a]
	rts                                    	| [$3bba: ret]
l_3bbb:
	move.b	(character_y_offset_03,a2),d0   	| [$3bbb: ld   a,(ix+character_y_offset_03)]
	subq.b	#0x06,d0                        	| [$3bbe: sub  $06]
	jcc	l_3bd1                             	| [$3bc0: jp   nc,$3BD1]
	add.b	#0x30,d0                         	| [$3bc3: add  a,$30]
	move.b	d0,(character_y_offset_03,a2)   	| [$3bc5: ld   (ix+character_y_offset_03),a]
	add.b	#0x0F,d0                         	| [$3bc8: add  a,$0F]
	move.b	d0,(0x02,a2)                    	| [$3bca: ld   (ix+$02),a]
	subq.b	#1,(0x07,a2)                    	| [$3bcd: dec  (ix+$07)]
	rts                                    	| [$3bd0: ret]
l_3bd1:
	move.b	d0,(character_y_offset_03,a2)   	| [$3bd1: ld   (ix+character_y_offset_03),a]
	add.b	#0x0F,d0                         	| [$3bd4: add  a,$0F]
	move.b	d0,(0x02,a2)                    	| [$3bd6: ld   (ix+$02),a]
	rts                                    	| [$3bd9: ret]
l_3bda:
	move.b	(0x09,a2),d0                    	| [$3bda: ld   a,(ix+$09)]
	                             	| [$3bdd: or   a]
	jne	l_3c26                             	| [$3bde: jp   nz,$3C26]
	move.b	current_enemy_index_85BA(a6),d0 	| [$3be1: ld   a,(current_enemy_index_85BA)]
	                             	| [$3be4: or   a]
	jne	l_3c26                             	| [$3be5: jp   nz,$3C26]
	jbsr	l_3c2a                            	| [$3be8: call $3C2A]
	move.b	d2,d0                           	| [$3beb: ld   a,c]
	cmp.b	#0x08,d0                         	| [$3bec: cp   $08]
	jeq	l_3c26                             	| [$3bee: jp   z,$3C26]
	move.b	d2,(0x08,a2)                    	| [$3bf1: ld   (ix+$08),c]
	jbsr	l_3dbb                            	| [$3bf4: call $3DBB]
	move.b	d2,d0                           	| [$3bf7: ld   a,c]
	cmp.b	(0x0b,a2),d0                     	| [$3bf8: cp   (ix+$0b)]
	jeq	l_3c26                             	| [$3bfb: jp   z,$3C26]
	move.b	d2,d0                           	| [$3bfe: ld   a,c]
	move.b	#0xF7,d2                        	| [$3bff: ld   c,$F7]
	tst.b	d0                             	| [$3c01: or   a]
	jeq	l_3c07                             	| [$3c02: jp   z,$3C07]
	move.b	#0x09,d2                        	| [$3c05: ld   c,$09]
l_3c07:
	add.b	d1,d0                            	| [$3c07: add  a,b]
	add.b	d2,d0                            	| [$3c08: add  a,c]
	move.b	d0,d1                           	| [$3c09: ld   b,a]
	addq.b	#0x07,d0                        	| [$3c0a: add  a,$07]
	move.b	d0,d2                           	| [$3c0c: ld   c,a]
	move.b	(character_x_00,a2),d0          	| [$3c0d: ld   a,(ix+character_x_00)]
	cmp.b	d1,d0                            	| [$3c10: cp   b]
	jcs	l_3c26                             	| [$3c11: jp   c,$3C26]
	cmp.b	d2,d0                            	| [$3c14: cp   c]
	jcc	l_3c26                             	| [$3c15: jp   nc,$3C26]
	move.b	#CS_IN_ROOM_05,(character_situation_06,a2)	| [$3c18: ld   (ix+character_situation_06),CS_IN_ROOM_05]
	clr.b	d0                               	| [$3c1c: xor  a]
	clr.b	(0x0a,a2)                        	| [$3c1d: ld   (ix+$0a),$00]
	clr.b	(0x04,a2)                        	| [$3c21: ld   (ix+$04),$00]
	rts                                    	| [$3c25: ret]
l_3c26:
	move.b	#0x01,d0                        	| [$3c26: ld   a,$01]
	                             	| [$3c28: or   a]
	rts                                    	| [$3c29: ret]
l_3c2a:
	move.b	#0x08,d2                        	| [$3c2a: ld   c,$08]
	move.b	(0x07,a2),d0                    	| [$3c2c: ld   a,(ix+$07)]
	                             	| [$3c2f: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$3c30: ret  z] [...]
0:
	cmp.b	#0x1F,d0                         	| [$3c31: cp   $1F]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3c33: ret  nc] [...]
0:
	bcs.b	0f                               	| [...]
	rts                                    	| [$3c34: ret  nc] [...]
0:
	moveq   #0,d3                               	| [$3c35: ld   d,$00]
	move.b	d0,d3                           	| [$3c37: ld   e,a]
	lea	red_door_position_array_8210(a6),a0	| [$3c38: ld   hl,red_door_position_array_8210]
	add.w	d3,a0                            	| [$3c3b: add  hl,de]
	move.b	(a0),d2                         	| [$3c3c: ld   c,(hl)]
	rts                                    	| [$3c3d: ret]
	
* updates timer which makes character enter/exit a room
* timer is not used to update opening door sprite, but this
* routine is responsible for opening/closing door sprite nevertheless
update_in_room_timer_3c3e:
	move.b	(exiting_room_timer_0a,a2),d0   | [$3c3e: ld   a,(ix+$0a)]
	addq.b	#1,(exiting_room_timer_0a,a2)   | [$3c41: inc  (ix+$0a)]
	tst.b	d0                             	| [$3c44: or   a]
	jeq	l_3d14                             	| [$3c45: jp   z,$3D14]
	cmp.b	#0x08,d0                         	| [$3c48: cp   $08]
	jcs	l_3cd3                             	| [$3c4a: jp   c,$3CD3]
	jeq	l_3c8e                             	| [$3c4d: jp   z,$3C8E]
	lea	l_82ED(a6),a0                      	| [$3c50: ld   hl,$82ED]
	cmp.b	(a0),d0                          	| [$3c53: cp   (hl)]
	jcs	l_3cfb                             	| [$3c54: jp   c,$3CFB]
	jeq	l_3df1                             	| [$3c57: jp   z,$3DF1]
	cmp.b	#0xE0,d0                         	| [$3c5a: cp   $E0]
	jcs	l_3cfb                             	| [$3c5c: jp   c,$3CFB]
	jeq	l_3df1                             	| [$3c5f: jp   z,$3DF1]
	cmp.b	#0xE1,d0                         	| [$3c62: cp   $E1]
	jeq	l_3c71                             	| [$3c64: jr   z,$3C71]
	cmp.b	#0xF7,d0                         	| [$3c66: cp   $F7]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3c68: ret  c] [...]
0:
	cmp.b	#0xFA,d0                         	| [$3c69: cp   $FA]
	jne	l_3cd3                             	| [$3c6b: jp   nz,$3CD3]
	jra	character_exited_door_3ca3                             	| [$3c6e: jp   $3CA3]
l_3c71:
	clr.b	(0x04,a2)                        	| [$3c71: ld   (ix+$04),$00]
	move.b	#0x12,d1                        	| [$3c75: ld   b,$12]
	move.b	current_enemy_index_85BA(a6),d0 	| [$3c77: ld   a,(current_enemy_index_85BA)]
												| [$3c7a: or   a]
	jeq	l_3c86                             	| [$3c7b: jr   z,$3C86]
	move.b	skill_level_8237(a6),d0         	| [$3c7d: ld   a,(skill_level_8237)]
	cmp.b	#0x02,d0                         	| [$3c80: cp   $02]
	jcc	l_3c86                             	| [$3c82: jr   nc,$3C86]
	* enemies exit room slower in lower difficulty levels!
	move.b	#0x0A,d1                        	| [$3c84: ld   b,$0A]
l_3c86:
	move.b	(exiting_room_timer_0a,a2),d0                    	| [$3c86: ld   a,(ix+$0a)]
	add.b	d1,d0                            	| [$3c89: add  a,b]
	move.b	d0,(exiting_room_timer_0a,a2)                    	| [$3c8a: ld   (ix+$0a),a]
	rts                                    	| [$3c8d: ret]
l_3c8e:
	st.b	(0x04,a2)                 	| [$3c8e: ld   (ix+$04),$FF]
	move.b	current_enemy_index_85BA(a6),d0 	| [$3c92: ld   a,(current_enemy_index_85BA)]
	                             	| [$3c95: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$3c96: ret  z] [...]
0:
	st.b	(enemy_state_09,a2)                 	| [$3c97: ld   (ix+$09),$FF]
	move.b	l_8375(a6),d0                   	| [$3c9b: ld   a,($8375)]
	move.b	d0,(0x10,a2)                    	| [$3c9e: ld   (ix+$10),a]
	rts                                    	| [$3ca1: ret]
	                                    	| [$3ca2: ret]

character_exited_door_3ca3:
	move.b	#0x02,(0x04,a2)                 	| [$3ca3: ld   (ix+$04),$02]
	move.b	#CS_ON_GROUND_00,(character_situation_06,a2)	| [$3ca7: ld   (ix+character_situation_06),CS_ON_GROUND_00]
	move.b	#0x1D,(character_y_offset_down_02,a2) | [$3cab: ld   (ix+$02),$1D]
	move.b	#0x06,(character_y_offset_03,a2)	| [$3caf: ld   (ix+character_y_offset_03),$06]
	clr.b	(enemy_state_09,a2)                        	| [$3cb3: ld   (ix+$09),$00]
	clr.b	(0x0c,a2)                        	| [$3cb7: ld   (ix+$0c),$00]
	clr.b	(character_delta_x_05,a2)        	| [$3cbb: ld   (ix+character_delta_x_05),$00]
	move.b	current_enemy_index_85BA(a6),d0 	| [$3cbf: ld   a,(current_enemy_index_85BA)]
	                             	| [$3cc2: or   a]
	beq.b	0f                               	| [...]
	rts                                    	    | [$3cc3: ret  nz] [...]
0:
	moveq   #0,d3                               | [$3cc7: ld   d,$00]
	move.b	(current_floor_07,a2),d3            | [$3cc4: ld   e,(ix+$07)]
	lea	red_door_position_array_8210(a6),a0	    | [$3cc9: ld   hl,red_door_position_array_8210]
	add.w	d3,a0                            	| [$3ccc: add  hl,de]
	move.b	#0x08,(a0)                      	| [$3ccd: ld   (hl),$08] document collected, set 8 to clear door
	jbsr	l_56f0                            	| [$3ccf: call $56F0]
	rts                                    	    | [$3cd2: ret]

l_3cd3:
	clr.b	(0x04,a2)                        	| [$3cd3: ld   (ix+$04),$00]
	move.b	(character_delta_x_05,a2),d1    	| [$3cd7: ld   b,(ix+character_delta_x_05)]
	move.b	(character_x_00,a2),d0          	| [$3cda: ld   a,(ix+character_x_00)]
	add.b	d1,d0                            	| [$3cdd: add  a,b]
	move.b	d0,(character_x_00,a2)          	| [$3cde: ld   (ix+character_x_00),a]
	move.b	(character_x_right_01,a2),d0    	| [$3ce1: ld   a,(ix+character_x_right_01)]
	add.b	d1,d0                            	| [$3ce4: add  a,b]
	move.b	d0,(character_x_right_01,a2)    	| [$3ce5: ld   (ix+character_x_right_01),a]
	move.b	#0x01,d0                        	| [$3ce8: ld   a,$01]
	sub.b	(0x0c,a2),d0                     	| [$3cea: sub  (ix+$0c)]
	move.b	d0,(0x0c,a2)                    	| [$3ced: ld   (ix+$0c),a]
	addq.b	#0x06,d0                        	| [$3cf0: add  a,$06]
	move.b	d0,(character_y_offset_03,a2)   	| [$3cf2: ld   (ix+character_y_offset_03),a]
	add.b	#0x17,d0                         	| [$3cf5: add  a,$17]
	move.b	d0,(character_y_offset_down_02,a2)	| [$3cf7: ld   (ix+$02),a]
	rts                                    	| [$3cfa: ret]
l_3cfb:
	move.b	(move_direction_0d,a2),d0       	| [$3cfb: ld   a,(ix+move_direction_0d)]
	ror.b	#1,d0                            	| [$3cfe: rrca]
	jcs	l_3d0c                             	| [$3cff: jp   c,$3D0C]
	ror.b	#1,d0                            	| [$3d02: rrca]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3d03: ret  nc] [...]
0:
	move.b	(0x0b,a2),d0                    	| [$3d04: ld   a,(ix+$0b)]
	                             	| [$3d07: or   a]
	bne.b	0f                               	| [...]
	jbsr	l_3df1                            	| [$3d08: call z,$3DF1]
0:
	rts                                    	| [$3d0b: ret]
l_3d0c:
	move.b	(0x0b,a2),d0                    	| [$3d0c: ld   a,(ix+$0b)]
	                             	| [$3d0f: or   a]
	beq.b	0f                               	| [...]
	jbsr	l_3df1                            	| [$3d10: call nz,$3DF1]
0:
	rts                                    	| [$3d13: ret]
l_3d14:
	jbsr	get_free_moving_door_slot_3d6a                            	| [$3d14: call $3D6A]
	jne	set_character_on_ground_3D65       	| [$3d17: jp   nz,set_character_on_ground_3D65]
	jbsr	l_3dbb                            	| [$3d1a: call $3DBB]
	move.b	d2,d0                           	| [$3d1d: ld   a,c]
	                             	| [$3d1e: or   a]
	jne	l_3d38                             	| [$3d1f: jp   nz,$3D38]
	move.b	d1,d0                           	| [$3d22: ld   a,b]
	subq.b	#0x02,d0                        	| [$3d23: sub  $02]
	move.b	d0,(character_x_right_01,a2)    	| [$3d25: ld   (ix+character_x_right_01),a]
	sub.b	#0x08,d0                         	| [$3d28: sub  $08]
	move.b	d0,(character_x_00,a2)          	| [$3d2a: ld   (ix+character_x_00),a]
	move.b	#0x01,(0x0b,a2)                 	| [$3d2d: ld   (ix+$0b),$01]
	move.b	#0x02,(character_delta_x_05,a2) 	| [$3d31: ld   (ix+character_delta_x_05),$02]
	jra	l_3d4b                             	| [$3d35: jp   $3D4B]
l_3d38:
	move.b	d1,d0                           	| [$3d38: ld   a,b]
	add.b	#0x19,d0                         	| [$3d39: add  a,$19]
	move.b	d0,(character_x_right_01,a2)    	| [$3d3b: ld   (ix+character_x_right_01),a]
	sub.b	#0x08,d0                         	| [$3d3e: sub  $08]
	move.b	d0,(character_x_00,a2)          	| [$3d40: ld   (ix+character_x_00),a]
	clr.b	(0x0b,a2)                        	| [$3d43: ld   (ix+$0b),$00]
	move.b	#0xFE,(character_delta_x_05,a2) 	| [$3d47: ld   (ix+character_delta_x_05),$FE]
l_3d4b:
	clr.b	(0x04,a2)                        	| [$3d4b: ld   (ix+$04),$00]
	move.b	#0x01,(exiting_room_timer_0a,a2)                 	| [$3d4f: ld   (ix+$0a),$01]
	move.b	#0x01,(0x0c,a2)                 	| [$3d53: ld   (ix+$0c),$01]
	move.b	d2,(0x03,a3)                    	| [$3d57: ld   (iy+$03),c]
	move.b	current_enemy_index_85BA(a6),d0 	| [$3d5a: ld   a,(current_enemy_index_85BA)]
	                             	| [$3d5d: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$3d5e: ret  nz] [...]
0:
	move.b	#0x37,d0                        	| [$3d5f: ld   a,$37] entering document room sound
	jbsr	play_sound_3656                   	| [$3d61: call play_sound_3656]
	rts                                    	| [$3d64: ret]

set_character_on_ground_3D65:
	move.b	#CS_ON_GROUND_00,(character_situation_06,a2)	| [$3d65: ld   (ix+character_situation_06),CS_ON_GROUND_00]
	rts                                    	| [$3d69: ret]

* < Z: set if door slot is free, else no slot free
* < A3 selected door slot
get_free_moving_door_slot_3d6a:
	lea	moving_door_slot_80AD(a6),a3                    | [$3d6a: ld   iy,$80AD]
	jbsr	check_opening_door_matches_character_3dad   | [$3d6e: call $3DAD]
	jeq	l_3da9                             	            | [$3d71: jp   z,$3DA9]
	lea	moving_door_slot_80B5(a6),a3                    | [$3d74: ld   iy,$80B5]
	jbsr	check_opening_door_matches_character_3dad   | [$3d78: call $3DAD]
	jeq	l_3da9                                          | [$3d7b: jp   z,$3DA9]
	lea	moving_door_slot_80AD(a6),a3                    | [$3d7e: ld   iy,$80AD]
	move.b	(moving_door_timer_05,a3),d0            | [$3d82: ld   a,(iy+$05)]
	addq.b	#1,d0                           	        | [$3d85: inc  a]
	jeq	init_door_slot_3d92                             | [$3d86: jp   z,$3D92]
	lea	moving_door_slot_80B5(a6),a3                    | [$3d89: ld   iy,$80B5]
	move.b	(moving_door_timer_05,a3),d0            | [$3d8d: ld   a,(iy+$05)]
	addq.b	#1,d0                           	        | [$3d90: inc  a]
	jeq		init_door_slot_3d92                         | [...]
	rts                                    	            | [$3d91: ret  nz] [...]
	

init_door_slot_3d92:
	move.b	(current_floor_07,a2),d0                    	| [$3d92: ld   a,(ix+$07)]
	move.b	d0,(moving_door_floor_02,a3)                    	| [$3d95: ld   (iy+$02),a]
	move.b	(spawning_door_08,a2),d0      | [$3d98: ld   a,(ix+$08)]
	move.b	d0,(moving_door_column_04,a3)      	| [$3d9b: ld   (iy+moving_door_column_04),a]
	clr.b	d0                               	| [$3d9e: xor  a]
	* slot is now taken
	move.b	d0,(moving_door_timer_05,a3)                    	| [$3d9f: ld   (iy+$05),a]
	move.b	d0,(0x06,a3)                    	| [$3da2: ld   (iy+$06),a]
	move.b	d0,(0x07,a3)                    	| [$3da5: ld   (iy+$07),a]
	rts                                    	    | [$3da8: ret]

l_3da9:
	move.b	#0x01,d0                        	| [$3da9: ld   a,$01]
	                             	            | [$3dab: or   a]
	rts                                    	| [$3dac: ret]
	
check_opening_door_matches_character_3dad:
	move.b	(moving_door_floor_02,a3),d0                    	| [$3dad: ld   a,(iy+$02)]
	cmp.b	(current_floor_07,a2),d0                     	| [$3db0: cp   (ix+$07)]
	beq.b	0f                               	| [...]
	rts                                    	| [$3db3: ret  nz] [...]
0:
	move.b	(moving_door_column_04,a3),d0      	| [$3db4: ld   a,(iy+moving_door_column_04)]
	cmp.b	(spawning_door_08,a2),d0                     	| [$3db7: cp   (ix+$08)]
	rts                                    	| [$3dba: ret]

l_3dbb:
	move.b	(current_floor_07,a2),d0                    	| [$3dbb: ld   a,(ix+$07)]
	cmp.b	#0x07,d0                         	| [$3dbe: cp   $07]
	jcs	l_3de5                             	| [$3dc0: jp   c,$3DE5]
	move.b	(spawning_door_08,a2),d0                    	| [$3dc3: ld   a,(ix+$08)]
	lsl.b	#3,d0                            	| [$3dc6: add  a,a]
												| [$3dc7: add  a,a]
												| [$3dc8: add  a,a]
	move.b	d0,d1                           	| [$3dc9: ld   b,a]
	add.b	d1,d0                            	| [$3dca: add  a,b]
	add.b	d1,d0                            	| [$3dcb: add  a,b]
	add.b	#0x20,d0                         	| [$3dcc: add  a,$20]
	move.b	d0,d1                           	| [$3dce: ld   b,a]
	clr.b	d2                               	| [$3dcf: ld   c,$00]
	cmp.b	#0x98,d0                         	| [$3dd1: cp   $98]
	jeq	l_3ddc                             	| [$3dd3: jp   z,$3DDC]
	cmp.b	#0x80,d0                         	| [$3dd6: cp   $80]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3dd8: ret  c] [...]
0:
	move.b	#0x01,d2                        	| [$3dd9: ld   c,$01]
	rts                                    	| [$3ddb: ret]
l_3ddc:
	move.b	(current_floor_07,a2),d0                    	| [$3ddc: ld   a,(ix+$07)]
	cmp.b	#0x14,d0                         	| [$3ddf: cp   $14]
	bne.b	0f                               	| [...]
	rts                                    	| [$3de1: ret  z] [...]
0:
	move.b	#0x01,d2                        	| [$3de2: ld   c,$01]
	rts                                    	| [$3de4: ret]
l_3de5:
	move.b	#0x18,d1                          	| [$3de5: ld   bc,$1800]
	move.b	#0x00,d2                          	| [$3de5: ld   bc,$1800]
	move.b	(associated_elevator_08,a2),d0                    	| [$3de8: ld   a,(ix+$08)]
	                             	| [$3deb: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$3dec: ret  z] [...]
0:
	move.b #0xD0,d1                          	| [$3ded: ld   bc,$D001]
	move.b #0x01,d2                          	| [$3ded: ld   bc,$D001]
	rts                                    	| [$3df0: ret]
l_3df1:
	jbsr	get_free_moving_door_slot_3d6a                            	| [$3df1: call $3D6A]
	jne	l_3e5b                             	| [$3df4: jp   nz,$3E5B]
	* slot is free
	move.b	current_enemy_index_85BA(a6),d0 	| [$3df7: ld   a,(current_enemy_index_85BA)]
	                             	| [$3dfa: or   a]
	jne	l_3e07                             	| [$3dfb: jr   nz,$3E07]
	move.b	#0x02,(0x06,a3)                 	| [$3dfd: ld   (iy+$06),$02]
	move.b	#0x30,(enemy_aggressivity_13,a2)	| [$3e01: ld   (ix+enemy_aggressivity_13),$30]
	jra	l_3e12                             	| [$3e05: jr   $3E12]

l_3e07:
	move.b	skill_level_8237(a6),d0         	| [$3e07: ld   a,(skill_level_8237)]
	cmp.b	#0x02,d0                         	| [$3e0a: cp   $02]
	jcc	l_3e12                             	    | [$3e0c: jr   nc,$3E12]
	move.b	#0x01,(0x7,a3)     	                | [$3e0e: ld   (iy+$07),$01]
l_3e12:
	jbsr	l_3dbb                            	| [$3e12: call $3DBB]
	move.b	d2,d0                           	| [$3e15: ld   a,c]
	                             	| [$3e16: or   a]
	jeq	l_3e30                             	| [$3e17: jp   z,$3E30]
	move.b	d1,d0                           	| [$3e1a: ld   a,b]
	addq.b	#0x04,d0                        	| [$3e1b: add  a,$04]
	move.b	d0,(character_x_00,a2)          	| [$3e1d: ld   (ix+character_x_00),a]
	add.b	#0x08,d0                         	| [$3e20: add  a,$08]
	move.b	d0,(character_x_right_01,a2)    	| [$3e22: ld   (ix+character_x_right_01),a]
	move.b	#0x01,(0x0b,a2)                 	| [$3e25: ld   (ix+$0b),$01]
	move.b	#0x02,(character_delta_x_05,a2) 	| [$3e29: ld   (ix+character_delta_x_05),$02]
	jra	l_3e43                             	| [$3e2d: jp   $3E43]
l_3e30:
	move.b	d1,d0                           	| [$3e30: ld   a,b]
	addq.b	#0x03,d0                        	| [$3e31: add  a,$03]
	move.b	d0,(character_x_00,a2)          	| [$3e33: ld   (ix+character_x_00),a]
	add.b	#0x08,d0                         	| [$3e36: add  a,$08]
	move.b	d0,(character_x_right_01,a2)    	| [$3e38: ld   (ix+character_x_right_01),a]
	clr.b	(0x0b,a2)                        	| [$3e3b: ld   (ix+$0b),$00]
	move.b	#0xFE,(character_delta_x_05,a2) 	| [$3e3f: ld   (ix+character_delta_x_05),$FE]
l_3e43:
	move.b	#0xFF,(0x04,a2)                 	| [$3e43: ld   (ix+$04),$FF]
	move.b	#0xE1,(exiting_room_timer_0a,a2)    | [$3e47: ld   (ix+$0a),$E1]
	move.b	#0x1F,(0x02,a2)                 	| [$3e4b: ld   (ix+$02),$1F]
	move.b	#0x08,(character_y_offset_03,a2)	| [$3e4f: ld   (ix+character_y_offset_03),$08]
	clr.b	(0x0c,a2)                        	| [$3e53: ld   (ix+$0c),$00]
	move.b	d2,(0x03,a3)                    	| [$3e57: ld   (iy+$03),c]
	rts                                    	| [$3e5a: ret]
l_3e5b:
	move.b	#0xE0,(exiting_room_timer_0a,a2)  | [$3e5b: ld   (ix+$0a),$E0]
	move.b	#CS_IN_ROOM_05,(character_situation_06,a2)	| [$3e5f: ld   (ix+character_situation_06),CS_IN_ROOM_05]
	rts                                    	| [$3e63: ret]
l_3e64:
	move.b	(character_delta_x_05,a2),d0    	| [$3e64: ld   a,(ix+character_delta_x_05)]
	                             	| [$3e67: or   a]
	jpl	l_3e75                             	| [$3e68: jp   p,$3E75]
	move.b	(0x0b,a2),d0                    	| [$3e6b: ld   a,(ix+$0b)]
	                             	| [$3e6e: or   a]
	jeq	l_40c9                             	| [$3e6f: jp   z,$40C9]
	jra	l_40a4                             	| [$3e72: jp   $40A4]
l_3e75:
	move.b	(0x0b,a2),d0                    	| [$3e75: ld   a,(ix+$0b)]
	                             	| [$3e78: or   a]
	jeq	l_3e7f                             	| [$3e79: jp   z,$3E7F]
	jra	l_3ea6                             	| [$3e7c: jp   $3EA6]
l_3e7f:
	move.b	(exiting_room_timer_0a,a2),d0                    	| [$3e7f: ld   a,(ix+$0a)]
	addq.b	#1,(exiting_room_timer_0a,a2)                    	| [$3e82: inc  (ix+$0a)]
	tst.b	d0                             	| [$3e85: or   a]
	jeq	l_3ecd                             	| [$3e86: jp   z,$3ECD]
	cmp.b	#0x01,d0                         	| [$3e89: cp   $01]
	jeq	l_3f2e                             	| [$3e8b: jp   z,$3F2E]
	cmp.b	#0x17,d0                         	| [$3e8e: cp   $17]
	jcs	l_3f6e                             	| [$3e90: jp   c,$3F6E]
	jeq	l_3fa7                             	| [$3e93: jp   z,$3FA7]
	cmp.b	#0x19,d0                         	| [$3e96: cp   $19]
	jcs	l_3fe5                             	| [$3e98: jp   c,$3FE5]
	jeq	l_4005                             	| [$3e9b: jp   z,$4005]
	cmp.b	#0x1E,d0                         	| [$3e9e: cp   $1E]
	jcs	l_4023                             	| [$3ea0: jp   c,$4023]
	jra	l_404d                             	| [$3ea3: jp   $404D]
l_3ea6:
	move.b	(exiting_room_timer_0a,a2),d0                    	| [$3ea6: ld   a,(ix+$0a)]
	addq.b	#1,(exiting_room_timer_0a,a2)                    	| [$3ea9: inc  (ix+$0a)]
	tst.b	d0                             	| [$3eac: or   a]
	jeq	l_3ef7                             	| [$3ead: jp   z,$3EF7]
	cmp.b	#0x01,d0                         	| [$3eb0: cp   $01]
	jeq	l_3f4e                             	| [$3eb2: jp   z,$3F4E]
	cmp.b	#0x17,d0                         	| [$3eb5: cp   $17]
	jcs	l_3f86                             	| [$3eb7: jp   c,$3F86]
	jeq	l_3fc6                             	| [$3eba: jp   z,$3FC6]
	cmp.b	#0x19,d0                         	| [$3ebd: cp   $19]
	jcs	l_3ffa                             	| [$3ebf: jp   c,$3FFA]
	jeq	l_4014                             	| [$3ec2: jp   z,$4014]
	cmp.b	#0x1E,d0                         	| [$3ec5: cp   $1E]
	jcs	l_4038                             	| [$3ec7: jp   c,$4038]
	jra	l_4099                             	| [$3eca: jp   $4099]
l_3ecd:
	move.b	#0x2E,(character_x_00,a2)       	| [$3ecd: ld   (ix+character_x_00),$2E]
	move.b	#0x08,(character_y_offset_03,a2)	| [$3ed1: ld   (ix+character_y_offset_03),$08]
	move.b	#0x01,(0x0c,a2)                 	| [$3ed5: ld   (ix+$0c),$01]
l_3ed9:
	move.b	(current_floor_07,a2),d1                    	| [$3ed9: ld   b,(ix+$07)]
	clr.b	d2                               	| [$3edc: ld   c,$00]
	move.b	#0x08,d3                        	| [$3ede: ld   d,$08]
	jbsr	compute_delta_height_1e6c                            	| [$3ee0: call $1E6C]
	move.b	d6,d1                           	| [$3ee3: ld   b,l]
	LOAD_POINTER	ram_pointer_85BB(a6),a0             	| [$3ee4: ld   hl,($85BB)]
	move.b	#0x01,(a0)+                      	| [$3ee7: ld   (hl),$01]
	                           	| [$3ee9: inc  hl]
	move.b	#0x20,(a0)+                      	| [$3eea: ld   (hl),$20]
	                           	| [$3eec: inc  hl]
	move.b	d1,(a0)+                         	| [$3eed: ld   (hl),b]
	                           	| [$3eee: inc  hl]
	move.b	#0x04,(a0)+                      	| [$3eef: ld   (hl),$04]
	                           	| [$3ef1: inc  hl]
	move.b	#0x68,(a0)                      	| [$3ef2: ld   (hl),$68]
	jra	l_3f1e                             	| [$3ef4: jp   $3F1E]
l_3ef7:
	move.b	#0xC2,(character_x_00,a2)       	| [$3ef7: ld   (ix+character_x_00),$C2]
	move.b	#0x08,(character_y_offset_03,a2)	| [$3efb: ld   (ix+character_y_offset_03),$08]
	move.b	#0x01,(0x0c,a2)                 	| [$3eff: ld   (ix+$0c),$01]
l_3f03:
	move.b	(current_floor_07,a2),d1                    	| [$3f03: ld   b,(ix+$07)]
	clr.b	d2                               	| [$3f06: ld   c,$00]
	move.b	#0x08,d3                        	| [$3f08: ld   d,$08]
	jbsr	compute_delta_height_1e6c                            	| [$3f0a: call $1E6C]
	move.b	d6,d1                           	| [$3f0d: ld   b,l]
	LOAD_POINTER	ram_pointer_85BB(a6),a0             	| [$3f0e: ld   hl,($85BB)]
 	move.b	#0x01,(a0)+                      	| [$3f11: ld   (hl),$01]
	                           	| [$3f13: inc  hl]
	move.b	#0xC8,(a0)+                      	| [$3f14: ld   (hl),$C8]
	                           	| [$3f16: inc  hl]
	move.b	d1,(a0)+                         	| [$3f17: ld   (hl),b]
	                           	| [$3f18: inc  hl]
	move.b	#0x05,(a0)+                      	| [$3f19: ld   (hl),$05]
	                           	| [$3f1b: inc  hl]
	move.b	#0x68,(a0)                      	| [$3f1c: ld   (hl),$68]
l_3f1e:
	move.b	current_enemy_index_85BA(a6),d0 	| [$3f1e: ld   a,(current_enemy_index_85BA)]
	                             	| [$3f21: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$3f22: ret  nz] [...]
0:
	move.b	(exiting_room_timer_0a,a2),d0                    	| [$3f23: ld   a,(ix+$0a)]
	subq.b	#1,d0                           	| [$3f26: dec  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$3f27: ret  nz] [...]
0:
	move.b	#0x62,d0                        	| [$3f28: ld   a,$62] climbing stairs
	jbsr	play_sound_3656                   	| [$3f2a: call play_sound_3656]
	rts                                    	| [$3f2d: ret]
l_3f2e:
	move.b	#0x29,(character_x_00,a2)       	| [$3f2e: ld   (ix+character_x_00),$29]
	move.b	#0x07,(0x0c,a2)                 	| [$3f32: ld   (ix+$0c),$07]
	move.b	(current_floor_07,a2),d1                    	| [$3f36: ld   b,(ix+$07)]
	clr.b	d2                               	| [$3f39: ld   c,$00]
	move.b	#0x30,d3                        	| [$3f3b: ld   d,$30]
	jbsr	compute_delta_height_1e6c                            	| [$3f3d: call $1E6C]
	move.b	d6,d1                           	| [$3f40: ld   b,l]
	LOAD_POINTER	ram_pointer_85BB(a6),a0             	| [$3f41: ld   hl,($85BB)]
	addq.w	#1,a0                           	| [$3f44: inc  hl]
	move.b	#0x26,(a0)+                      	| [$3f45: ld   (hl),$26]
	                           	| [$3f47: inc  hl]
	move.b	d1,(a0)                         	| [$3f48: ld   (hl),b]
	addq.w	#2,a0                           	| [$3f49: inc  hl] * 2
	clr.b	(a0)                             	| [$3f4b: ld   (hl),$00]
	rts                                    	| [$3f4d: ret]

l_3f4e:
	move.b	#0xC6,(character_x_00,a2)       	| [$3f4e: ld   (ix+character_x_00),$C6]
	move.b	#0x07,(0x0c,a2)                 	| [$3f52: ld   (ix+$0c),$07]
	move.b	(current_floor_07,a2),d1                    	| [$3f56: ld   b,(ix+$07)]
	clr.b	d2                               	| [$3f59: ld   c,$00]
	move.b	#0x30,d3                        	| [$3f5b: ld   d,$30]
	jbsr	compute_delta_height_1e6c                            	| [$3f5d: call $1E6C]
	move.b	d6,d1                           	| [$3f60: ld   b,l]
	LOAD_POINTER	ram_pointer_85BB(a6),a0             	| [$3f61: ld   hl,($85BB)]
 	addq.w	#1,a0                           	| [$3f64: inc  hl]
	move.b	#0xC4,(a0)+                      	| [$3f65: ld   (hl),$C4]
	                           	| [$3f67: inc  hl]
	move.b	d1,(a0)                         	| [$3f68: ld   (hl),b]
	addq.w	#2,a0                           	| [$3f69: inc  hl] * 2
	clr.b	(a0)                             	| [$3f6b: ld   (hl),$00]
	rts                                    	| [$3f6d: ret]

l_3f6e:
	subq.b	#1,(character_x_00,a2)          	| [$3f6e: dec  (ix+character_x_00)]
	addq.b	#2,(character_y_offset_03,a2)   	| [$3f71: inc  (ix+character_y_offset_03)] * 2
	LOAD_POINTER	ram_pointer_85BB(a6),a0             	| [$3f77: ld   hl,($85BB)]
	addq.w	#1,a0                           	| [$3f7a: inc  hl]
	subq.b	#1,(a0)+                         	| [$3f7b: dec  (hl)]
	                           	| [$3f7c: inc  hl]
	move.b	scroll_speed_8004(a6),d0        	| [$3f7d: ld   a,(scroll_speed_8004)]
	neg.b	d0                               	| [$3f80: neg]
	add.b	(a0),d0                          	| [$3f82: add  a,(hl)]
	move.b	d0,(a0)                         	| [$3f83: ld   (hl),a]
	jra	l_3f9c                             	| [$3f84: jr   $3F9C]

l_3f86:
	addq.b	#1,(character_x_00,a2)          	| [$3f86: inc  (ix+character_x_00)]
	addq.b	#2,(character_y_offset_03,a2)   	| [$3f89: inc  (ix+character_y_offset_03)] * 2
	LOAD_POINTER	ram_pointer_85BB(a6),a0             	| [$3f8f: ld   hl,($85BB)]
	addq.w	#1,a0                           	| [$3f92: inc  hl]
	addq.b	#1,(a0)+                         	| [$3f93: inc  (hl)]
	                           	| [$3f94: inc  hl]
	move.b	scroll_speed_8004(a6),d0        	| [$3f95: ld   a,(scroll_speed_8004)]
	neg.b	d0                               	| [$3f98: neg]
	add.b	(a0),d0                          	| [$3f9a: add  a,(hl)]
	move.b	d0,(a0)                         	| [$3f9b: ld   (hl),a]
l_3f9c:
	move.b	(0x0a,a2),d0                    	| [$3f9c: ld   a,(ix+$0a)]
	cmp.b	#0x0B,d0                         	| [$3f9f: cp   $0B]
	beq.b	0f                               	| [...]
	rts                                    	| [$3fa1: ret  nz] [...]
0:
	addq.w	#2,a0                           	| [$3fa2: inc  hl] * 2
	move.b	#0x6A,(a0)                      	| [$3fa4: ld   (hl),$6A]
	rts                                    	| [$3fa6: ret]

l_3fa7:
	move.b	#0x13,(character_x_00,a2)       	| [$3fa7: ld   (ix+character_x_00),$13]
	move.b	#0x34,(character_y_offset_03,a2)	| [$3fab: ld   (ix+character_y_offset_03),$34]
	clr.b	(0x0c,a2)                        	| [$3faf: ld   (ix+$0c),$00]
	LOAD_POINTER	ram_pointer_85BB(a6),a0             	| [$3fb3: ld   hl,($85BB)]
	addq.w	#1,a0                           	| [$3fb6: inc  hl]
	move.b	#0x10,(a0)+                      	| [$3fb7: ld   (hl),$10]
	                           	| [$3fb9: inc  hl]
	move.b	scroll_speed_8004(a6),d0        	| [$3fba: ld   a,(scroll_speed_8004)]
	neg.b	d0                               	| [$3fbd: neg]
	add.b	(a0),d0                          	| [$3fbf: add  a,(hl)]
	move.b	d0,(a0)                         	| [$3fc0: ld   (hl),a]
	addq.w	#2,a0                           	| [$3fc1: inc  hl] * 2
	move.b	#0x69,(a0)                      	| [$3fc3: ld   (hl),$69]
	rts                                    	| [$3fc5: ret]

l_3fc6:
	move.b	#0xDC,(character_x_00,a2)       	| [$3fc6: ld   (ix+character_x_00),$DC]
	move.b	#0x34,(character_y_offset_03,a2)	| [$3fca: ld   (ix+character_y_offset_03),$34]
	clr.b	(0x0c,a2)                        	| [$3fce: ld   (ix+$0c),$00]
	LOAD_POINTER	ram_pointer_85BB(a6),a0             	| [$3fd2: ld   hl,($85BB)]
	addq.w	#1,a0                           	| [$3fd5: inc  hl]
	move.b	#0xD8,(a0)+                      	| [$3fd6: ld   (hl),$D8]
	                           	| [$3fd8: inc  hl]
	move.b	scroll_speed_8004(a6),d0        	| [$3fd9: ld   a,(scroll_speed_8004)]
	neg.b	d0                               	| [$3fdc: neg]
	add.b	(a0),d0                          	| [$3fde: add  a,(hl)]
	move.b	d0,(a0)                         	| [$3fdf: ld   (hl),a]
	addq.w	#2,a0                           	| [$3fe0: inc  hl] * 2
	move.b	#0x69,(a0)                      	| [$3fe2: ld   (hl),$69]
	rts                                    	| [$3fe4: ret]

l_3fe5:
	move.b	#0x12,(character_x_00,a2)       	| [$3fe5: ld   (ix+character_x_00),$12]
	move.b	#0x36,(character_y_offset_03,a2)	| [$3fe9: ld   (ix+character_y_offset_03),$36]
l_3fed:
	LOAD_POINTER	ram_pointer_85BB(a6),a0             	| [$3fed: ld   hl,($85BB)]
	addq.w	#2,a0                           	| [$3ff0: inc  hl] * 2
	move.b	scroll_speed_8004(a6),d0        	| [$3ff2: ld   a,(scroll_speed_8004)]
	neg.b	d0                               	| [$3ff5: neg]
	add.b	(a0),d0                          	| [$3ff7: add  a,(hl)]
	move.b	d0,(a0)                         	| [$3ff8: ld   (hl),a]
	rts                                    	| [$3ff9: ret]

l_3ffa:
	move.b	#0xDD,(character_x_00,a2)       	| [$3ffa: ld   (ix+character_x_00),$DD]
	move.b	#0x36,(character_y_offset_03,a2)	| [$3ffe: ld   (ix+character_y_offset_03),$36]
	jra	l_3fed                             	| [$4002: jp   $3FED]
l_4005:
	move.b	#0x11,(character_x_00,a2)       	| [$4005: ld   (ix+character_x_00),$11]
	move.b	#0x38,(character_y_offset_03,a2)	| [$4009: ld   (ix+character_y_offset_03),$38]
	move.b	#0x01,(0x0c,a2)                 	| [$400d: ld   (ix+$0c),$01]
	jra	l_3fed                             	| [$4011: jp   $3FED]
l_4014:
	move.b	#0xDE,(character_x_00,a2)       	| [$4014: ld   (ix+character_x_00),$DE]
	move.b	#0x38,(character_y_offset_03,a2)	| [$4018: ld   (ix+character_y_offset_03),$38]
	move.b	#0x01,(0x0c,a2)                 	| [$401c: ld   (ix+$0c),$01]
	jra	l_3fed                             	| [$4020: jp   $3FED]
l_4023:
	subq.b	#1,(character_x_00,a2)          	| [$4023: dec  (ix+character_x_00)]
	subq.b	#1,(character_x_00,a2)          	| [$4026: dec  (ix+character_x_00)]
	move.b	(exiting_room_timer_0a,a2),d0                    	| [$4029: ld   a,(ix+$0a)]
	and.b	#0x01,d0                         	| [$402c: and  $01]
	move.b	(0x0c,a2),d0                    	| [$402e: ld   a,(ix+$0c)]
	move.b	#0x38,(character_y_offset_03,a2)	| [$4031: ld   (ix+character_y_offset_03),$38]
	jra	l_3fed                             	| [$4035: jp   $3FED]
l_4038:
	addq.b	#1,(character_x_00,a2)          	| [$4038: inc  (ix+character_x_00)]
	addq.b	#1,(character_x_00,a2)          	| [$403b: inc  (ix+character_x_00)]
	move.b	(exiting_room_timer_0a,a2),d0                    	| [$403e: ld   a,(ix+$0a)]
	and.b	#0x01,d0                         	| [$4041: and  $01]
	move.b	d0,(0x0c,a2)                    	| [$4043: ld   (ix+$0c),a]
	move.b	#0x38,(character_y_offset_03,a2)	| [$4046: ld   (ix+character_y_offset_03),$38]
	jra	l_3fed                             	| [$404a: jp   $3FED]

l_404d:
	move.b	#0x06,(character_x_00,a2)       	| [$404d: ld   (ix+character_x_00),$06]
	move.b	#0x0F,(character_x_right_01,a2) 	| [$4051: ld   (ix+character_x_right_01),$0F]
l_4055:
	addq.b	#1,(0x07,a2)                    	| [$4055: inc  (ix+$07)]
l_4058:
	LOAD_POINTER	ram_pointer_85BB(a6),a0             	| [$4058: ld   hl,($85BB)]
	move.b	#0xFF,(a0)                      	| [$405b: ld   (hl),$FF]
	move.b	#0x1D,(0x02,a2)                 	| [$405d: ld   (ix+$02),$1D]
	move.b	#0x06,(character_y_offset_03,a2)	| [$4061: ld   (ix+character_y_offset_03),$06]
	move.b	#CS_ON_GROUND_00,(character_situation_06,a2)	| [$4065: ld   (ix+character_situation_06),CS_ON_GROUND_00]
	move.b	current_enemy_index_85BA(a6),d0 	| [$4069: ld   a,(current_enemy_index_85BA)]
	                             	| [$406c: or   a]
	jeq	l_407d                             	| [$406d: jr   z,$407D]
	clr.b	d0                               	| [$406f: xor  a]
	move.b	d0,(0x09,a2)                    	| [$4070: ld   (ix+$09),a]
	move.b	d0,(0x0c,a2)                    	| [$4073: ld   (ix+$0c),a]
	move.b	d0,(character_delta_x_05,a2)    	| [$4076: ld   (ix+character_delta_x_05),a]
	move.b	d0,(exiting_room_timer_0a,a2)                    	| [$4079: ld   (ix+$0a),a]
	rts                                    	| [$407c: ret]

l_407d:
	move.b	#0x03,(0x09,a2)                 	| [$407d: ld   (ix+$09),$03]
	move.b	#0x01,(0x0c,a2)                 	| [$4081: ld   (ix+$0c),$01]
	move.b	(0x0b,a2),d0                    	| [$4085: ld   a,(ix+$0b)]
	add.b	d0,d0                            	| [$4088: add  a,a]
	add.b	d0,d0                            	| [$4089: add  a,a]
	subq.b	#0x02,d0                        	| [$408a: sub  $02]
	move.b	d0,(character_delta_x_05,a2)    	| [$408c: ld   (ix+character_delta_x_05),a]
	move.b	#0x0C,(exiting_room_timer_0a,a2)                 	| [$408f: ld   (ix+$0a),$0C]
	move.b	#0x60,d0                        	| [$4093: ld   a,$60]
	jbsr	play_sound_3656                   	| [$4095: call play_sound_3656] no sound???
	rts                                    	| [$4098: ret]

l_4099:
	move.b	#0xEC,(character_x_00,a2)       	| [$4099: ld   (ix+character_x_00),$EC]
	move.b	#0xF4,(character_x_right_01,a2) 	| [$409d: ld   (ix+character_x_right_01),$F4]
	jra	l_4055                             	| [$40a1: jp   $4055]

l_40a4:
	move.b	(exiting_room_timer_0a,a2),d0                    	| [$40a4: ld   a,(ix+$0a)]
	addq.b	#1,(exiting_room_timer_0a,a2)                    	| [$40a7: inc  (ix+$0a)]
	tst.b	d0                             	| [$40aa: or   a]
	jeq	l_40ee                             	| [$40ab: jp   z,$40EE]
	cmp.b	#0x05,d0                         	| [$40ae: cp   $05]
	jcs	l_4150                             	| [$40b0: jp   c,$4150]
	jeq	l_4172                             	| [$40b3: jp   z,$4172]
	cmp.b	#0x07,d0                         	| [$40b6: cp   $07]
	jcs	l_4190                             	| [$40b8: jp   c,$4190]
	jeq	l_41a6                             	| [$40bb: jp   z,$41A6]
	cmp.b	#0x1D,d0                         	| [$40be: cp   $1D]
	jcs	l_41e4                             	| [$40c0: jp   c,$41E4]
	jeq	l_421d                             	| [$40c3: jp   z,$421D]
	jra	l_423b                             	| [$40c6: jp   $423B]
l_40c9:
	move.b	(exiting_room_timer_0a,a2),d0                    	| [$40c9: ld   a,(ix+$0a)]
	addq.b	#1,(exiting_room_timer_0a,a2)                    	| [$40cc: inc  (ix+$0a)]
	tst.b	d0                             	| [$40cf: or   a]
	jeq	l_411b                             	| [$40d0: jp   z,$411B]
	cmp.b	#0x05,d0                         	| [$40d3: cp   $05]
	jcs	l_4161                             	| [$40d5: jp   c,$4161]
	jeq	l_4181                             	| [$40d8: jp   z,$4181]
	cmp.b	#0x07,d0                         	| [$40db: cp   $07]
	jcs	l_419b                             	| [$40dd: jp   c,$419B]
	jeq	l_41c5                             	| [$40e0: jp   z,$41C5]
	cmp.b	#0x1D,d0                         	| [$40e3: cp   $1D]
	jcs	l_41fc                             	| [$40e5: jp   c,$41FC]
	jeq	l_422c                             	| [$40e8: jp   z,$422C]
	jra	l_4246                             	| [$40eb: jp   $4246]
l_40ee:
	move.b	#0x09,(character_x_00,a2)       	| [$40ee: ld   (ix+character_x_00),$09]
	move.b	#0x38,(character_y_offset_03,a2)	| [$40f2: ld   (ix+character_y_offset_03),$38]
	subq.b	#1,(current_floor_07,a2)                    	| [$40f6: dec  (ix+$07)]
	move.b	#0x01,(0x0c,a2)                 	| [$40f9: ld   (ix+$0c),$01]
	move.b	(current_floor_07,a2),d1                    	| [$40fd: ld   b,(ix+$07)]
	clr.b	d2                               	| [$4100: ld   c,$00]
	move.b	#0x30,d3                        	| [$4102: ld   d,$30]
	jbsr	compute_delta_height_1e6c                            	| [$4104: call $1E6C]
	move.b	d6,d1                           	| [$4107: ld   b,l]
	LOAD_POINTER	ram_pointer_85BB(a6),a0             	| [$4108: ld   hl,($85BB)]
	move.b	#0x01,(a0)+                      	| [$410b: ld   (hl),$01]
	                           	| [$410d: inc  hl]
	move.b	#0x10,(a0)+                      	| [$410e: ld   (hl),$10]
	                           	| [$4110: inc  hl]
	move.b	d1,(a0)+                         	| [$4111: ld   (hl),b]
	                           	| [$4112: inc  hl]
	move.b	#0x04,(a0)+                      	| [$4113: ld   (hl),$04]
	                           	| [$4115: inc  hl]
	move.b	#0x69,(a0)                      	| [$4116: ld   (hl),$69]
	jra	l_4145                             	| [$4118: jp   $4145]
l_411b:
	move.b	#0xE6,(character_x_00,a2)       	| [$411b: ld   (ix+character_x_00),$E6]
	move.b	#0x38,(character_y_offset_03,a2)	| [$411f: ld   (ix+character_y_offset_03),$38]
	subq.b	#1,(current_floor_07,a2)                    	| [$4123: dec  (ix+$07)]
	move.b	#0x01,(0x0c,a2)                 	| [$4126: ld   (ix+$0c),$01]
	move.b	(current_floor_07,a2),d1                    	| [$412a: ld   b,(ix+$07)]
	clr.b	d2                               	| [$412d: ld   c,$00]
	move.b	#0x30,d3                        	| [$412f: ld   d,$30]
	jbsr	compute_delta_height_1e6c                            	| [$4131: call $1E6C]
	move.b	d6,d1                           	| [$4134: ld   b,l]
	LOAD_POINTER	ram_pointer_85BB(a6),a0             	| [$4135: ld   hl,($85BB)]
	move.b	#0x01,(a0)+                      	| [$4138: ld   (hl),$01]
	                           	| [$413a: inc  hl]
	move.b	#0xD8,(a0)+                      	| [$413b: ld   (hl),$D8]
	                           	| [$413d: inc  hl]
	move.b	d1,(a0)+                         	| [$413e: ld   (hl),b]
	                           	| [$413f: inc  hl]
	move.b	#0x05,(a0)+                      	| [$4140: ld   (hl),$05]
	                           	| [$4142: inc  hl]
	move.b	#0x69,(a0)                      	| [$4143: ld   (hl),$69]
l_4145:
	move.b	current_enemy_index_85BA(a6),d0 	| [$4145: ld   a,(current_enemy_index_85BA)]
	                            	| [$4148: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$4149: ret  nz] [...]
0:
	move.b	#0x63,d0                        	| [$414a: ld   a,$63] climbing down stairs
	jbsr	play_sound_3656                   	| [$414c: call play_sound_3656]
	rts                                    	| [$414f: ret]

l_4150:
	addq.b	#1,(character_x_00,a2)          	| [$4150: inc  (ix+character_x_00)]
	addq.b	#1,(character_x_00,a2)          	| [$4153: inc  (ix+character_x_00)]
	move.b	(exiting_room_timer_0a,a2),d0                    	| [$4156: ld   a,(ix+$0a)]
	and.b	#0x01,d0                         	| [$4159: and  $01]
	move.b	d0,(0x0c,a2)                    	| [$415b: ld   (ix+$0c),a]
	jra	l_3fed                             	| [$415e: jp   $3FED]

l_4161:
	subq.b	#1,(character_x_00,a2)          	| [$4161: dec  (ix+character_x_00)]
	subq.b	#1,(character_x_00,a2)          	| [$4164: dec  (ix+character_x_00)]
	move.b	(exiting_room_timer_0a,a2),d0                    	| [$4167: ld   a,(ix+$0a)]
	and.b	#0x01,d0                         	| [$416a: and  $01]
	move.b	d0,(0x0c,a2)                    	| [$416c: ld   (ix+$0c),a]
	jra	l_3fed                             	| [$416f: jp   $3FED]

l_4172:
	move.b	#0x12,(character_x_00,a2)       	| [$4172: ld   (ix+character_x_00),$12]
	move.b	#0x36,(character_y_offset_03,a2)	| [$4176: ld   (ix+character_y_offset_03),$36]
	clr.b	(0x0c,a2)                        	| [$417a: ld   (ix+$0c),$00]
	jra	l_3fed                             	| [$417e: jp   $3FED]

l_4181:
	move.b	#0xDE,(character_x_00,a2)       	| [$4181: ld   (ix+character_x_00),$DE]
	move.b	#0x36,(character_y_offset_03,a2)	| [$4185: ld   (ix+character_y_offset_03),$36]
	clr.b	(0x0c,a2)                        	| [$4189: ld   (ix+$0c),$00]
	jra	l_3fed                             	| [$418d: jp   $3FED]

l_4190:
	move.b	#0x13,(character_x_00,a2)       	| [$4190: ld   (ix+character_x_00),$13]
	move.b	#0x34,(character_y_offset_03,a2)	| [$4194: ld   (ix+character_y_offset_03),$34]
	jra	l_3fed                             	| [$4198: jp   $3FED]

l_419b:
	move.b	#0xDC,(character_x_00,a2)       	| [$419b: ld   (ix+character_x_00),$DC]
	move.b	#0x34,(character_y_offset_03,a2)	| [$419f: ld   (ix+character_y_offset_03),$34]
	jra	l_3fed                             	| [$41a3: jp   $3FED]

l_41a6:
	move.b	#0x15,(character_x_00,a2)       	| [$41a6: ld   (ix+character_x_00),$15]
	move.b	#0x32,(character_y_offset_03,a2)	| [$41aa: ld   (ix+character_y_offset_03),$32]
	move.b	#0x08,(0x0c,a2)                 	| [$41ae: ld   (ix+$0c),$08]
	LOAD_POINTER	ram_pointer_85BB(a6),a0             	| [$41b2: ld   hl,($85BB)]
	addq.w	#1,a0                           	| [$41b5: inc  hl]
	move.b	#0x10,(a0)+                      	| [$41b6: ld   (hl),$10]
	                           	| [$41b8: inc  hl]
	move.b	scroll_speed_8004(a6),d0        	| [$41b9: ld   a,(scroll_speed_8004)]
	neg.b	d0                               	| [$41bc: neg]
	add.b	(a0),d0                          	| [$41be: add  a,(hl)]
	move.b	d0,(a0)                         	| [$41bf: ld   (hl),a]
	addq.w	#2,a0                           	| [$41c0: inc  hl] * 2
	move.b	#0x6A,(a0)                      	| [$41c2: ld   (hl),$6A]
	rts                                    	| [$41c4: ret]
l_41c5:
	move.b	#0xDA,(character_x_00,a2)       	| [$41c5: ld   (ix+character_x_00),$DA]
	move.b	#0x32,(character_y_offset_03,a2)	| [$41c9: ld   (ix+character_y_offset_03),$32]
	move.b	#0x08,(0x0c,a2)                 	| [$41cd: ld   (ix+$0c),$08]
	LOAD_POINTER	ram_pointer_85BB(a6),a0             	| [$41d1: ld   hl,($85BB)]

	addq.w	#1,a0                           	| [$41d4: inc  hl]
	move.b	#0xD8,(a0)+                      	| [$41d5: ld   (hl),$D8]
	                           	| [$41d7: inc  hl]
	move.b	scroll_speed_8004(a6),d0        	| [$41d8: ld   a,(scroll_speed_8004)]
	neg.b	d0                               	| [$41db: neg]
	add.b	(a0),d0                          	| [$41dd: add  a,(hl)]
	move.b	d0,(a0)                         	| [$41de: ld   (hl),a]
	addq.w	#2,a0                           	| [$41df: inc  hl] * 2
	move.b	#0x6A,(a0)                      	| [$41e1: ld   (hl),$6A]
	rts                                    	| [$41e3: ret]
l_41e4:
	addq.b	#1,(character_x_00,a2)          	| [$41e4: inc  (ix+character_x_00)]
	subq.b	#2,(character_y_offset_03,a2)   	| [$41e7: dec  (ix+character_y_offset_03)] * 2
	LOAD_POINTER	ram_pointer_85BB(a6),a0             	| [$41ed: ld   hl,($85BB)]
	addq.w	#1,a0                           	| [$41f0: inc  hl]
	addq.b	#1,(a0)+                         	| [$41f1: inc  (hl)]
	                           	| [$41f2: inc  hl]
	move.b	scroll_speed_8004(a6),d0        	| [$41f3: ld   a,(scroll_speed_8004)]
	neg.b	d0                               	| [$41f6: neg]
	add.b	(a0),d0                          	| [$41f8: add  a,(hl)]
	move.b	d0,(a0)                         	| [$41f9: ld   (hl),a]
	jra	l_4212                             	| [$41fa: jr   $4212]
l_41fc:
	subq.b	#1,(character_x_00,a2)          	| [$41fc: dec  (ix+character_x_00)]
	subq.b	#2,(character_y_offset_03,a2)   	| [$41ff: dec  (ix+character_y_offset_03)] * 2
	LOAD_POINTER	ram_pointer_85BB(a6),a0             	| [$4205: ld   hl,($85BB)]
	addq.w	#1,a0                           	| [$4208: inc  hl]
	subq.b	#1,(a0)+                         	| [$4209: dec  (hl)]
	                           	| [$420a: inc  hl]
	move.b	scroll_speed_8004(a6),d0        	| [$420b: ld   a,(scroll_speed_8004)]
	neg.b	d0                               	| [$420e: neg]
	add.b	(a0),d0                          	| [$4210: add  a,(hl)]
	move.b	d0,(a0)                         	| [$4211: ld   (hl),a]
l_4212:
	move.b	(exiting_room_timer_0a,a2),d0                    	| [$4212: ld   a,(ix+$0a)]
	cmp.b	#0x16,d0                         	| [$4215: cp   $16]
	beq.b	0f                               	| [...]
	rts                                    	| [$4217: ret  nz] [...]
0:
	addq.w	#2,a0                           	| [$4218: inc  hl] * 2
	clr.b	(a0)                             	| [$421a: ld   (hl),$00]
	rts                                    	| [$421c: ret]
l_421d:
	move.b	#0x2A,(character_x_00,a2)       	| [$421d: ld   (ix+character_x_00),$2A]
	move.b	#0x08,(character_y_offset_03,a2)	| [$4221: ld   (ix+character_y_offset_03),$08]
	move.b	#0x01,(0x0c,a2)                 	| [$4225: ld   (ix+$0c),$01]
	jra	l_3ed9                             	| [$4229: jp   $3ED9]
l_422c:
	move.b	#0xC5,(character_x_00,a2)       	| [$422c: ld   (ix+character_x_00),$C5]
	move.b	#0x08,(character_y_offset_03,a2)	| [$4230: ld   (ix+character_y_offset_03),$08]
	move.b	#0x01,(0x0c,a2)                 	| [$4234: ld   (ix+$0c),$01]
	jra	l_3f03                             	| [$4238: jp   $3F03]
l_423b:
	move.b	#0x34,(character_x_00,a2)       	| [$423b: ld   (ix+character_x_00),$34]
	move.b	#0x3C,(character_x_right_01,a2) 	| [$423f: ld   (ix+character_x_right_01),$3C]
	jra	l_4058                             	| [$4243: jp   $4058]
l_4246:
	move.b	#0xBE,(character_x_00,a2)       	| [$4246: ld   (ix+character_x_00),$BE]
	move.b	#0xC6,(character_x_right_01,a2) 	| [$424a: ld   (ix+character_x_right_01),$C6]
	jra	l_4058                             	| [$424e: jp   $4058]
l_4251:
	jbsr	l_4266                            	| [$4251: call $4266]
	jbsr	l_3661                            	| [$4254: call $3661]
	move.b	(0x09,a2),d0                    	| [$4257: ld   a,(ix+$09)]
	cmp.b	#0x08,d0                         	| [$425a: cp   $08]
	jne	l_4262                             	| [$425c: jr   nz,$4262]
	clr.b	(0x09,a2)                        	| [$425e: ld   (ix+$09),$00]
l_4262:
	jbsr	l_4558                            	| [$4262: call $4558]
	rts                                    	| [$4265: ret]
l_4266:
	lea	protection_variable_8648(a6),a0    	| [$4266: ld   hl,protection_variable_8648]
	add.b	(a0),d0                          	| [$4269: add  a,(hl)]
	or.b	#0xBD,d0                          	| [$426a: or   $BD]
	                           	| [$426c: dec  hl]
	or.b	-(a0),d0                           	| [$426d: or   (hl)]
	eor.b	#0x63,d0                         	| [$426e: xor  $63]
	jbsr	rst_20                            	| [$4270: rst  $20]
	jbsr	l_42a7                            	| [$4271: call $42A7]
	move.b	(0x02,a2),d0                    	| [$4274: ld   a,(ix+$02)]
	sub.b	#0x30,d0                         	| [$4277: sub  $30]
	jcc	l_429e                             	| [$4279: jr   nc,$429E]
	move.b	(character_y_offset_03,a2),d0   	| [$427b: ld   a,(ix+character_y_offset_03)]
	cmp.b	#0x07,d0                         	| [$427e: cp   $07]
	bmi.b	0f                               	| [...]
	rts                                    	| [$4280: ret  p] [...]
0:
	move.b	(exiting_room_timer_0a,a2),d0                    	| [$4281: ld   a,(ix+$0a)]
	cmp.b	#0x08,d0                         	| [$4284: cp   $08]
	bcc.b	0f                               	| [...]
	rts                                    	| [$4286: ret  c] [...]
0:
	move.b	#0x06,(character_y_offset_03,a2)	| [$4287: ld   (ix+character_y_offset_03),$06]
	move.b	#0x1D,(0x02,a2)                 	| [$428b: ld   (ix+$02),$1D]
	move.b	#0x08,(enemy_state_09,a2)                 	| [$428f: ld   (ix+$09),$08]
	clr.b	d0                               	| [$4293: xor  a]
	move.b	d0,(character_delta_x_05,a2)    	| [$4294: ld   (ix+character_delta_x_05),a]
	move.b	d0,(0x0c,a2)                    	| [$4297: ld   (ix+$0c),a]
	move.b	d0,(exiting_room_timer_0a,a2)                    	| [$429a: ld   (ix+$0a),a]
	rts                                    	| [$429d: ret]
l_429e:
	move.b	#0x2E,(0x02,a2)                 	| [$429e: ld   (ix+$02),$2E]
	move.b	#0x08,(exiting_room_timer_0a,a2)                 	| [$42a2: ld   (ix+$0a),$08]
	rts                                    	| [$42a6: ret]

l_42a7:
	move.b	(move_direction_0d,a2),d0       	| [$42a7: ld   a,(ix+move_direction_0d)]
	and.b	#0x03,d0                         	| [$42aa: and  $03]
	jeq	l_42b3                             	| [$42ac: jr   z,$42B3]
	lsr.b	#1,d0                            	| [$42ae: srl  a]
	move.b	d0,(0x0b,a2)                    	| [$42b0: ld   (ix+$0b),a]
l_42b3:
	move.b	(character_delta_x_05,a2),d0    	| [$42b3: ld   a,(ix+character_delta_x_05)]
	add.b	(character_x_00,a2),d0           	| [$42b6: add  a,(ix+character_x_00)]
	move.b	d0,(character_x_00,a2)          	| [$42b9: ld   (ix+character_x_00),a]
	add.b	#0x08,d0                         	| [$42bc: add  a,$08]
	move.b	d0,(character_x_right_01,a2)    	| [$42be: ld   (ix+character_x_right_01),a]
	moveq	#0,d6                               	| [$42c1: ld   h,$00]
	move.b	(exiting_room_timer_0a,a2),d0                    	| [$42c3: ld   a,(ix+$0a)]
	add.b	d0,d0                            	| [$42c6: add  a,a]
	add.b	d0,d0                            	| [$42c7: add  a,a]
	move.b	d0,d6                           	| [$42c8: ld   l,a]
	lea	table_42E2(pc),a1                      	| [$42c9: ld   de,table_42E2]
	lea	(a1,d6.w),a0                        	| [$42cc: add  hl,de]
	move.b	(a0)+,d0                         	| [$42cd: ld   a,(hl)]
												| [$42ce: inc  hl]
	add.b	(character_y_offset_03,a2),d0    	| [$42cf: add  a,(ix+character_y_offset_03)]
	move.b	d0,(character_y_offset_03,a2)   	| [$42d2: ld   (ix+character_y_offset_03),a]
	add.b	(a0)+,d0                          	| [$42d5: add  a,(hl)]
												| [$42d6: inc  hl]
	move.b	d0,(0x02,a2)                    	| [$42d7: ld   (ix+$02),a]
	move.b	(a0),d0                         	| [$42da: ld   a,(hl)]
	move.b	d0,(0x0c,a2)                    	| [$42db: ld   (ix+$0c),a]
	addq.b	#1,(0x0a,a2)                    	| [$42de: inc  (ix+$0a)]
	rts                                    	| [$42e1: ret]

table_42E2:
	.byte	0x07
	.byte	0x15
	.byte	0x03
	.byte	0x00
	.byte	0x05
	.byte	0x15
	.byte	0x03
	.byte	0x01,0x07,0x0F
	.byte	0x05
	.byte	0x02
	.byte	0x03
	.byte	0x0F
	.byte	0x05
	.byte	0x03
	.byte	0x02
	.byte	0x0F
	.byte	0x05
	.byte	0x04
	.byte	0x01,0x0F,0x05
	.byte	0x05
	.byte	0x00
	.byte	0x0F
	.byte	0x05
	.byte	0x06,0xFF
	.byte	0x0F
	.byte	0x05
	.byte	0x07
	.byte	0xFE,0x0F
	.byte	0x05
	.byte	0x08
	.byte	0xFD
	.byte	0x0F
	.byte	0x05
	.byte	0x09
	.byte	0xFC,0x0F,0x05
	.byte	0x0A
	.byte	0xFB
	.byte	0x0F
	.byte	0x05
	.byte	0x0B
	.byte	0xF9
	.byte	0x15
	.byte	0x03
	.byte	0x0C
	.byte	0xF9
	.byte	0x15
	.byte	0x03
	.byte	0x0D
	.byte	0xF9
	.byte	0x15
	.byte	0x03
	.byte	0x0E,0xF9
	.byte	0x15
	.byte	0x03
	.byte	0x0F
	.byte	0xF9
	.byte	0x15
	.byte	0x03
	.byte	0x10,0xF9
	.byte	0x15
	.byte	0x03
	.byte	0x11
	.align	2

l_432a:
	move.b	(enemy_state_09,a2),d0                    	| [$432a: ld   a,(ix+$09)]
	                             	| [$432d: or   a]
	bpl.b	0f                               	| [...]
	rts                                    	| [$432e: ret  m] [...]
0:
	cmp.b	#0x05,d0                         	| [$432f: cp   $05]
	jcs	l_433c                             	| [$4331: jp   c,$433C]
	cmp.b	#0x07,d0                         	| [$4334: cp   $07]
	jcs	l_3830                             	| [$4336: jp   c,$3830]
	jra	l_4251                             	| [$4339: jp   $4251]
l_433c:
	move.b	(character_situation_06,a2),d0  	| [$433c: ld   a,(ix+character_situation_06)]
	cmp.b	#CS_FALLING_03,d0                	| [$433f: cp   CS_FALLING_03]
	jcs	l_434f                             	| [$4341: jp   c,$434F]
	jeq	l_3b2b                             	| [$4344: jp   z,$3B2B]
	cmp.b	#CS_IN_ROOM_05,d0                	| [$4347: cp   CS_IN_ROOM_05]
	jcs	l_3e64                             	| [$4349: jp   c,$3E64]
	jra	update_in_room_timer_3c3e                             	| [$434c: jp   $3C3E]
l_434f:
	jbsr	l_4359                            	| [$434f: call $4359]
	jbsr	l_3661                            	| [$4352: call $3661]
	jbsr	l_4558                            	| [$4355: call $4558]
	rts                                    	| [$4358: ret]

l_4359:
	move.b	(enemy_state_09,a2),d0                    	| [$4359: ld   a,(ix+$09)]
	cmp.b	#0x01,d0                         	| [$435c: cp   $01]
	jeq	character_walks_438C               	| [$435e: jp   z,character_walks_438C]
	jcs	handle_character_ground_controls_442A	| [$4361: jp   c,handle_character_ground_controls_442A]
	cmp.b	#0x03,d0                         	| [$4364: cp   $03]
	jeq	handle_character_entering_elevator_446E	| [$4366: jp   z,handle_character_entering_elevator_446E]
	jcs	l_4510                             	| [$4369: jp   c,$4510]
	move.b	(move_direction_0d,a2),d0       	| [$436c: ld   a,(ix+move_direction_0d)]
	btst.b	#3,d0                           	| [$436f: bit  3,a]
	bne.b	0f                               	| [...]
	rts                                    	| [$4371: ret  z] [...]
0:
	move.b	(character_x_00,a2),d0          	| [$4372: ld   a,(ix+character_x_00)]
	addq.b	#0x05,d0                        	| [$4375: add  a,$05]
	move.b	d0,(character_x_00,a2)          	| [$4377: ld   (ix+character_x_00),a]
	add.b	#0x08,d0                         	| [$437a: add  a,$08]
	move.b	d0,(character_x_right_01,a2)    	| [$437c: ld   (ix+character_x_right_01),a]
	move.b	#0x14,(character_y_offset_down_02,a2)  	| [$437f: ld   (ix+$02),$14]
	move.b	#0x02,(enemy_state_09,a2)                 	| [$4383: ld   (ix+$09),$02]
	move.b	#0x02,(character_unknown_0c,a2)                 	| [$4387: ld   (ix+$0c),$02]
	rts                                    	| [$438b: ret]

character_walks_438C:
	jbsr	l_45b4                            	| [$438c: call $45B4]
	move.b	(move_direction_0d,a2),d0       	| [$438f: ld   a,(ix+move_direction_0d)]
	btst.b	#4,d0                           	| [$4392: bit  4,a]
	jne	is_jumping_43F5                    	| [$4394: jp   nz,is_jumping_43F5]
	ror.b	#1,d0                            	| [$4397: rrca]
	jcs	l_43b2                             	| [$4398: jp   c,$43B2]
	ror.b	#1,d0                            	| [$439b: rrca]
	jcs	l_43e7                             	| [$439c: jp   c,$43E7]
l_439f:
	move.b	#0x1D,(0x02,a2)                 	| [$439f: ld   (ix+$02),$1D]
	move.b	#0x06,(character_y_offset_03,a2)	| [$43a3: ld   (ix+character_y_offset_03),$06]
	clr.b	d0                               	| [$43a7: xor  a]
	move.b	d0,(character_delta_x_05,a2)    	| [$43a8: ld   (ix+character_delta_x_05),a]
	move.b	d0,(enemy_state_09,a2)                    	| [$43ab: ld   (ix+$09),a]
	move.b	d0,(character_unknown_0c,a2)                    	| [$43ae: ld   (ix+$0c),a]
	rts                                    	| [$43b1: ret]
l_43b2:
	move.b	(0x0b,a2),d0                    	| [$43b2: ld   a,(ix+$0b)]
	clr.b	(0x0b,a2)                        	| [$43b5: ld   (ix+$0b),$00]
	tst.b	d0                             	| [$43b9: or   a]
	jne	l_439f                             	| [$43ba: jp   nz,$439F]
l_43bd:
	move.b	(0x0a,a2),d0                    	| [$43bd: ld   a,(ix+$0a)]
	eor.b	#0x01,d0                         	| [$43c0: xor  $01]
	beq.b	0f                               	| [...]
	jbsr	l_441c                            	| [$43c2: call nz,$441C]
0:
	move.b	d0,(0x0a,a2)                    	| [$43c5: ld   (ix+$0a),a]
	move.b	d0,(0x0c,a2)                    	| [$43c8: ld   (ix+$0c),a]
	move.b	d0,d1                           	| [$43cb: ld   b,a]
	move.b	#0x06,d0                        	| [$43cc: ld   a,$06]
	add.b	d1,d0                            	| [$43ce: add  a,b]
	move.b	d0,(character_y_offset_03,a2)   	| [$43cf: ld   (ix+character_y_offset_03),a]
	add.b	#0x17,d0                         	| [$43d2: add  a,$17]
	move.b	d0,(character_y_offset_down_02,a2) 	| [$43d4: ld   (ix+$02),a]
	move.b	(character_delta_x_05,a2),d1    	| [$43d7: ld   b,(ix+character_delta_x_05)]
	move.b	(character_x_00,a2),d0          	| [$43da: ld   a,(ix+character_x_00)]
	add.b	d1,d0                            	| [$43dd: add  a,b]
	move.b	d0,(character_x_00,a2)          	| [$43de: ld   (ix+character_x_00),a]
	add.b	#0x08,d0                         	| [$43e1: add  a,$08]
	move.b	d0,(character_x_right_01,a2)    	| [$43e3: ld   (ix+character_x_right_01),a]
	rts                                    	| [$43e6: ret]
l_43e7:
	move.b	(0x0b,a2),d0                    	| [$43e7: ld   a,(ix+$0b)]
	move.b	#0x01,(0x0b,a2)                 	| [$43ea: ld   (ix+$0b),$01]
	tst.b	d0                             	| [$43ee: or   a]
	jeq	l_439f                             	| [$43ef: jp   z,$439F]
	jra	l_43bd                             	| [$43f2: jp   $43BD]

* ix:851A for player
is_jumping_43F5:
	clr.b	d0                               	| [$43f8: xor  a]
	tst.b	current_enemy_index_85BA(a6) 	| [$43f5: ld   a,(current_enemy_index_85BA)]
	beq.b	0f                               	| [...]
	rts                                    	| [$43f9: ret  nz] [...]
0:
	move.b	(move_direction_0d,a2),d0       	| [$43fa: ld   a,(ix+move_direction_0d)]
	and.b	#0x03,d0                         	| [$43fd: and  $03]
	clr.b	d2                               	| [$43ff: ld   c,$00]
	tst.b	d0                             	| [$4401: or   a]
	jeq	l_440b                             	| [$4402: jr   z,$440B]
	move.b	#0xFE,d2                        	| [$4404: ld   c,$FE]
	subq.b	#1,d0                           	| [$4406: dec  a]
	jeq	l_440b                             	| [$4407: jr   z,$440B]
	move.b	#0x02,d2                        	| [$4409: ld   c,$02]
l_440b:
	move.b	d2,(character_delta_x_05,a2)    	| [$440b: ld   (ix+character_delta_x_05),c]
	clr.b	(0x0a,a2)                        	| [$440e: ld   (ix+$0a),$00]
	move.b	#0x07,(0x09,a2)                 	| [$4412: ld   (ix+$09),$07]
	move.b	#0x33,d0                        	| [$4416: ld   a,$33] player jump sound
	jbsr	play_sound_3656                   	| [$4418: call play_sound_3656]
	rts                                    	| [$441b: ret]

l_441c:
	move.w	d0,-(sp)                        	| [$441c: push af]
	move.b	current_enemy_index_85BA(a6),d0 	| [$441d: ld   a,(current_enemy_index_85BA)]
	                             	| [$4420: or   a]
	jne	l_4428                             	    | [$4421: jr   nz,$4428]
	move.b	#0x66,d0                        	| [$4423: ld   a,$66] player walk sound
	jbsr	play_sound_3656                   	| [$4425: call play_sound_3656]
l_4428:
	move.w	(sp)+,d0                        	| [$4428: pop  af]
	rts                                    	| [$4429: ret]

* not in elevator: only left, right, jump, crouch
handle_character_ground_controls_442A:
	jbsr	l_45b4                            	| [$442a: call $45B4]
	move.b	(move_direction_0d,a2),d0       	| [$442d: ld   a,(ix+move_direction_0d)] read character direction (player: player_move_direction_8527)
	btst.b	#4,d0                           	| [$4430: bit  4,a]
	jne	is_jumping_43F5                    	| [$4432: jp   nz,is_jumping_43F5]
	ror.b	#1,d0                            	| [$4435: rrca]
	jcs	move_character_left_4450           	| [$4436: jp   c,move_character_left_4450]
	ror.b	#1,d0                            	| [$4439: rrca]
	jcs	move_character_right_445F          	| [$443a: jp   c,move_character_right_445F]
	ror.b	#1,d0                            	| [$443d: rrca]
	bcs.b	0f                               	| [...]
	rts                                    	| [$443e: ret  nc] [...]
0:
* character crouches
	move.b	#0x14,(character_y_offset_down_02,a2)                 	| [$443f: ld   (ix+$02),$14]
	move.b	#0x06,(character_y_offset_03,a2)	| [$4443: ld   (ix+character_y_offset_03),$06]
	move.b	#0x02,(0x09,a2)                 	| [$4447: ld   (ix+$09),$02]
	move.b	#0x02,(0x0c,a2)                 	| [$444b: ld   (ix+$0c),$02]
	rts                                    	| [$444f: ret]

move_character_left_4450:
	move.b	#0xFE,(character_delta_x_05,a2) 	| [$4450: ld   (ix+character_delta_x_05),$FE]
	move.b	#0x01,(0x09,a2)                 	| [$4454: ld   (ix+$09),$01]
	clr.b	(0x0a,a2)                        	| [$4458: ld   (ix+$0a),$00]
	jra	l_43b2                             	| [$445c: jp   $43B2]

move_character_right_445F:
	move.b	#0x02,(character_delta_x_05,a2) 	| [$445f: ld   (ix+character_delta_x_05),$02]
	move.b	#0x01,(0x09,a2)                 	| [$4463: ld   (ix+$09),$01]
	clr.b	(0x0a,a2)                        	| [$4467: ld   (ix+$0a),$00]
	jra	l_43e7                             	| [$446b: jp   $43E7]

handle_character_entering_elevator_446E:
	move.b	(move_direction_0d,a2),d0       	| [$446e: ld   a,(ix+move_direction_0d)]
	and.b	#0x03,d0                         	| [$4471: and  $03]
	jeq	l_4482                             	| [$4473: jp   z,$4482]
* left or right: jumps out of elevator (game forces jump)
	clr.b	(0x0b,a2)                        	| [$4476: ld   (ix+$0b),$00]
	roxr.b	#1,d0                           	| [$447a: rra]
	jcs	l_4482                             	| [$447b: jp   c,$4482]
	move.b	#0x01,(0x0b,a2)                 	| [$447e: ld   (ix+$0b),$01]
l_4482:
	move.b	(move_direction_0d,a2),d0       	| [$4482: ld   a,(ix+move_direction_0d)]
	btst.b	#4,d0                           	| [$4485: bit  4,a]
	jne	l_44bb                             	| [$4487: jp   nz,$44BB]
	move.b	(character_delta_x_05,a2),d0    	| [$448a: ld   a,(ix+character_delta_x_05)]
	add.b	(character_x_00,a2),d0           	| [$448d: add  a,(ix+character_x_00)]
	move.b	d0,(character_x_00,a2)          	| [$4490: ld   (ix+character_x_00),a]
	add.b	#0x08,d0                         	| [$4493: add  a,$08]
	move.b	d0,(character_x_right_01,a2)    	| [$4495: ld   (ix+character_x_right_01),a]
	move.b	(0x0a,a2),d0                    	| [$4498: ld   a,(ix+$0a)]
	cmp.b	#0x0E,d0                         	| [$449b: cp   $0E]
	jeq	l_439f                             	| [$449d: jp   z,$439F]
	clr.w	d5                               	| [$44a0: ld   h,$00]
	add.b	d0,d0                            	| [$44a2: add  a,a]
	add.b	d0,d0                            	| [$44a3: add  a,a]
	move.b	d0,d5                           	| [$44a4: ld   l,a]
	lea	table_44D8(pc),a0                       | [$44a5: ld   de,$44D8]
	add.w	d5,a0                            	| [$44a8: add  hl,de]
	move.b	(a0)+,d0                         	| [$44a9: ld   a,(hl)]
	move.b	d0,(0x02,a2)                    	| [$44aa: ld   (ix+$02),a]
												| [$44ad: inc  hl]
	move.b	(a0)+,d0                         	| [$44ae: ld   a,(hl)]
	move.b	d0,(character_y_offset_03,a2)   	| [$44af: ld   (ix+character_y_offset_03),a]
	                           	                | [$44b2: inc  hl]
	move.b	(a0),d0                         	| [$44b3: ld   a,(hl)]
	move.b	d0,(0x0c,a2)                    	| [$44b4: ld   (ix+$0c),a]
	addq.b	#1,(0x0a,a2)                    	| [$44b7: inc  (ix+$0a)]
	rts                                    	| [$44ba: ret]
l_44bb:
	clr.b	(0x0a,a2)                        	| [$44bb: ld   (ix+$0a),$00]
	move.b	#0x07,(0x09,a2)                 	| [$44bf: ld   (ix+$09),$07]
	move.b	#0x06,d0                        	| [$44c3: ld   a,$06]
	sub.b	(character_y_offset_03,a2),d0    	| [$44c5: sub  (ix+character_y_offset_03)]
	move.b	#0x06,(character_y_offset_03,a2)	| [$44c8: ld   (ix+character_y_offset_03),$06]
	add.b	(0x02,a2),d0                     	| [$44cc: add  a,(ix+$02)]
	move.b	d0,(0x02,a2)                    	| [$44cf: ld   (ix+$02),a]
	move.b	#0x33,d0                        	| [$44d2: ld   a,$33]
	jbsr	play_sound_3656                   	| [$44d4: call play_sound_3656]
	rts                                    	| [$44d7: ret]

table_44D8:
	.byte	0x22,0x0D,0x03
	.byte	0x00
	.byte	0x27
	.byte	0x12
	.byte	0x03
	.byte	0x01,0x28,0x19
	.byte	0x05
	.byte	0x02
	.byte	0x2B
	.byte	0x1C
	.byte	0x05
	.byte	0x03
	.byte	0x2D
	.byte	0x1E,0x05
	.byte	0x04
	.byte	0x2E,0x1F
	.byte	0x05
	.byte	0x05
	.byte	0x2E,0x1F
	.byte	0x05
	.byte	0x06,0x2D
	.byte	0x1E,0x05
	.byte	0x07
	.byte	0x2B
	.byte	0x1C
	.byte	0x05
	.byte	0x08
	.byte	0x28,0x19
	.byte	0x05
	.byte	0x09
	.byte	0x24
	.byte	0x15
	.byte	0x05
	.byte	0x0A
	.byte	0x22,0x0D,0x03
	.byte	0x0B
	.byte	0x21,0x0A,0x00
	.byte	0x0C
	.byte	0x1F
	.byte	0x08
	.byte	0x01,0x0D
	.align	2
l_4510:
	move.b	(move_direction_0d,a2),d0       	| [$4510: ld   a,(ix+move_direction_0d)]
	btst.b	#4,d0                           	| [$4513: bit  4,a]
	jne	is_jumping_43F5                    	| [$4515: jp   nz,is_jumping_43F5]
	ror.b	#1,d0                            	| [$4518: rrca]
	jcs	l_4529                             	| [$4519: jp   c,$4529]
	ror.b	#1,d0                            	| [$451c: rrca]
	jcs	l_452e                             	| [$451d: jp   c,$452E]
	ror.b	#1,d0                            	| [$4520: rrca]
	jcs	l_4533                             	| [$4521: jp   c,$4533]
	ror.b	#1,d0                            	| [$4524: rrca]
	bcs.b	0f                               	| [...]
	rts                                    	| [$4525: ret  nc] [...]
0:
	jra	l_439f                             	| [$4526: jp   $439F]
l_4529:
	clr.b	(0x0b,a2)                        	| [$4529: ld   (ix+$0b),$00]
	rts                                    	| [$452d: ret]
l_452e:
	move.b	#0x01,(0x0b,a2)                 	| [$452e: ld   (ix+$0b),$01]
	rts                                    	| [$4532: ret]
l_4533:
	move.b	(character_situation_06,a2),d0  	| [$4533: ld   a,(ix+character_situation_06)]
	cmp.b	#CS_ABOVE_ELEVATOR_02,d0         	| [$4536: cp   CS_ABOVE_ELEVATOR_02]
	bne.b	0f                               	| [...]
	rts                                    	| [$4538: ret  z] [...]
0:
	move.b	current_enemy_index_85BA(a6),d0 	| [$4539: ld   a,(current_enemy_index_85BA)]
	                             	| [$453c: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$453d: ret  z] [...]
0:
	move.b	(character_x_00,a2),d0          	| [$453e: ld   a,(ix+character_x_00)]
	subq.b	#0x05,d0                        	| [$4541: sub  $05]
	move.b	d0,(character_x_00,a2)          	| [$4543: ld   (ix+character_x_00),a]
	add.b	#0x12,d0                         	| [$4546: add  a,$12]
	move.b	d0,(character_x_right_01,a2)    	| [$4548: ld   (ix+character_x_right_01),a]
	move.b	#0x0B,(0x02,a2)                 	| [$454b: ld   (ix+$02),$0B]
	move.b	#0x04,(0x09,a2)                 	| [$454f: ld   (ix+$09),$04]
	move.b	#0x09,(0x0c,a2)                 	| [$4553: ld   (ix+$0c),$09]
	rts                                    	| [$4557: ret]

l_4558:
	move.b	(move_direction_0d,a2),d0       	| [$4558: ld   a,(ix+move_direction_0d)]
	btst.b	#5,d0                           	| [$455b: bit  5,a]
	bne.b	0f                               	| [...]
	rts                                    	| [$455d: ret  z] [...]
0:
* character is shooting
	move.b	#0x02,d1                        	| [$455e: ld   b,$02]
	move.b	current_enemy_index_85BA(a6),d0 	| [$4560: ld   a,(current_enemy_index_85BA)]
	                             	| [$4563: or   a]
	jeq	l_459d                             	| [$4564: jr   z,$459D]
	LOAD_POINTER	ram_pointer_85BD(a6),a0             	| [$4566: ld   hl,($85BD)]
	move.b	(a0),d0                         	| [$4569: ld   a,(hl)]
	addq.b	#1,d0                           	| [$456a: inc  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$456b: ret  nz] [...]
0:
l_456c:
	move.b	(character_situation_06,a2),d0  	| [$456c: ld   a,(ix+character_situation_06)]
	cmp.b	#CS_FALLING_03,d0                	| [$456f: cp   CS_FALLING_03]
	bcs.b	0f                               	| [...]
	rts                                    	| [$4571: ret  nc] [...]
0:
* ground or in elevator or falling
	move.b	(0x09,a2),d0                    	| [$4572: ld   a,(ix+$09)]
	cmp.b	#0x07,d0                         	| [$4575: cp   $07]
	jeq	l_457c                             	| [$4577: jr   z,$457C]
	cmp.b	#0x05,d0                         	| [$4579: cp   $05]
	bcs.b	0f                               	| [...]
	rts                                    	| [$457b: ret  nc] [...]
0:
l_457c:
	move.b	#0x82,d5                      	| [$457c: ld   hl,$82FF]
	move.b	#0xFF,d6                      	| [$457c: ld   hl,$82FF]
	move.b	current_enemy_index_85BA(a6),d0 	| [$457f: ld   a,(current_enemy_index_85BA)]
	add.b	d1,d0                            	| [$4582: add  a,b]
	lsl.b	#3,d0								| [$4583: add  a,a]
												| [$4584: add  a,a]
												| [$4585: add  a,a]
	add.b	d6,d0                            	| [$4586: add  a,l]
	move.b	d0,d6                           	| [$4587: ld   l,a]
	move.b	d5,d0                           	| [$4588: ld   a,h]
	move.b	#0x00,d7                        	| [$4589: adc  a,$00]
	addx.b	d7,d0                           	| [$4589: adc  a,$00]
 	move.b	d0,d5                           	| [$458b: ld   h,a]
	LOAD_D5_16_FROM_D5D6
	bclr	#15,d5
	lea		(a6,d5.w),a0
	clr.b	(a0)                             	| [$458c: ld   (hl),$00]
	addq.w	#3,a0                           	| [$458e: inc  hl] * 3

	* encode ram pointer on character
	move.l	a2,d3                        	| [$4591: push ix]
	sub.l	a6,d3
	bset	#15,d3							| add 0x8000
										| [$4593: pop  de]
									| [$4593: pop  de]
	LOAD_D3D4_FROM_D3_16
	move.b	d4,(a0)+                         	| [$4594: ld   (hl),e]
	                           	| [$4595: inc  hl]
	move.b	d3,(a0)+                         	| [$4596: ld   (hl),d]
	                           	| [$4597: inc  hl]
	move.b	current_enemy_index_85BA(a6),d0 	| [$4598: ld   a,(current_enemy_index_85BA)]
	move.b	d0,(a0)                         	| [$459b: ld   (hl),a]
	rts                                    	| [$459c: ret]
	
l_459d:
	LOAD_POINTER	ram_pointer_85BD(a6),a0             	| [$459d: ld   hl,($85BD)]
	move.b	(a0),d0                         	| [$45a0: ld   a,(hl)]
	addq.b	#1,d0                           	| [$45a1: inc  a]
	jeq	l_456c                             	| [$45a2: jr   z,$456C]
	subq.b	#1,d1                           	| [$45a4: dec  b]
	move.w	#0xFFFB,d3                          	| [$45a5: ld   de,$FFFB]
	add.w	d3,a0                            	| [$45a8: add  hl,de]
	move.b	(a0),d0                         	| [$45a9: ld   a,(hl)]
	addq.b	#1,d0                           	| [$45aa: inc  a]
	jeq	l_456c                             	| [$45ab: jr   z,$456C]
	subq.b	#1,d1                           	| [$45ad: dec  b]
	add.w	d3,a0                            	| [$45ae: add  hl,de]
	move.b	(a0),d0                         	| [$45af: ld   a,(hl)]
	addq.b	#1,d0                           	| [$45b0: inc  a]
	jeq	l_456c                             	| [$45b1: jr   z,$456C]
	rts                                    	| [$45b3: ret]

l_45b4:
	move.b	(character_situation_06,a2),d0  	| [$45b4: ld   a,(ix+character_situation_06)]
	subq.b	#1,d0                           	| [$45b7: dec  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$45b8: ret  nz] [...]
0:
* in elevator
	move.b	current_enemy_index_85BA(a6),d0 	| [$45b9: ld   a,(current_enemy_index_85BA)]
	jra	l_4674                             	| [$45bc: jp   $4674]

player_elevator_control_upper_stories_45BF:
	move.b	player_structure_851A+current_floor_07(a6),d0	| [$45bf: ld   a,(player_structure_851A+current_floor_07)]
	cmp.b	#0x07,d0                         	| [$45c2: cp   $07]
	bcc.b	0f                               	| [...]
	rts                                    	| [$45c4: ret  c] can't control elevators from 7 to ground from here [...]
0:
player_elevator_control_45C5:	| called from somewhere else
	move.b	(move_direction_0d,a2),d0       	| [$45c5: ld   a,(ix+move_direction_0d)]
	move.b	d0,d1                           	| [$45c8: ld   b,a]
	and.b	#0xF3,d0                         	| [$45c9: and  $F3] cancel down movement: no crouch in elevator
	move.b	d0,(move_direction_0d,a2)       	| [$45cb: ld   (ix+move_direction_0d),a]
	btst.b	#3,d1                           	| [$45ce: bit  3,b]
	jne	player_commands_elevator_up_45DD   	| [$45d0: jr   nz,player_commands_elevator_up_45DD]
	btst.b	#2,d1                           	| [$45d2: bit  2,b]
	bne.b	0f                               	| [...]
	rts                                    	| [$45d4: ret  z] [...]
0:
player_commands_elevator_down_45D5:
	jbsr	load_character_elevator_structure_62CE	| [$45d5: call load_character_elevator_structure_62CE]
	move.b	#0xFE,(player_control_07,a3)    	| [$45d8: ld   (iy+player_control_07),$FE]
	rts                                    	| [$45dc: ret]

player_commands_elevator_up_45DD:
	jbsr	load_character_elevator_structure_62CE	| [$45dd: call load_character_elevator_structure_62CE]
	move.b	#0x02,(player_control_07,a3)    	| [$45e0: ld   (iy+player_control_07),$02]
	rts                                    	| [$45e4: ret]

ground_floor_reached_45E5:
	move.b	#GS_GROUND_FLOOR_REACHED_06,d0  	| [$45e5: ld   a,GS_GROUND_FLOOR_REACHED_06]
	move.b	d0,game_state_80AC(a6)          	| [$45e7: ld   (game_state_80AC),a]
l_45ea:
	lea	elevator_directions_array_8081(a6),a0	| [$45ea: ld   hl,elevator_directions_array_8081]
	move.b	l_802D(a6),d0                   	| [$45ed: ld   a,($802D)]
	addq.b	#1,d0                           	| [$45f0: inc  a]
	add.b	d0,d0                            	| [$45f1: add  a,a]
	moveq   #0,d3                               	| [$45f3: ld   d,$00]
	move.b	d0,d3                           	| [$45f2: ld   e,a]
	add.w	d3,a0                            	| [$45f5: add  hl,de]
	move.b	#0xFE,(a0)                      	| [$45f6: ld   (hl),$FE]
	lea	player_structure_851A(a6),a2       	| [$45f8: ld   ix,player_structure_851A]
	clr.b	(move_direction_0d,a2)           	| [$45fc: ld   (ix+move_direction_0d),$00]
	jbsr	load_character_elevator_structure_62CE	| [$4600: call load_character_elevator_structure_62CE]
	jra	l_6352                             	| [$4603: jp   $6352]

l_4608:
	jbsr	handle_main_scrolling_017F        	| [$4608: call handle_main_scrolling_017F]
	jbsr	handle_elevators_0EBF             	| [$460b: call handle_elevators_0EBF]
	jbsr	handle_moving_doors_12A2               	| [$460e: call handle_moving_doors_12A2]
	jbsr	l_2fe8                            	| [$4611: call $2FE8]
	jbsr	l_0be1                            	| [$4614: call $0BE1]
	jbsr	update_sprite_shadow_ram_15a0                            	| [$4617: call $15A0]
	jbsr	game_tick_73cf                            	| [$461a: call $73CF]
	jra	l_45ea                             	| [$461d: jp   $45EA]

l_4620:
	move.b	d0,instant_difficulty_level_8374(a6)	| [$4620: ld   (instant_difficulty_level_8374),a]
	clr.b	d0                               	| [$4623: xor  a]
	move.b	d0,l_82F0(a6)                   	| [$4624: ld   ($82F0),a]
	move.b	level_timer_16bit_msb_8232(a6),d0	| [$4627: ld   a,(level_timer_16bit_msb_8232)]
	sub.b	#0x10,d0                         	| [$462a: sub  $10]
	bcc.b	0f                               	| [...]
	rts                                    	| [$462c: ret  c] [...]
0:
	addq.b	#1,d0                           	| [$462d: inc  a] instant difficulty level - $10 + 1
	add.b	d0,d0                            	| [$462e: add  a,a] times 2
	cmp.b	#0x0C,d0                         	| [$462f: cp   $0C]
	jcs	l_4635                             	| [$4631: jr   c,$4635]
	move.b	#0x0C,d0                        	| [$4633: ld   a,$0C] maxed out
l_4635:
	move.b	d0,l_82F0(a6)                   	| [$4635: ld   ($82F0),a]
	and.b	#0x04,d0                         	| [$4638: and  $04]
	jne	l_4649                             	| [$463a: jp   nz,$4649]
	move.b	l_834C(a6),d0                   	| [$463d: ld   a,($834C)]
	cmp.b	#0x08,d0                         	| [$4640: cp   $08]
	jcc	l_4649                             	| [$4642: jp   nc,$4649]
	addq.b	#1,d0                           	| [$4645: inc  a]
	move.b	d0,l_834C(a6)                   	| [$4646: ld   ($834C),a]
l_4649:
	move.b	level_timer_16bit_msb_8232(a6),d0	| [$4649: ld   a,(level_timer_16bit_msb_8232)]
	cmp.b	#0x10,d0                         	| [$464c: cp   $10]
	beq.b	0f                               	| [...]
	rts                                    	| [$464e: ret  nz] [...]
0:
* switch to hurry up music as soon as fine timer is 0xFF
	move.b	level_timer_16bit_8231(a6),d0   	| [$464f: ld   a,(level_timer_16bit_8231)]
	                             	| [$4652: or   a]
	jeq	l_4665                             	| [$4653: jp   z,$4665]
	subq.b	#1,d0                           	| [$4656: dec  a]
	jeq	switch_to_hurry_up_music_466E      	| [$4657: jp   z,switch_to_hurry_up_music_466E]
	subq.b	#1,d0                           	| [$465a: dec  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$465b: ret  nz] [...]
0:
	move.b	#0x82,d0                        	| [$465c: ld   a,$82]
	move.b	d0,music_state_8779(a6)                   	| [$465e: ld   ($8779),a]
	jbsr	music_control_64d2                            	| [$4661: call music_control_64d2]
	rts                                    	| [$4664: ret]

l_4665:
	move.b	#0x80,d0                        	| [$4665: ld   a,$80]
	move.b	d0,music_state_8779(a6)                   	| [$4667: ld   ($8779),a]
	jbsr	music_control_64d2                            	| [$466a: call music_control_64d2]
	rts                                    	| [$466d: ret]

switch_to_hurry_up_music_466E:
	move.b	#0x3E,d0                        	| [$466e: ld   a,$3E]
	jbsr	play_sound             	| [$4670: ld   (sound_latch_D50B),a]
	rts                                    	| [$4673: ret]

l_4674:
	tst.b	d0                             	| [$4674: or   a]
	jne	player_elevator_control_upper_stories_45BF	| [$4675: jp   nz,player_elevator_control_upper_stories_45BF]
	move.b	(move_direction_0d,a2),d0       	| [$4678: ld   a,(ix+move_direction_0d)]
	and.b	#0x0C,d0                         	| [$467b: and  $0C]
	move.b	d0,d1                           	| [$467d: ld   b,a]
	lea	l_82EE(a6),a0                      	| [$467e: ld   hl,$82EE]
	move.b	(a0),d7
	move.b	d0,(a0)                         	| [$4682: ld   (hl),a]
	cmp.b	d7,d0                          	| [$4681: cp   (hl)]
	jne	l_4698                             	| [$4683: jp   nz,$4698]
	lea	l_82EF(a6),a0                      	| [$4686: ld   hl,$82EF]
	addq.b	#1,(a0)                         	| [$4689: inc  (hl)]
l_468a:
	move.b	l_82F0(a6),d0                   	| [$468a: ld   a,($82F0)]
	move.b	d0,d1                           	| [$468d: ld   b,a]
	move.b	(a0),d0                         	| [$468e: ld   a,(hl)]
	cmp.b	d1,d0                            	| [$468f: cp   b]
	jcs	l_46a0                             	| [$4690: jp   c,$46A0] skips when level_timer_16bit_msb_8232 >= $10
	clr.b	(a0)                             	| [$4693: ld   (hl),$00]
	jra	player_elevator_control_45C5       	| [$4695: jp   player_elevator_control_45C5] for all stories

l_4698:
	lea	l_82EF(a6),a0                      	| [$4698: ld   hl,$82EF]
	clr.b	(a0)                             	| [$469b: ld   (hl),$00]
	jra	l_468a                             	| [$469d: jp   $468A]

l_46a0:
	move.b	(move_direction_0d,a2),d0       	| [$46a0: ld   a,(ix+move_direction_0d)]
	and.b	#0xF3,d0                         	| [$46a3: and  $F3]
	move.b	d0,(move_direction_0d,a2)       	| [$46a5: ld   (ix+move_direction_0d),a]
	rts                                    	    | [$46a8: ret]
	
get_sprite_shadow_ram_46a9:
	clr.b	d0                               	| [$46a9: xor  a]
	move.b	d0,l_82EE(a6)                   	| [$46aa: ld   ($82EE),a]
	move.b	d0,l_82EF(a6)                   	| [$46ad: ld   ($82EF),a]
	move.b	d0,l_82F0(a6)                   	| [$46b0: ld   ($82F0),a]
	lea	sprite_and_priority_shadow_ram_80F1(a6),a0                      	| [$46b3: ld   hl,$80F1]
	rts                                    	| [$46b6: ret]

increase_difficulty_if_late_46b7:
	lea	music_state_8779(a6),a0                      	| [$46b7: ld   hl,$8779]
	move.b	#0x81,(a0)                      	| [$46ba: ld   (hl),$81]
	move.b	level_timer_16bit_msb_8232(a6),d0	| [$46bc: ld   a,(level_timer_16bit_msb_8232)]
	cmp.b	#0x10,d0                         	| [$46bf: cp   $10]
	bcc.b	0f                               	| [...]
	rts                                    	| [$46c1: ret  c] [...]
0:
	addq.b	#2,(a0)                         	| [$46c2: inc  (hl)] * 2
	rts                                    	| [$46c4: ret]

l_46c5:
	move.b	#0x02,(0x04,a2)                 	| [$46c5: ld   (ix+$04),$02]
	jbsr	l_4aad                            	| [$46c9: call $4AAD]
	move.b	(character_x_00,a2),d1          	| [$46cc: ld   b,(ix+character_x_00)]
	move.b	(character_x_right_01,a2),d2    	| [$46cf: ld   c,(ix+character_x_right_01)]
	move.b	#0x0B,d3                        	| [$46d2: ld   d,$0B]
l_46d4:
	move.b	d1,d0                           	| [$46d4: ld   a,b]
	cmp.b	(a0),d0                          	| [$46d5: cp   (hl)]
	jcs	l_46df                             	| [$46d6: jp   c,$46DF]
	addq.w	#1,a0                           	| [$46d9: inc  hl]
	move.b	(a0)+,d3                         	| [$46da: ld   d,(hl)]
	                           	| [$46db: inc  hl]
	jra	l_46d4                             	| [$46dc: jp   $46D4]
l_46df:
	move.b	(a0),d4                         	| [$46df: ld   e,(hl)]
	move.b	d4,d0                           	| [$46e0: ld   a,e]
	subq.b	#1,d0                           	| [$46e1: dec  a]
	sub.b	d2,d0                            	| [$46e2: sub  c]
	jcs	l_46f4                             	| [$46e3: jp   c,$46F4]
	move.b	d3,d0                           	| [$46e6: ld   a,d]
	cmp.b	#0x0B,d0                         	| [$46e7: cp   $0B]
	jcs	l_4a30                             	| [$46e9: jp   c,$4A30]
	jbsr	l_3bda                            	| [$46ec: call $3BDA]
	bne.b	0f                               	| [...]
	rts                                    	| [$46ef: ret  z] [...]
0:
	jbsr	l_4ac2                            	| [$46f0: call $4AC2]
	rts                                    	| [$46f3: ret]
l_46f4:
	addq.w	#1,a0                           	| [$46f4: inc  hl]
	move.b	(a0),d5                         	| [$46f5: ld   h,(hl)]
	move.b	d3,d0                           	| [$46f6: ld   a,d]
	cmp.b	#0x0B,d0                         	| [$46f7: cp   $0B]
	jeq	l_471e                             	| [$46f9: jp   z,$471E]
	move.b	d5,d0                           	| [$46fc: ld   a,h]
	cmp.b	#0x0B,d0                         	| [$46fd: cp   $0B]
	jeq	l_470f                             	| [$46ff: jr   z,$470F]
	move.b	(0x09,a2),d0                    	| [$4701: ld   a,(ix+$09)]
	cmp.b	#0x08,d0                         	| [$4704: cp   $08]
	jne	l_472c                             	| [$4706: jp   nz,$472C]
	move.b	d3,d0                           	| [$4709: ld   a,d]
	cmp.b	#0x0C,d0                         	| [$470a: cp   $0C]
	jne	l_471e                             	| [$470c: jp   nz,$471E]
l_470f:
	move.b	#0x01,(0x11,a2)                 	| [$470f: ld   (ix+$11),$01]
l_4713:
	subq.b	#1,d4                           	| [$4713: dec  e]
	move.b	d4,d0                           	| [$4714: ld   a,e]
	sub.b	d2,d0                            	| [$4715: sub  c]
	add.b	d1,d0                            	| [$4716: add  a,b]
	move.b	d0,(character_x_00,a2)          	| [$4717: ld   (ix+character_x_00),a]
	move.b	d4,(character_x_right_01,a2)    	| [$471a: ld   (ix+character_x_right_01),e]
	rts                                    	| [$471d: ret]
l_471e:
	move.b	#0x01,(0x11,a2)                 	| [$471e: ld   (ix+$11),$01]
l_4722:
	move.b	d4,d0                           	| [$4722: ld   a,e]
	sub.b	d1,d0                            	| [$4723: sub  b]
	add.b	d2,d0                            	| [$4724: add  a,c]
	move.b	d0,(character_x_right_01,a2)    	| [$4725: ld   (ix+character_x_right_01),a]
	move.b	d4,(character_x_00,a2)          	| [$4728: ld   (ix+character_x_00),e]
	rts                                    	| [$472b: ret]
l_472c:
	move.b	d3,d0                           	| [$472c: ld   a,d]
	move.b	d0,(0x08,a2)                    	| [$472d: ld   (ix+$08),a]
	cmp.b	#0x0C,d0                         	| [$4730: cp   $0C]
	jcs	l_476b                             	| [$4732: jp   c,$476B]
	move.b	(character_delta_x_05,a2),d0    	| [$4735: ld   a,(ix+character_delta_x_05)]
	                             	| [$4738: or   a]
	bpl.b	0f                               	| [...]
	rts                                    	| [$4739: ret  m] [...]
0:
	move.b	d5,d0                           	| [$473a: ld   a,h]
	move.b	d0,(0x08,a2)                    	| [$473b: ld   (ix+$08),a]
	jbsr	load_character_elevator_structure_62CE	| [$473e: call load_character_elevator_structure_62CE]
	move.b	(0x07,a2),d0                    	| [$4741: ld   a,(ix+$07)]
	sub.b	(0x01,a3),d0                     	| [$4744: sub  (iy+$01)]
	cmp.b	#0x03,d0                         	| [$4747: cp   $03]
	jpl	l_4999                             	| [$4749: jp   p,$4999]
	cmp.b	#0x01,d0                         	| [$474c: cp   $01]
	jeq	l_47fd                             	| [$474e: jp   z,$47FD]
	jpl	l_47a1                             	| [$4751: jp   p,$47A1]
	cmp.b	#0xFF,d0                         	| [$4754: cp   $FF]
	jeq	l_4901                             	| [$4756: jp   z,$4901]
	jpl	l_485f                             	| [$4759: jp   p,$485F]
	cmp.b	#0xFE,d0                         	| [$475c: cp   $FE]
	jeq	l_4947                             	| [$475e: jp   z,$4947]
	move.b	(0x03,a3),d0                    	| [$4761: ld   a,(iy+$03)]
	cmp.b	(0x07,a2),d0                     	| [$4764: cp   (ix+$07)]
	jne	l_4999                             	| [$4767: jp   nz,$4999]
	rts                                    	| [$476a: ret]
l_476b:
	move.b	(character_delta_x_05,a2),d0    	| [$476b: ld   a,(ix+character_delta_x_05)]
	subq.b	#1,d0                           	| [$476e: dec  a]
	bmi.b	0f                               	| [...]
	rts                                    	| [$476f: ret  p] [...]
0:
	move.b	d3,d0                           	| [$4770: ld   a,d]
	move.b	d0,(0x08,a2)                    	| [$4771: ld   (ix+$08),a]
	jbsr	load_character_elevator_structure_62CE	| [$4774: call load_character_elevator_structure_62CE]
	move.b	(0x07,a2),d0                    	| [$4777: ld   a,(ix+$07)]
	sub.b	(0x01,a3),d0                     	| [$477a: sub  (iy+$01)]
	cmp.b	#0x03,d0                         	| [$477d: cp   $03]
	jpl	l_496b                             	| [$477f: jp   p,$496B]
	cmp.b	#0x01,d0                         	| [$4782: cp   $01]
	jeq	l_482e                             	| [$4784: jp   z,$482E]
	jpl	l_47cf                             	| [$4787: jp   p,$47CF]
	cmp.b	#0xFF,d0                         	| [$478a: cp   $FF]
	jeq	l_4924                             	| [$478c: jp   z,$4924]
	jpl	l_48b0                             	| [$478f: jp   p,$48B0]
	cmp.b	#0xFE,d0                         	| [$4792: cp   $FE]
	jeq	l_4959                             	| [$4794: jp   z,$4959]
	move.b	(0x03,a3),d0                    	| [$4797: ld   a,(iy+$03)]
	cmp.b	(0x07,a2),d0                     	| [$479a: cp   (ix+$07)]
	jne	l_496b                             	| [$479d: jp   nz,$496B]
	rts                                    	| [$47a0: ret]
l_47a1:
	move.b	(character_delta_x_05,a2),d0    	| [$47a1: ld   a,(ix+character_delta_x_05)]
	                             	| [$47a4: or   a]
	jeq	l_47c8                             	| [$47a5: jp   z,$47C8]
	move.b	(character_y_offset_03,a2),d0   	| [$47a8: ld   a,(ix+character_y_offset_03)]
	add.b	#0x30,d0                         	| [$47ab: add  a,$30]
	sub.b	(a3),d0                     	| [$47ad: sub  (iy+$00)]
	cmp.b	#0x20,d0                         	| [$47b0: cp   $20]
	jcc	l_4999                             	| [$47b2: jp   nc,$4999]
l_47b5:
	move.b	d0,d6                           	| [$47b5: ld   l,a]
	jbsr	l_49b5                            	| [$47b6: call $49B5]
	jcc	l_47c8                             	| [$47b9: jr   nc,$47C8]
	move.b	d6,d2                           	| [$47bb: ld   c,l]
	jbsr	l_379d                            	| [$47bc: call $379D]
	move.b	#0x02,(character_delta_x_05,a2) 	| [$47bf: ld   (ix+character_delta_x_05),$02]
	move.b	#CS_ABOVE_ELEVATOR_02,(character_situation_06,a2)	| [$47c3: ld   (ix+character_situation_06),CS_ABOVE_ELEVATOR_02]
	rts                                    	| [$47c7: ret]
l_47c8:
	move.b	#0x02,(0x11,a2)                 	| [$47c8: ld   (ix+$11),$02]
	jra	l_4713                             	| [$47cc: jp   $4713]
l_47cf:
	move.b	(character_delta_x_05,a2),d0    	| [$47cf: ld   a,(ix+character_delta_x_05)]
	                             	| [$47d2: or   a]
	jeq	l_47f6                             	| [$47d3: jp   z,$47F6]
	move.b	(character_y_offset_03,a2),d0   	| [$47d6: ld   a,(ix+character_y_offset_03)]
	add.b	#0x30,d0                         	| [$47d9: add  a,$30]
	sub.b	(a3),d0                     	| [$47db: sub  (iy+$00)]
	cmp.b	#0x20,d0                         	| [$47de: cp   $20]
	jcc	l_496b                             	| [$47e0: jp   nc,$496B]
l_47e3:
	move.b	d0,d6                           	| [$47e3: ld   l,a]
	jbsr	l_49b5                            	| [$47e4: call $49B5]
	jcc	l_47f6                             	| [$47e7: jr   nc,$47F6]
	move.b	d6,d2                           	| [$47e9: ld   c,l]
	jbsr	l_379d                            	| [$47ea: call $379D]
	move.b	#0xFE,(character_delta_x_05,a2) 	| [$47ed: ld   (ix+character_delta_x_05),$FE]
	move.b	#CS_ABOVE_ELEVATOR_02,(character_situation_06,a2)	| [$47f1: ld   (ix+character_situation_06),CS_ABOVE_ELEVATOR_02]
	rts                                    	| [$47f5: ret]
l_47f6:
	move.b	#0x02,(0x11,a2)                 	| [$47f6: ld   (ix+$11),$02]
	jra	l_4722                             	| [$47fa: jp   $4722]
l_47fd:
	move.b	(character_delta_x_05,a2),d0    	| [$47fd: ld   a,(ix+character_delta_x_05)]
	                             	| [$4800: or   a]
	jeq	l_47c8                             	| [$4801: jp   z,$47C8]
	move.b	(character_y_offset_03,a2),d0   	| [$4804: ld   a,(ix+character_y_offset_03)]
	sub.b	(a3),d0                     	| [$4807: sub  (iy+$00)]
	cmp.b	#0x04,d0                         	| [$480a: cp   $04]
	jpl	l_47b5                             	| [$480c: jp   p,$47B5]
	add.b	#0x30,d0                         	| [$480f: add  a,$30]
	move.b	d0,d6                           	| [$4811: ld   l,a]
	move.b	(0x02,a2),d0                    	| [$4812: ld   a,(ix+$02)]
	sub.b	(a3),d0                     	| [$4815: sub  (iy+$00)]
	jcc	l_47c8                             	| [$4818: jp   nc,$47C8]
l_481b:
	jbsr	l_49df                            	| [$481b: call $49DF]
	jcc	l_47c8                             	| [$481e: jp   nc,$47C8]
	move.b	d6,d2                           	| [$4821: ld   c,l]
	jbsr	l_379d                            	| [$4822: call $379D]
	move.b	#0x02,(character_delta_x_05,a2) 	| [$4825: ld   (ix+character_delta_x_05),$02]
	move.b	#CS_IN_ELEVATOR_01,(character_situation_06,a2)	| [$4829: ld   (ix+character_situation_06),CS_IN_ELEVATOR_01]
	rts                                    	| [$482d: ret]
l_482e:
	move.b	(character_delta_x_05,a2),d0    	| [$482e: ld   a,(ix+character_delta_x_05)]
	                             	| [$4831: or   a]
	jeq	l_47f6                             	| [$4832: jp   z,$47F6]
	move.b	(character_y_offset_03,a2),d0   	| [$4835: ld   a,(ix+character_y_offset_03)]
	sub.b	(a3),d0                     	| [$4838: sub  (iy+$00)]
	cmp.b	#0x04,d0                         	| [$483b: cp   $04]
	jpl	l_47e3                             	| [$483d: jp   p,$47E3]
	add.b	#0x30,d0                         	| [$4840: add  a,$30]
	move.b	d0,d6                           	| [$4842: ld   l,a]
	move.b	(0x02,a2),d0                    	| [$4843: ld   a,(ix+$02)]
	sub.b	(a3),d0                     	| [$4846: sub  (iy+$00)]
	jcc	l_47f6                             	| [$4849: jp   nc,$47F6]
l_484c:
	jbsr	l_49df                            	| [$484c: call $49DF]
	jcc	l_47f6                             	| [$484f: jp   nc,$47F6]
	move.b	d6,d2                           	| [$4852: ld   c,l]
	jbsr	l_379d                            	| [$4853: call $379D]
	move.b	#0xFE,(character_delta_x_05,a2) 	| [$4856: ld   (ix+character_delta_x_05),$FE]
	move.b	#CS_IN_ELEVATOR_01,(character_situation_06,a2)	| [$485a: ld   (ix+character_situation_06),CS_IN_ELEVATOR_01]
	rts                                    	| [$485e: ret]
l_485f:
	move.b	(0x06,a3),d0                    	| [$485f: ld   a,(iy+$06)]
	                             	| [$4862: or   a]
	jeq	l_4891                             	| [$4863: jp   z,$4891]
	move.b	(character_delta_x_05,a2),d0    	| [$4866: ld   a,(ix+character_delta_x_05)]
	                             	| [$4869: or   a]
	jeq	l_47c8                             	| [$486a: jp   z,$47C8]
	move.b	(character_y_offset_03,a2),d0   	| [$486d: ld   a,(ix+character_y_offset_03)]
	sub.b	(a3),d0                     	| [$4870: sub  (iy+$00)]
	move.b	d0,d6                           	| [$4873: ld   l,a]
	cmp.b	#0x04,d0                         	| [$4874: cp   $04]
	jpl	l_481b                             	| [$4876: jp   p,$481B]
	add.b	#0x30,d0                         	| [$4879: add  a,$30]
	move.b	d0,d6                           	| [$487b: ld   l,a]
	move.b	(0x08,a2),d0                    	| [$487c: ld   a,(ix+$08)]
	or.b	#0x80,d0                          	| [$487f: or   $80]
	move.b	d0,(0x08,a2)                    	| [$4881: ld   (ix+$08),a]
	move.b	(0x02,a2),d0                    	| [$4884: ld   a,(ix+$02)]
	sub.b	(a3),d0                     	| [$4887: sub  (iy+$00)]
	jcc	l_47c8                             	| [$488a: jp   nc,$47C8]
	move.b	d6,d0                           	| [$488d: ld   a,l]
	jra	l_47b5                             	| [$488e: jp   $47B5]
l_4891:
	move.b	(character_y_offset_03,a2),d0   	| [$4891: ld   a,(ix+character_y_offset_03)]
	sub.b	(a3),d0                     	| [$4894: sub  (iy+$00)]
	move.b	d0,d6                           	| [$4897: ld   l,a]
	cmp.b	#0x04,d0                         	| [$4898: cp   $04]
	jpl	l_481b                             	| [$489a: jp   p,$481B]
	move.b	(0x02,a2),d0                    	| [$489d: ld   a,(ix+$02)]
	sub.b	(a3),d0                     	| [$48a0: sub  (iy+$00)]
	jcc	l_47c8                             	| [$48a3: jp   nc,$47C8]
	move.b	(0x07,a2),d0                    	| [$48a6: ld   a,(ix+$07)]
	cmp.b	(0x03,a3),d0                     	| [$48a9: cp   (iy+$03)]
	bne.b	0f                               	| [...]
	rts                                    	| [$48ac: ret  z] [...]
0:
	jra	l_4999                             	| [$48ad: jp   $4999]
l_48b0:
	move.b	(0x06,a3),d0                    	| [$48b0: ld   a,(iy+$06)]
	                             	| [$48b3: or   a]
	jeq	l_48e2                             	| [$48b4: jp   z,$48E2]
	move.b	(character_delta_x_05,a2),d0    	| [$48b7: ld   a,(ix+character_delta_x_05)]
	                             	| [$48ba: or   a]
	jeq	l_47f6                             	| [$48bb: jp   z,$47F6]
	move.b	(character_y_offset_03,a2),d0   	| [$48be: ld   a,(ix+character_y_offset_03)]
	sub.b	(a3),d0                     	| [$48c1: sub  (iy+$00)]
	move.b	d0,d6                           	| [$48c4: ld   l,a]
	cmp.b	#0x04,d0                         	| [$48c5: cp   $04]
	jpl	l_484c                             	| [$48c7: jp   p,$484C]
	add.b	#0x30,d0                         	| [$48ca: add  a,$30]
	move.b	d0,d6                           	| [$48cc: ld   l,a]
	move.b	(0x08,a2),d0                    	| [$48cd: ld   a,(ix+$08)]
	or.b	#0x80,d0                          	| [$48d0: or   $80]
	move.b	d0,(0x08,a2)                    	| [$48d2: ld   (ix+$08),a]
	move.b	(0x02,a2),d0                    	| [$48d5: ld   a,(ix+$02)]
	sub.b	(a3),d0                     	| [$48d8: sub  (iy+$00)]
	jcc	l_47f6                             	| [$48db: jp   nc,$47F6]
	move.b	d6,d0                           	| [$48de: ld   a,l]
	jra	l_47e3                             	| [$48df: jp   $47E3]
l_48e2:
	move.b	(character_y_offset_03,a2),d0   	| [$48e2: ld   a,(ix+character_y_offset_03)]
	sub.b	(a3),d0                     	| [$48e5: sub  (iy+$00)]
	move.b	d0,d6                           	| [$48e8: ld   l,a]
	cmp.b	#0x04,d0                         	| [$48e9: cp   $04]
	jpl	l_484c                             	| [$48eb: jp   p,$484C]
	move.b	(0x02,a2),d0                    	| [$48ee: ld   a,(ix+$02)]
	sub.b	(a3),d0                     	| [$48f1: sub  (iy+$00)]
	jcc	l_47f6                             	| [$48f4: jp   nc,$47F6]
	move.b	(0x07,a2),d0                    	| [$48f7: ld   a,(ix+$07)]
	cmp.b	(0x03,a3),d0                     	| [$48fa: cp   (iy+$03)]
	bne.b	0f                               	| [...]
	rts                                    	| [$48fd: ret  z] [...]
0:
	jra	l_496b                             	| [$48fe: jp   $496B]
l_4901:
	move.b	(0x06,a3),d0                    	| [$4901: ld   a,(iy+$06)]
	                             	| [$4904: or   a]
	jeq	l_4913                             	| [$4905: jp   z,$4913]
	move.b	(0x08,a2),d0                    	| [$4908: ld   a,(ix+$08)]
	or.b	#0x80,d0                          	| [$490b: or   $80]
	move.b	d0,(0x08,a2)                    	| [$490d: ld   (ix+$08),a]
	jra	l_47fd                             	| [$4910: jp   $47FD]
l_4913:
	move.b	(0x03,a3),d0                    	| [$4913: ld   a,(iy+$03)]
	cmp.b	(0x07,a2),d0                     	| [$4916: cp   (ix+$07)]
	bne.b	0f                               	| [...]
	rts                                    	| [$4919: ret  z] [...]
0:
	move.b	(character_delta_x_05,a2),d0    	| [$491a: ld   a,(ix+character_delta_x_05)]
	                             	| [$491d: or   a]
	jeq	l_47c8                             	| [$491e: jp   z,$47C8]
	jra	l_4999                             	| [$4921: jp   $4999]
l_4924:
	move.b	(0x06,a3),d0                    	| [$4924: ld   a,(iy+$06)]
	                             	| [$4927: or   a]
	jeq	l_4936                             	| [$4928: jp   z,$4936]
	move.b	(0x08,a2),d0                    	| [$492b: ld   a,(ix+$08)]
	or.b	#0x80,d0                          	| [$492e: or   $80]
	move.b	d0,(0x08,a2)                    	| [$4930: ld   (ix+$08),a]
	jra	l_482e                             	| [$4933: jp   $482E]
l_4936:
	move.b	(0x03,a3),d0                    	| [$4936: ld   a,(iy+$03)]
	cmp.b	(0x07,a2),d0                     	| [$4939: cp   (ix+$07)]
	bne.b	0f                               	| [...]
	rts                                    	| [$493c: ret  z] [...]
0:
	move.b	(character_delta_x_05,a2),d0    	| [$493d: ld   a,(ix+character_delta_x_05)]
	                             	| [$4940: or   a]
	jeq	l_47f6                             	| [$4941: jp   z,$47F6]
	jra	l_496b                             	| [$4944: jp   $496B]
l_4947:
	move.b	(0x06,a3),d0                    	| [$4947: ld   a,(iy+$06)]
	                             	| [$494a: or   a]
	jeq	l_4913                             	| [$494b: jp   z,$4913]
	move.b	(0x08,a2),d0                    	| [$494e: ld   a,(ix+$08)]
	or.b	#0x80,d0                          	| [$4951: or   $80]
	move.b	d0,(0x08,a2)                    	| [$4953: ld   (ix+$08),a]
	jra	l_4891                             	| [$4956: jp   $4891]
l_4959:
	move.b	(0x06,a3),d0                    	| [$4959: ld   a,(iy+$06)]
	                             	| [$495c: or   a]
	jeq	l_4936                             	| [$495d: jp   z,$4936]
	move.b	(0x08,a2),d0                    	| [$4960: ld   a,(ix+$08)]
	or.b	#0x80,d0                          	| [$4963: or   $80]
	move.b	d0,(0x08,a2)                    	| [$4965: ld   (ix+$08),a]
	jra	l_48e2                             	| [$4968: jp   $48E2]
l_496b:
	move.b	(0x09,a2),d0                    	| [$496b: ld   a,(ix+$09)]
	cmp.b	#0x07,d0                         	| [$496e: cp   $07]
	bne.b	0f                               	| [...]
	rts                                    	| [$4970: ret  z] [...]
0:
	move.b	(0x11,a2),d0                    	| [$4971: ld   a,(ix+$11)]
	addq.b	#1,d0                           	| [$4974: inc  a]
	jne	l_47f6                             	| [$4975: jp   nz,$47F6]
	move.b	(0x05,a3),d0                    	| [$4978: ld   a,(iy+$05)]
	subq.b	#1,d0                           	| [$497b: dec  a]
	move.b	d0,(character_x_right_01,a2)    	| [$497c: ld   (ix+character_x_right_01),a]
	sub.b	#0x08,d0                         	| [$497f: sub  $08]
	move.b	d0,(character_x_00,a2)          	| [$4981: ld   (ix+character_x_00),a]
l_4984:
	clr.b	(0x0a,a2)                        	| [$4984: ld   (ix+$0a),$00]
	move.b	#CS_FALLING_03,(character_situation_06,a2)	| [$4988: ld   (ix+character_situation_06),CS_FALLING_03]
	clr.b	(character_delta_x_05,a2)        	| [$498c: ld   (ix+character_delta_x_05),$00]
	move.b	(0x08,a2),d0                    	| [$4990: ld   a,(ix+$08)]
	and.b	#0x7F,d0                         	| [$4993: and  $7F]
	move.b	d0,(0x08,a2)                    	| [$4995: ld   (ix+$08),a]
	rts                                    	| [$4998: ret]
l_4999:
	move.b	(0x09,a2),d0                    	| [$4999: ld   a,(ix+$09)]
	cmp.b	#0x07,d0                         	| [$499c: cp   $07]
	bne.b	0f                               	| [...]
	rts                                    	| [$499e: ret  z] [...]
0:
	move.b	(0x11,a2),d0                    	| [$499f: ld   a,(ix+$11)]
	addq.b	#1,d0                           	| [$49a2: inc  a]
	jne	l_47c8                             	| [$49a3: jp   nz,$47C8]
	move.b	(0x4,a3),d0      	| [$49a6: ld   a,(iy+character_display_priority_04)]
	addq.b	#1,d0                           	| [$49a9: inc  a]
	move.b	d0,(character_x_00,a2)          	| [$49aa: ld   (ix+character_x_00),a]
	add.b	#0x08,d0                         	| [$49ad: add  a,$08]
	move.b	d0,(character_x_right_01,a2)    	| [$49af: ld   (ix+character_x_right_01),a]
	jra	l_4984                             	| [$49b2: jp   $4984]
l_49b5:
	move.b	current_enemy_index_85BA(a6),d0 	| [$49b5: ld   a,(current_enemy_index_85BA)]
	                             	| [$49b8: or   a]
	jeq	l_49dd                             	| [$49b9: jr   z,$49DD]
	move.b	(0x0f,a2),d0                    	| [$49bb: ld   a,(ix+$0f)]
	                             	| [$49be: or   a]
	jne	l_49dd                             	| [$49bf: jr   nz,$49DD]
	move.b	l_8520(a6),d0                   	| [$49c1: ld   a,($8520)]
	                             	| [$49c4: or   a]
	jeq	l_49d7                             	| [$49c5: jr   z,$49D7]
	cmp.b	#0x03,d0                         	| [$49c7: cp   $03]
	jcc	l_49d7                             	| [$49c9: jr   nc,$49D7]
	move.b	player_structure_851A+8(a6),d0  	| [$49cb: ld   a,(player_structure_851A+8)]
	move.b	(0x08,a2),d7
	eor.b	d7,d0                            	| [$49ce: xor  (ix+$08)]
	and.b	#0x7F,d0                         	| [$49d1: and  $7F]
	jne	l_49d7                             	| [$49d3: jr   nz,$49D7]
l_49d5:
	CLEAR_XC_FLAGS                              	| [$49d5: xor  a]
	rts                                    	| [$49d6: ret]
l_49d7:
	move.b	(0x1e,a2),d0                    	| [$49d7: ld   a,(ix+$1e)]
	                             	| [$49da: or   a]
	jeq	l_49d5                             	| [$49db: jr   z,$49D5]
l_49dd:
	SET_XC_FLAGS                           	| [$49dd: scf]
	rts                                    	| [$49de: ret]
l_49df:
	move.b	current_enemy_index_85BA(a6),d0 	| [$49df: ld   a,(current_enemy_index_85BA)]
	                             	| [$49e2: or   a]
	jeq	l_49dd                             	| [$49e3: jp   z,$49DD]
	move.b	(0x0f,a2),d0                    	| [$49e6: ld   a,(ix+$0f)]
	                             	| [$49e9: or   a]
	jne	l_49dd                             	| [$49ea: jp   nz,$49DD]
	move.b	(0x06,a3),d0                    	| [$49ed: ld   a,(iy+$06)]
	                             	| [$49f0: or   a]
	jeq	l_49dd                             	| [$49f1: jp   z,$49DD]
	move.b	(0x1e,a2),d0                    	| [$49f4: ld   a,(ix+$1e)]
	                             	| [$49f7: or   a]
	jeq	l_4a15                             	| [$49f8: jr   z,$4A15]
	move.b	(0x07,a2),d0                    	| [$49fa: ld   a,(ix+$07)]
	sub.b	(0x03,a3),d0                     	| [$49fd: sub  (iy+$03)]
	cmp.b	#0x03,d0                         	| [$4a00: cp   $03]
	jcc	l_49dd                             	| [$4a02: jp   nc,$49DD]
	move.b	(0x07,a2),d0                    	| [$4a05: ld   a,(ix+$07)]
	sub.b	(0x01,a3),d0                     	| [$4a08: sub  (iy+$01)]
	jeq	l_49d5                             	| [$4a0b: jp   z,$49D5]
	subq.b	#1,d0                           	| [$4a0e: dec  a]
	jeq	l_49d5                             	| [$4a0f: jp   z,$49D5]
	jra	l_49dd                             	| [$4a12: jp   $49DD]
l_4a15:
	move.b	(0x02,a3),d0                    	| [$4a15: ld   a,(iy+$02)]
	sub.b	(0x07,a2),d0                     	| [$4a18: sub  (ix+$07)]
	cmp.b	#0x03,d0                         	| [$4a1b: cp   $03]
	jcc	l_49dd                             	| [$4a1d: jp   nc,$49DD]
	move.b	(0x07,a2),d0                    	| [$4a20: ld   a,(ix+$07)]
	sub.b	(0x01,a3),d0                     	| [$4a23: sub  (iy+$01)]
	jeq	l_49dd                             	| [$4a26: jp   z,$49DD]
	subq.b	#1,d0                           	| [$4a29: dec  a]
	jeq	l_49dd                             	| [$4a2a: jp   z,$49DD]
	jra	l_49d5                             	| [$4a2d: jp   $49D5]
l_4a30:
	move.b	d3,(0x08,a2)                    	| [$4a30: ld   (ix+$08),d]
	jbsr	load_character_elevator_structure_62CE	| [$4a33: call load_character_elevator_structure_62CE]
	jbsr	l_4a78                            	| [$4a36: call $4A78]
	move.b	(0x07,a2),d0                    	| [$4a39: ld   a,(ix+$07)]
	cmp.b	(0x03,a3),d0                     	| [$4a3c: cp   (iy+$03)]
	bne.b	0f                               	| [...]
	rts                                    	| [$4a3f: ret  z] [...]
0:
	move.b	(0x09,a2),d0                    	| [$4a40: ld   a,(ix+$09)]
	cmp.b	#0x07,d0                         	| [$4a43: cp   $07]
	jne	l_4a5e                             	| [$4a45: jr   nz,$4A5E]
	move.b	(0x01,a3),d0                    	| [$4a47: ld   a,(iy+$01)]
	cmp.b	(0x07,a2),d0                     	| [$4a4a: cp   (ix+$07)]
	bcs.b	0f                               	| [...]
	rts                                    	| [$4a4d: ret  nc] [...]
0:
	move.b	(character_display_priority_04,a3),d0      	| [$4a4e: ld   a,(iy+character_display_priority_04)]
	add.b	(0x05,a3),d0                     	| [$4a51: add  a,(iy+$05)]
	roxr.b	#1,d0                           	| [$4a54: rr   a]
	cmp.b	(character_x_right_01,a2),d0     	| [$4a56: cp   (ix+character_x_right_01)]
	bcs.b	0f                               	| [...]
	rts                                    	| [$4a59: ret  nc] [...]
0:
	cmp.b	(character_x_00,a2),d0           	| [$4a5a: cp   (ix+character_x_00)]
	bcc.b	0f                               	| [...]
	rts                                    	| [$4a5d: ret  c] [...]
0:
l_4a5e:
	move.b	#0x05,(0x09,a2)                 	| [$4a5e: ld   (ix+$09),$05]
	clr.b	(0x0a,a2)                        	| [$4a62: ld   (ix+$0a),$00]
l_4a66:
	move.b	current_enemy_index_85BA(a6),d0 	| [$4a66: ld   a,(current_enemy_index_85BA)]
	                             	| [$4a69: or   a]
	jeq	l_4a72                             	| [$4a6a: jr   z,$4A72]
	move.b	#0x02,d0                        	| [$4a6c: ld   a,$02]
	move.b	d0,l_82EC(a6)                   	| [$4a6e: ld   ($82EC),a]
	rts                                    	| [$4a71: ret]
l_4a72:
	move.b	#0x02,d0                        	| [$4a72: ld   a,$02]
	move.b	d0,l_82EB(a6)                   	| [$4a74: ld   ($82EB),a]
	rts                                    	| [$4a77: ret]
l_4a78:
	move.b	(0x07,a2),d0                    	| [$4a78: ld   a,(ix+$07)]
	add.b	(0x06,a3),d0                     	| [$4a7b: add  a,(iy+$06)]
	add.b	(0x06,a3),d0                     	| [$4a7e: add  a,(iy+$06)]
	cmp.b	(0x01,a3),d0                     	| [$4a81: cp   (iy+$01)]
	beq.b	0f                               	| [...]
	rts                                    	| [$4a84: ret  nz] [...]
0:
	move.b	(0x02,a2),d0                    	| [$4a85: ld   a,(ix+$02)]
	sub.b	(a3),d0                     	| [$4a88: sub  (iy+$00)]
	bcc.b	0f                               	| [...]
	rts                                    	| [$4a8b: ret  c] [...]
0:
	move.b	#0x05,(0x09,a2)                 	| [$4a8c: ld   (ix+$09),$05]
	clr.b	(0x0a,a2)                        	| [$4a90: ld   (ix+$0a),$00]
	jbsr	l_4a66                            	| [$4a94: call $4A66]
	move.b	current_enemy_index_85BA(a6),d0 	| [$4a97: ld   a,(current_enemy_index_85BA)]
	                             	| [$4a9a: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$4a9b: ret  z] [...]
0:
	move.b	l_8520(a6),d0                   	| [$4a9c: ld   a,($8520)]
	subq.b	#1,d0                           	| [$4a9f: dec  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$4aa0: ret  nz] [...]
0:
	move.b	player_structure_851A+8(a6),d0  	| [$4aa1: ld   a,(player_structure_851A+8)]
	move.b	(0x08,a2),d7
	eor.b	d7,d0                            	| [$4aa4: xor  (ix+$08)]
	and.b	#0x7F,d0                         	| [$4aa7: and  $7F]
	bne.b	0f                               	| [...]
	jbsr	l_56e7                            	| [$4aa9: call z,$56E7]
0:
	rts                                    	| [$4aac: ret]
l_4aad:
	lea	l_81CE(a6),a0                      	| [$4aad: ld   hl,$81CE]
	move.b	(0x07,a2),d0                    	| [$4ab0: ld   a,(ix+$07)]
	                             	| [$4ab3: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$4ab4: ret  z] [...]
0:
	add.b	d0,d0                            	| [$4ab5: add  a,a]
	add.b	d0,d0                            	| [$4ab6: add  a,a]
	clr.w	d5                               	| [$4ab8: ld   h,$00]
	move.b	d0,d5                           	| [$4ab7: ld   l,a]
	lsl.w	#3,d5                            	| [$4aba: add  hl,hl]
												| [$4abb: add  hl,hl]
												| [$4abc: add  hl,hl]
	lea	table_16E3(pc),a0                      	| [$4abd: ld   de,table_16E3]
	add.w	d5,a0                            	| [$4ac0: add  hl,de]
	rts                                    	| [$4ac1: ret]
l_4ac2:
	move.b	(0x09,a2),d0                    	| [$4ac2: ld   a,(ix+$09)]
	cmp.b	#0x03,d0                         	| [$4ac5: cp   $03]
	bcs.b	0f                               	| [...]
	rts                                    	| [$4ac7: ret  nc] [...]
0:
	move.b	(0x1b,a2),d0                    	| [$4ac8: ld   a,(ix+$1b)]
	                             	| [$4acb: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$4acc: ret  z] [...]
0:
	LOAD_POINTER	ram_pointer_85BB(a6),a0             	| [$4acd: ld   hl,($85BB)]
	move.b	(a0),d0                         	| [$4ad0: ld   a,(hl)]
	addq.b	#1,d0                           	| [$4ad1: inc  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$4ad2: ret  nz] [...]
0:
	move.b	(0x07,a2),d0                    	| [$4ad3: ld   a,(ix+$07)]
	cmp.b	#0x10,d0                         	| [$4ad6: cp   $10]
	jeq	l_4af7                             	| [$4ad8: jp   z,$4AF7]
	bcc.b	0f                               	| [...]
	rts                                    	| [$4adb: ret  c] [...]
0:
	cmp.b	#0x11,d0                         	| [$4adc: cp   $11]
	jeq	l_4afb                             	| [$4ade: jp   z,$4AFB]
	cmp.b	#0x14,d0                         	| [$4ae1: cp   $14]
	jeq	l_4b07                             	| [$4ae3: jp   z,$4B07]
	bcs.b	0f                               	| [...]
	rts                                    	| [$4ae6: ret  nc] [...]
0:
	jbsr	l_4b0f                            	| [$4ae7: call $4B0F]
	bne.b	0f                               	| [...]
	rts                                    	| [$4aea: ret  z] [...]
0:
	jbsr	l_4b3b                            	| [$4aeb: call $4B3B]
	bne.b	0f                               	| [...]
	rts                                    	| [$4aee: ret  z] [...]
0:
	jbsr	l_4b59                            	| [$4aef: call $4B59]
	bne.b	0f                               	| [...]
	rts                                    	| [$4af2: ret  z] [...]
0:
	jbsr	l_4b77                            	| [$4af3: call $4B77]
	rts                                    	| [$4af6: ret]
l_4af7:
	jbsr	l_4b0f                            	| [$4af7: call $4B0F]
	rts                                    	| [$4afa: ret]
l_4afb:
	jbsr	l_4b0f                            	| [$4afb: call $4B0F]
	bne.b	0f                               	| [...]
	rts                                    	| [$4afe: ret  z] [...]
0:
	jbsr	l_4b3b                            	| [$4aff: call $4B3B]
	bne.b	0f                               	| [...]
	rts                                    	| [$4b02: ret  z] [...]
0:
	jbsr	l_4b59                            	| [$4b03: call $4B59]
	rts                                    	| [$4b06: ret]
l_4b07:
	jbsr	l_4b3b                            	| [$4b07: call $4B3B]
	bne.b	0f                               	| [...]
	rts                                    	| [$4b0a: ret  z] [...]
0:
	jbsr	l_4b77                            	| [$4b0b: call $4B77]
	rts                                    	| [$4b0e: ret]
l_4b0f:
	move.b	(move_direction_0d,a2),d0       	| [$4b0f: ld   a,(ix+move_direction_0d)]
	not.b	d0                               	| [$4b12: cpl]
	btst.b	#3,d0                           	| [$4b13: bit  3,a]
	beq.b	0f                               	| [...]
	rts                                    	| [$4b15: ret  nz] [...]
0:
	move.b	(character_x_00,a2),d0          	| [$4b16: ld   a,(ix+character_x_00)]
	cmp.b	#0xBF,d0                         	| [$4b19: cp   $BF]
	jcs	l_4b37                             	| [$4b1b: jp   c,$4B37]
	cmp.b	#0xC7,d0                         	| [$4b1e: cp   $C7]
	jcc	l_4b37                             	| [$4b20: jp   nc,$4B37]
	move.b	#0x01,(0x0b,a2)                 	| [$4b23: ld   (ix+$0b),$01]
	move.b	#0x01,(character_delta_x_05,a2) 	| [$4b27: ld   (ix+character_delta_x_05),$01]
l_4b2b:
	move.b	#CS_IN_STAIRS_04,(character_situation_06,a2)	| [$4b2b: ld   (ix+character_situation_06),CS_IN_STAIRS_04]
	clr.b	d0                               	| [$4b2f: xor  a]
	move.b	d0,(0x04,a2)                    	| [$4b30: ld   (ix+$04),a]
	move.b	d0,(0x0a,a2)                    	| [$4b33: ld   (ix+$0a),a]
	rts                                    	| [$4b36: ret]
l_4b37:
	move.b	#0x01,d0                        	| [$4b37: ld   a,$01]
	                             	| [$4b39: or   a]
	rts                                    	| [$4b3a: ret]
l_4b3b:
	move.b	(move_direction_0d,a2),d0       	| [$4b3b: ld   a,(ix+move_direction_0d)]
	not.b	d0                               	| [$4b3e: cpl]
	btst.b	#2,d0                           	| [$4b3f: bit  2,a]
	beq.b	0f                               	| [...]
	rts                                    	| [$4b41: ret  nz] [...]
0:
	move.b	(character_x_00,a2),d0          	| [$4b42: ld   a,(ix+character_x_00)]
	cmp.b	#0xE4,d0                         	| [$4b45: cp   $E4]
	jcs	l_4b37                             	| [$4b47: jp   c,$4B37]
	cmp.b	#0xEC,d0                         	| [$4b4a: cp   $EC]
	jcc	l_4b37                             	| [$4b4c: jp   nc,$4B37]
	clr.b	(0x0b,a2)                        	| [$4b4f: ld   (ix+$0b),$00]
	move.b	#0xFF,(character_delta_x_05,a2) 	| [$4b53: ld   (ix+character_delta_x_05),$FF]
	jra	l_4b2b                             	| [$4b57: jr   $4B2B]
l_4b59:
	move.b	(move_direction_0d,a2),d0       	| [$4b59: ld   a,(ix+move_direction_0d)]
	not.b	d0                               	| [$4b5c: cpl]
	btst.b	#3,d0                           	| [$4b5d: bit  3,a]
	beq.b	0f                               	| [...]
	rts                                    	| [$4b5f: ret  nz] [...]
0:
	move.b	(character_x_00,a2),d0          	| [$4b60: ld   a,(ix+character_x_00)]
	cmp.b	#0x2A,d0                         	| [$4b63: cp   $2A]
	jcs	l_4b37                             	| [$4b65: jp   c,$4B37]
	cmp.b	#0x32,d0                         	| [$4b68: cp   $32]
	jcc	l_4b37                             	| [$4b6a: jp   nc,$4B37]
	clr.b	(0x0b,a2)                        	| [$4b6d: ld   (ix+$0b),$00]
	move.b	#0x01,(character_delta_x_05,a2) 	| [$4b71: ld   (ix+character_delta_x_05),$01]
	jra	l_4b2b                             	| [$4b75: jr   $4B2B]
l_4b77:
	move.b	(move_direction_0d,a2),d0       	| [$4b77: ld   a,(ix+move_direction_0d)]
	not.b	d0                               	| [$4b7a: cpl]
	btst.b	#2,d0                           	| [$4b7b: bit  2,a]
	beq.b	0f                               	| [...]
	rts                                    	| [$4b7d: ret  nz] [...]
0:
	move.b	(character_x_00,a2),d0          	| [$4b7e: ld   a,(ix+character_x_00)]
	cmp.b	#0x04,d0                         	| [$4b81: cp   $04]
	jcs	l_4b37                             	| [$4b83: jp   c,$4B37]
	cmp.b	#0x0C,d0                         	| [$4b86: cp   $0C]
	jcc	l_4b37                             	| [$4b88: jp   nc,$4B37]
	move.b	#0x01,(0x0b,a2)                 	| [$4b8b: ld   (ix+$0b),$01]
	move.b	#0xFF,(character_delta_x_05,a2) 	| [$4b8f: ld   (ix+character_delta_x_05),$FF]
	jra	l_4b2b                             	| [$4b93: jr   $4B2B]
l_4b95:
	move.b	#0x07,d1                        	| [$4b95: ld   b,$07]
	move.w	#0x0008,d3                      	| [$4b97: ld   de,$0008] 8
	lea	l_82FF(a6),a0                      	| [$4b9a: ld   hl,$82FF]
l_4b9d:
	st	(a0)                      	| [$4b9d: ld   (hl),$FF]
	add.w	d3,a0                            	| [$4b9f: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_4b9d                             	| [$4ba0: djnz $4B9D]
	move.b	#0x07,d1                        	| [$4ba2: ld   b,$07]
	move.w	#0x0005,d3                      	| [$4ba4: ld   de,$0005] 5
	lea	l_8123(a6),a0                      	| [$4ba7: ld   hl,$8123]
l_4baa:
	st	(a0)                      	| [$4baa: ld   (hl),$FF]
	add.w	d3,a0                            	| [$4bac: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_4baa                             	| [$4bad: djnz $4BAA]
	lea	l_82F6(a6),a0                      	| [$4baf: ld   hl,$82F6]
	clr.b	d0                               	| [$4bb2: xor  a]
	move.b	#0x07,d1                        	| [$4bb3: ld   b,$07]
l_4bb5:
	move.b	d0,(a0)+                         	| [$4bb5: ld   (hl),a]
	                           	| [$4bb6: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_4bb5                             	| [$4bb7: djnz $4BB5]
	rts                                    	| [$4bb9: ret]
	
update_bullets_4bba:
	lea	l_82FD(a6),a2                      	| [$4bba: ld   ix,$82FD]
	lea	l_8123(a6),a0                      	| [$4bbe: ld   hl,$8123]
	STORE_POINTER	a0,ram_pointer_8336(a6)            	| [$4bc1: ld   ($8336),hl]
	clr.b	d0                               	| [$4bc4: xor  a]
	move.b	d0,l_8335(a6)                   	| [$4bc5: ld   ($8335),a]
l_4bc8:
	jbsr	update_bullet_4be7                            	| [$4bc8: call $4BE7]
	move.w	#0x0008,d3                      	| [$4bcb: ld   de,$0008] 8
	add.w	d3,a2                            	| [$4bce: add  ix,de]
	LOAD_POINTER	ram_pointer_8336(a6),a0             	| [$4bd0: ld   hl,($8336)]

	move.w	#0x0005,d3                      	| [$4bd3: ld   de,$0005] 5
	add.w	d3,a0                            	| [$4bd6: add  hl,de]
	STORE_POINTER	a0,ram_pointer_8336(a6)            	| [$4bd7: ld   ($8336),hl]
	move.b	l_8335(a6),d0                   	| [$4bda: ld   a,($8335)]
	addq.b	#1,d0                           	| [$4bdd: inc  a]
	move.b	d0,l_8335(a6)                   	| [$4bde: ld   ($8335),a]
	cmp.b	#0x07,d0                         	| [$4be1: cp   $07]
	jne	l_4bc8                             	| [$4be3: jp   nz,$4BC8]
	rts                                    	| [$4be6: ret]
	
update_bullet_4be7:
	move.b	l_8335(a6),d0                   	| [$4be7: ld   a,($8335)]
	lea	l_82F6(a6),a0                      	| [$4bea: ld   hl,$82F6]
	moveq   #0,d3                               	| [$4bee: ld   d,$00]
	move.b	d0,d3                           	| [$4bed: ld   e,a]
	add.w	d3,a0                            	| [$4bf0: add  hl,de]
	move.b	(a0),d2                         	| [$4bf1: ld   c,(hl)]
	move.b	(0x02,a2),d0                    	| [$4bf2: ld   a,(ix+$02)]
	cmp.b	d2,d0                            	| [$4bf5: cp   c]
	jcs	l_4c0a                             	| [$4bf6: jp   c,$4C0A]
	jeq	l_4c11                             	| [$4bf9: jp   z,$4C11]
	cmp.b	#0xFB,d0                         	| [$4bfc: cp   $FB]
	jeq	bullet_flies_4c78                             	| [$4bfe: jp   z,$4C78]
	cmp.b	#0xFE,d0                         	| [$4c01: cp   $FE]
	jcs	bullet_hits_wall_4c9c                             	| [$4c03: jp   c,$4C9C]
	jeq	l_4cb0                             	| [$4c06: jp   z,$4CB0]
	rts                                    	| [$4c09: ret]
l_4c0a:
	addq.b	#1,(0x02,a2)                    	| [$4c0a: inc  (ix+$02)]
	jbsr	handle_shoot_5054                            	| [$4c0d: call $5054]
	rts                                    	| [$4c10: ret]
l_4c11:
	move.b	#0xFB,(0x02,a2)                 	| [$4c11: ld   (ix+$02),$FB]
	jbsr	handle_shoot_5054                            	| [$4c15: call $5054]
	move.b	#0x10,d1                        	| [$4c18: ld   b,$10]
l_4c1a:
	* this part is clearly a protection of sorts activated when player is shooting
	* if something is not right it will set 82F5 (hidden with address computation)
    * to $44... it never happens in the game, so I suppose this is bad... But I'm not
    * even sure of this... we'll see...	
	      	    | [$4c1a: push bc]
	       	| [$4c1b: ld   a,($82F4)]
	         	| [$4c1e: ld   hl,($82F2)]

	        	| [$4c21: xor  l]
	         	| [$4c22: sub  (hl)] here game reads the whole memory (ROM). Nuts!!
	       	| [$4c23: ld   ($82F4),a]
				| [$4c26: inc  hl]
	        	| [$4c27: ld   ($82F2),hl]
	       	| [$4c2a: ld   bc,$800A]
	        	| [$4c2d: add  hl,bc]
	      	| [$4c2e: jr   nc,$4C47]
	        	| [$4c30: ld   ($82F2),hl]
	      	| [$4c33: ld   hl,$82F4]
	           	| [$4c36: ld   a,($7FF8)]
	   	| [$4c39: nop]
	
	        	| [$4c3a: xor  (hl)]
	       	| [$4c3b: ld   (hl),a]
	      	| [$4c3c: jr   z,$4C47]
	      	| [$4c3e: ld   hl,$82B1]
			| [$4c41: ld   b,$00]
	       	| [$4c43: ld   c,$44]
	        	| [$4c45: add  hl,bc]
	       	| [$4c46: ld   (hl),c]

	      	| [$4c47: pop  bc]
	       	| [...]
	      	| [$4c48: djnz $4C1A]
	* then non-weird code resumes...
	LOAD_POINTER	ram_pointer_8336(a6),a0             	| [$4c4a: ld   hl,($8336)]
	move.b	(a0),d0                         	| [$4c4d: ld   a,(hl)]
	addq.b	#1,d0                           	| [$4c4e: inc  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$4c4f: ret  z] [...]
0:
	move.w	#0x0003,d3                      	| [$4c50: ld   de,$0003] 3
	add.w	d3,a0                            	| [$4c53: add  hl,de]
	move.b	(a0),d0                         	| [$4c54: ld   a,(hl)]
	and.b	#0xFB,d0                         	| [$4c55: and  $FB]
	move.b	d0,(a0)+                         	| [$4c57: ld   (hl),a]
	                           	| [$4c58: inc  hl]
	addq.b	#1,(a0)                         	| [$4c59: inc  (hl)]
	move.b	(0x07,a2),d0                    	| [$4c5a: ld   a,(ix+$07)]
	                             	| [$4c5d: or   a]
	jne	l_4c6f                             	| [$4c5e: jr   nz,$4C6F]
	move.b	(a0),d0                         	| [$4c60: ld   a,(hl)]
	sub.b	#0x73,d0                         	| [$4c61: sub  $73]
	asr.b	#1,d0                            	| [$4c63: sra  a]
	add.b	#0x70,d0                         	| [$4c65: add  a,$70]
	move.b	d0,(a0)                         	| [$4c67: ld   (hl),a]
	move.b	#0x91,d0                        	| [$4c68: ld   a,$91] player shot
	jbsr	play_sound_3656                   	| [$4c6a: call play_sound_3656]
	jra	l_4c74                             	| [$4c6d: jr   $4C74]

l_4c6f:
	move.b	#0x92,d0                        	| [$4c6f: ld   a,$92] enemy shot
	jbsr	play_sound_3656                   	| [$4c71: call play_sound_3656]
l_4c74:
	jbsr	l_4cb9                            	| [$4c74: call $4CB9]
	rts                                    	    | [$4c77: ret]
	
bullet_flies_4c78:
	LOAD_POINTER	ram_pointer_8336(a6),a0             	| [$4c78: ld   hl,($8336)]
	move.b	#0x04,(a0)+                      	| [$4c7b: ld   (hl),$04]
	                           	| [$4c7d: inc  hl]
	move.b	(a0),d0                         	| [$4c7e: ld   a,(hl)]
	add.b	(0x03,a2),d0    	| [$4c7f: add  a,(ix+character_y_offset_03)]
	move.b	d0,(a0)+                         	| [$4c82: ld   (hl),a]
	                           	| [$4c83: inc  hl]
	move.b	scroll_speed_8004(a6),d0        	| [$4c84: ld   a,(scroll_speed_8004)]
	neg.b	d0                               	| [$4c87: neg]
	add.b	(a0),d0                          	| [$4c89: add  a,(hl)]
	move.b	d0,(a0)                         	| [$4c8a: ld   (hl),a]
	addq.w	#2,a0                           	| [$4c8b: inc  hl] * 2
	move.b	#0x78,(a0)                      	| [$4c8d: ld   (hl),$78] bullet sprite
	move.b	(0x04,a2),d0                    	| [$4c8f: ld   a,(ix+$04)]
	add.b	(0x03,a2),d0    	| [$4c92: add  a,(ix+character_y_offset_03)]
	move.b	d0,(0x04,a2)                    	| [$4c95: ld   (ix+$04),a]
	jbsr	l_4cb9                            	| [$4c98: call $4CB9]
	rts                                    	| [$4c9b: ret]

bullet_hits_wall_4c9c:
	addq.b	#1,(0x02,a2)                    	| [$4c9c: inc  (ix+$02)]
	LOAD_POINTER	ram_pointer_8336(a6),a0             	| [$4c9f: ld   hl,($8336)]
	addq.w	#2,a0                           	| [$4ca2: inc  hl] * 2
	move.b	scroll_speed_8004(a6),d0        	| [$4ca4: ld   a,(scroll_speed_8004)]
	neg.b	d0                               	| [$4ca7: neg]
	add.b	(a0),d0                          	| [$4ca9: add  a,(hl)]
	move.b	d0,(a0)                         	| [$4caa: ld   (hl),a]
	addq.w	#2,a0                           	| [$4cab: inc  hl] * 2
	move.b	#0x79,(a0)                      	| [$4cad: ld   (hl),$79] bullet hitting wall
	rts                                    	| [$4caf: ret]
l_4cb0:
	addq.b	#1,(0x02,a2)                    	| [$4cb0: inc  (ix+$02)]
	LOAD_POINTER	ram_pointer_8336(a6),a0             	| [$4cb3: ld   hl,($8336)]
	move.b	#0xFF,(a0)                      	| [$4cb6: ld   (hl),$FF]
	rts                                    	| [$4cb8: ret]

l_4cb9:
	clr.b	d0                               	| [$4cb9: xor  a]
	move.b	d0,l_8339(a6)                   	| [$4cba: ld   ($8339),a]
	st.b	d1                                	| [$4cbd: ld   b,$FF]
	move.b	(character_y_offset_03,a2),d0   	| [$4cbf: ld   a,(ix+character_y_offset_03)]
												| [$4cc2: or   a]
	jpl	l_4cc8                             	    | [$4cc3: jp   p,$4CC8]
	moveq	#0,d1                               | [$4cc6: ld   b,$00]
l_4cc8:
	move.b	d1,d0                           	| [$4cc8: ld   a,b]
	move.b	d0,l_8338(a6)                   	| [$4cc9: ld   ($8338),a]
	jbsr	l_06b4                            	| [$4ccc: call $06B4]
	jbsr	l_07ee                            	| [$4ccf: call $07EE]
	move.b	l_8335(a6),d0                   	| [$4cd2: ld   a,($8335)]
	cmp.b	#0x03,d0                         	| [$4cd5: cp   $03]
	jcc	l_4cdd                             	| [$4cd7: jp   nc,$4CDD]
	jbsr	l_084c                            	| [$4cda: call $084C]
l_4cdd:
	jbsr	l_08b4                            	| [$4cdd: call $08B4]
	move.b	l_8339(a6),d0                   	| [$4ce0: ld   a,($8339)]
	                             	| [$4ce3: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$4ce4: ret  z] [...]
0:
	LOAD_POINTER	ram_pointer_8336(a6),a0             	| [$4ce5: ld   hl,($8336)]
 	move.w	#0x0004,d3                      	| [$4ce8: ld   de,$0004] 4
	add.w	d3,a0                            	| [$4ceb: add  hl,de]
 	move.b	#0x79,(a0)                      	| [$4cec: ld   (hl),$79] bullet hitting wall
	subq.b	#1,d0                           	| [$4cee: dec  a]
	jeq	l_4cfa                             	| [$4cef: jp   z,$4CFA]
	subq.b	#0x02,d0                        	| [$4cf2: sub  $02]
	jeq	fire_bullet_4d33                             	| [$4cf4: jp   z,$4D33]
	jra	l_4d53                             	| [$4cf7: jp   $4D53]
l_4cfa:
	LOAD_POINTER	bullet_sprite_ram_address_833A(a6),a3             	| [$4cfa: ld   iy,($833A)]
 	move.b	(0x09,a3),d0                    	| [$4cfe: ld   a,(iy+$09)]
	cmp.b	#0x07,d0                         	| [$4d01: cp   $07]
	jeq	l_4d0a                             	| [$4d03: jr   z,$4D0A]
	cmp.b	#0x05,d0                         	| [$4d05: cp   $05]
	jcc	l_4d58                             	| [$4d07: jp   nc,$4D58]
l_4d0a:
	move.b	(0x06,a3),d0                    	| [$4d0a: ld   a,(iy+$06)]
	cmp.b	#0x03,d0                         	| [$4d0d: cp   $03]
	jcc	l_4d58                             	| [$4d0f: jp   nc,$4D58]
	clr.b	(0x0a,a3)                        	| [$4d12: ld   (iy+$0a),$00]
	move.b	#0x05,(0x09,a3)                 	| [$4d16: ld   (iy+$09),$05] character (player or enemy) hit: set death state
	move.b	(0x07,a2),d0                    	| [$4d1a: ld   a,(ix+$07)]
	                             	| [$4d1d: or   a]
	jeq	l_4d28                             	| [$4d1e: jr   z,$4D28]
	move.b	#0xC4,d0                        	| [$4d20: ld   a,$C4] player killed (shot) sound
	jbsr	play_sound_3656                   	| [$4d22: call play_sound_3656]
	jra	l_4d58                             	| [$4d25: jp   $4D58]

l_4d28:
	move.b	#0x3A,d0                        	| [$4d28: ld   a,$3A] enemy killed sound
	jbsr	play_sound_3656                   	| [$4d2a: call play_sound_3656]
	jbsr	l_5694                            	| [$4d2d: call $5694]
	jra	l_4d58                             	| [$4d30: jp   $4D58]
	
fire_bullet_4d33:
	LOAD_POINTER	bullet_sprite_ram_address_833A(a6),a3             	| [$4d33: ld   iy,($833A)]
	move.b	(character_x_00,a2),d0          	| [$4d37: ld   a,(ix+character_x_00)]
	move.b	d0,(a3)                    	| [$4d3a: ld   (iy+$00),a]
	clr.b	(0x02,a3)                        	| [$4d3d: ld   (iy+$02),$00]
	move.b	#0x48,d1                        	| [$4d41: ld   b,$48]
	move.b	(0x04,a2),d0                    	| [$4d43: ld   a,(ix+$04)]
	cmp.b	#0x80,d0                         	| [$4d46: cp   $80]
	jcs	l_4d4d                             	| [$4d48: jp   c,$4D4D]
	move.b	#0xA8,d1                        	| [$4d4b: ld   b,$A8]
l_4d4d:
	move.b	d1,(0x03,a3)                    	| [$4d4d: ld   (iy+$03),b]
	jra	l_4d58                             	| [$4d50: jp   $4D58]
l_4d53:
	move.b	#0x93,d0                        	| [$4d53: ld   a,$93] bullet hits wall
	jbsr	play_sound_3656                   	| [$4d55: call play_sound_3656]
l_4d58:
	move.b	#0xFC,(0x02,a2)                 	| [$4d58: ld   (ix+$02),$FC]
	move.b	l_8338(a6),d0                   	| [$4d5c: ld   a,($8338)]
	move.b	(0x04,a2),d1                    	| [$4d5f: ld   b,(ix+$04)]
	move.b	d0,(0x04,a2)                    	| [$4d62: ld   (ix+$04),a]
	sub.b	d1,d0                            	| [$4d65: sub  b]
	sub.b	(character_y_offset_03,a2),d0    	| [$4d66: sub  (ix+character_y_offset_03)]
	LOAD_POINTER	ram_pointer_8336(a6),a0             	| [$4d69: ld   hl,($8336)]
	addq.w	#1,a0                           	| [$4d6c: inc  hl]
	add.b	(a0),d0                          	| [$4d6d: add  a,(hl)]
	move.b	d0,(a0)                         	| [$4d6e: ld   (hl),a]
	rts                                    	| [$4d6f: ret]

player_arriving_on_roof_anim_4d70:
	clr.b	d0                               	| [$4d70: xor  a]
	move.b	d0,sync_flag_80AB(a6)                   	| [$4d71: ld   ($80AB),a]
	move.b	#0x1F,d0                        	| [$4d74: ld   a,$1F]
	move.b	d0,viewed_floor_802C(a6)                   	| [$4d76: ld   ($802C),a]
	jbsr	init_everything_4e6f                | [$4d79: call $4E6F]
	clr.b	d0                               	| [$4d7c: xor  a]
	move.b	d0,player_on_roof_anim_timer_833C(a6)                   	| [$4d7d: ld   ($833C),a]
	move.b	d0,l_833D(a6)                   	| [$4d80: ld   ($833D),a]
	* various stages of animation of player arriving on roof
l_4d83:
	jbsr	game_tick_73cf                            	| [$4d83: call $73CF]
	lea	player_on_roof_anim_timer_833C(a6),a0                      	| [$4d86: ld   hl,$833C]
	addq.b	#1,(a0)                         	| [$4d89: inc  (hl)]
	move.b	(a0),d0                         	| [$4d8a: ld   a,(hl)]
	cmp.b	#0x14,d0                         	| [$4d8b: cp   $14]
	jcs	l_4d83                             	| [$4d8d: jp   c,$4D83]
	move.b	#0xC2,d0                        	| [$4d90: ld   a,$C2] sound of grappling hook thrown on roof
	jbsr	play_sound             	| [$4d92: ld   (sound_latch_D50B),a]
	clr.b	d0                               	| [$4d95: xor  a]
	move.b	d0,player_on_roof_anim_timer_833C(a6)                   	| [$4d96: ld   ($833C),a]
	* wire launched
l_4d99:
	jbsr	update_grappling_hook_tiles_4eac           | [$4d99: call $4EAC]
	jbsr	game_tick_73cf                            	| [$4d9c: call $73CF]
	lea	player_on_roof_anim_timer_833C(a6),a0                      	| [$4d9f: ld   hl,$833C]
	addq.b	#1,(a0)                         	| [$4da2: inc  (hl)]
	move.b	(a0),d0                         	| [$4da3: ld   a,(hl)]
	cmp.b	#0x0D,d0                         	| [$4da4: cp   $0D]
	jcs	l_4d99                             	| [$4da6: jp   c,$4D99]
	clr.b	d0                               	| [$4da9: xor  a]
	move.b	d0,player_on_roof_anim_timer_833C(a6)                   	| [$4daa: ld   ($833C),a]
l_4dad:
	jbsr	grappling_wire_in_tension_4ee7       | [$4dad: call $4EE7]
	jbsr	game_tick_73cf                            	| [$4db0: call $73CF]
	lea	player_on_roof_anim_timer_833C(a6),a0                      	| [$4db3: ld   hl,$833C]
	addq.b	#1,(a0)                         	| [$4db6: inc  (hl)]
	move.b	(a0),d0                         	| [$4db7: ld   a,(hl)]
	cmp.b	#0x07,d0                         	| [$4db8: cp   $07]
	jcs	l_4dad                             	| [$4dba: jp   c,$4DAD]
	clr.b	d0                               	| [$4dbd: xor  a]
	move.b	d0,player_on_roof_anim_timer_833C(a6)                   	| [$4dbe: ld   ($833C),a]
l_4dc1:
	jbsr	compute_player_sliding_on_wire_sprites_4f13                            	| [$4dc1: call $4F13]
	jbsr	game_tick_73cf                            	| [$4dc4: call $73CF]
	lea	player_on_roof_anim_timer_833C(a6),a0                      	| [$4dc7: ld   hl,$833C]
	addq.b	#1,(a0)                         	| [$4dca: inc  (hl)]
	move.b	(a0),d0                         	| [$4dcb: ld   a,(hl)]
	cmp.b	#0x12,d0                         	| [$4dcc: cp   $12]
	jcs	l_4dc1                             	| [$4dce: jp   c,$4DC1]
	clr.b	d0                               	| [$4dd1: xor  a]
	move.b	d0,player_on_roof_anim_timer_833C(a6)                   	| [$4dd2: ld   ($833C),a]
l_4dd5:
	jbsr	player_sliding_slowing_down_4f4f      | [$4dd5: call $4F4F]
	jbsr	game_tick_73cf                            	| [$4dd8: call $73CF]
	lea	player_on_roof_anim_timer_833C(a6),a0                      	| [$4ddb: ld   hl,$833C]
	addq.b	#1,(a0)                         	| [$4dde: inc  (hl)]
	move.b	(a0),d0                         	| [$4ddf: ld   a,(hl)]
	cmp.b	#0x10,d0                         	| [$4de0: cp   $10]
	jcs	l_4dd5                             	| [$4de2: jp   c,$4DD5]
	clr.b	d0                               	| [$4de5: xor  a]
	move.b	d0,player_on_roof_anim_timer_833C(a6)                   	| [$4de6: ld   ($833C),a]
l_4de9:
	jbsr	player_releases_wire_4f5d        	| [$4de9: call $4F5D]
	jbsr	game_tick_73cf                            	| [$4dec: call $73CF]
	lea	player_on_roof_anim_timer_833C(a6),a0                      	| [$4def: ld   hl,$833C]
	addq.b	#1,(a0)                         	| [$4df2: inc  (hl)]
	move.b	(a0),d0                         	| [$4df3: ld   a,(hl)]
	cmp.b	#0x09,d0                         	| [$4df4: cp   $09]
	jcs	l_4de9                             	| [$4df6: jp   c,$4DE9]
	clr.b	d0                               	| [$4df9: xor  a]
	move.b	d0,player_on_roof_anim_timer_833C(a6)                   	| [$4dfa: ld   ($833C),a]
l_4dfd:
	jbsr	player_checking_surroundings_4fc7      | [$4dfd: call $4FC7]
	jbsr	game_tick_73cf                            	| [$4e00: call $73CF]
	lea	player_on_roof_anim_timer_833C(a6),a0                      	| [$4e03: ld   hl,$833C]
	addq.b	#1,(a0)                         	| [$4e06: inc  (hl)]
	move.b	(a0),d0                         	| [$4e07: ld   a,(hl)]
	cmp.b	#0x1A,d0                         	| [$4e08: cp   $1A]
	jcs	l_4dfd                             	| [$4e0a: jp   c,$4DFD]

	jbsr	start_music_if_in_game_363f                            	| [$4e0d: call $363F]
	                            	| [$4e10: call $4E14]
		    | [$4e13: ret]
* when entering here, player is on the roof, about to enter the elevator (automatically)
* when exiting from here, player is on floor 30, in the elevator and has control
force_player_into_elevator_4e14:
	move.b	#GS_IN_GAME_05,d0               	| [$4e14: ld   a,GS_IN_GAME_05]
	move.b	d0,game_state_80AC(a6)          	| [$4e16: ld   (game_state_80AC),a]
	jbsr	l_2f3a                            	| [$4e19: call $2F3A]
	jbsr	l_31ad                            	| [$4e1c: call $31AD]
	jbsr	init_moving_door_slots_1287                            	| [$4e1f: call $1287]
	jbsr	l_0bdc                            	| [$4e22: call $0BDC]
	jbsr	l_4b95                            	| [$4e25: call $4B95]
	jbsr	set_player_initial_state_2f72                            	| [$4e28: call $2F72]
	clr.b	d0                               	| [$4e2b: xor  a]
	move.b	d0,player_on_roof_anim_timer_833C(a6)                   	| [$4e2c: ld   ($833C),a]
	jbsr	osd_enable_interrupts               | ei
l_4e30:
	lea	player_on_roof_anim_timer_833C(a6),a0                      	| [$4e30: ld   hl,$833C]
	move.b	(a0),d0                         	| [$4e33: ld   a,(hl)]
	addq.b	#1,(a0)                         	| [$4e34: inc  (hl)]
	cmp.b	#0x08,d0                         	| [$4e35: cp   $08]
	jcc	l_4e40                             	| [$4e37: jr   nc,$4E40]
	move.b	#0x02,d0                        	| [$4e39: ld   a,$02] force move right
	move.b	d0,player_move_direction_8527(a6)	| [$4e3b: ld   (player_move_direction_8527),a]
	jra	l_4e57                             	| [$4e3e: jr   $4E57]
l_4e40:
	clr.b	d0                               	| [$4e40: xor  a]
	move.b	d0,player_move_direction_8527(a6)	| [$4e41: ld   (player_move_direction_8527),a] no move
	move.b	l_83CE(a6),d0                   	| [$4e44: ld   a,($83CE)]
	cmp.b	#0x1E,d0                         	| [$4e47: cp   $1E]
	jne	l_4e52                             	| [$4e49: jr   nz,$4E52]
	move.b	distance_to_lower_floor_83CD(a6),d0           | [$4e4b: ld   a,($83CD)]
											| [$4e4e: or   a]
	jne	l_4e57                             	| [$4e4f: jr   nz,$4E57] loop until elevator is on 30th
	* reaches here when player is about to take control, on 30th floor
	rts                                    	| [$4e51: ret]
l_4e52:
	move.b	#0x04,d0                        	| [$4e52: ld   a,$04]
	move.b	d0,player_move_direction_8527(a6)	| [$4e54: ld   (player_move_direction_8527),a]
l_4e57:
	jbsr	handle_main_scrolling_017F        	| [$4e57: call handle_main_scrolling_017F]
	jbsr	handle_elevators_0EBF             	| [$4e5a: call handle_elevators_0EBF]
	jbsr	handle_moving_doors_12A2               	| [$4e5d: call handle_moving_doors_12A2]
	jbsr	l_2fe8                            	| [$4e60: call $2FE8]
	jbsr	l_0be1                            	| [$4e63: call $0BE1]
	jbsr	update_sprite_shadow_ram_15a0                            	| [$4e66: call $15A0]
	jbsr	game_tick_73cf                            	| [$4e69: call $73CF]
	jra	l_4e30                             	| [$4e6c: jp   $4E30]

init_everything_4e6f:
	lea	l_833E(a6),a0                      	| [$4e6f: ld   hl,$833E]
	move.b	#0x08,d1                        	| [$4e72: ld   b,$08]
l_4e74:
	clr.b	(a0)+                             	| [$4e74: ld   (hl),$00]
	                           	| [$4e76: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_4e74                             	| [$4e77: djnz $4E74]
	lea	grappling_hook_tile_834b(a6),a0                      	| [$4e79: ld   hl,$834B]
	STORE_POINTER	a0,ram_pointer_8346(a6)            	| [$4e7c: ld   ($8346),hl]
	STORE_POINTER	a0,ram_pointer_8349(a6)            	| [$4e7f: ld   ($8349),hl]
	jbsr	l_71e1                            	| [$4e82: call $71E1]
	clr.b	d0                               	| [$4e85: xor  a]
	move.b	d0,menu_or_game_tiles_81D9(a6)  	| [$4e86: ld   (menu_or_game_tiles_81D9),a]
	jbsr	init_hw_scroll_and_charset_260C                            	| [$4e89: call $260C]
	move.b	#GS_GAME_STARTING_04,d0         	| [$4e8c: ld   a,GS_GAME_STARTING_04]
	move.b	d0,game_state_80AC(a6)          	| [$4e8e: ld   (game_state_80AC),a]
	jbsr	init_level_skill_params_2A2E      	| [$4e91: call init_level_skill_params_2A2E]
	jbsr	display_bottom_bricks_582e                            	| [$4e94: call $582E]
	jbsr	init_building_2700                            	| [$4e97: call $2700]
	jbsr	init_elevators_2a65                            	| [$4e9a: call $2A65]
	jbsr	display_nb_lives_5801                            	| [$4e9d: call $5801]
	jbsr	update_upper_status_bar_57C6      	| [$4ea0: call update_upper_status_bar_57C6]
	move.b	#0x05,d0                        	| [$4ea3: ld   a,$05]
	move.b	d0,timer_8bit_reload_value_80A9(a6)	| [$4ea5: ld   (timer_8bit_reload_value_80A9),a]
	jbra	reload_8bit_timer_26C2           	| [$4ea8: call reload_8bit_timer_26C2]
	                                    	| [$4eab: ret]

update_grappling_hook_tiles_4eac:
	move.b	player_on_roof_anim_timer_833C(a6),d0                   	| [$4eac: ld   a,($833C)]
	move.b	d0,d1                           	| [$4eaf: ld   b,a]
	and.b	#0xFE,d0                         	| [$4eb0: and  $FE]
	add.b	d0,d0                            	| [$4eb2: add  a,a]
	add.b	d0,d0                            	| [$4eb3: add  a,a]
	add.b	d0,d0                            	| [$4eb4: add  a,a]
	add.b	d0,d0                            	| [$4eb5: add  a,a]
	add.b	d1,d0                            	| [$4eb6: add  a,b]
	moveq   #0,d3                               	| [$4eb8: ld   d,$00]
	move.b	d0,d3                           	| [$4eb7: ld   e,a]
	lea	l_C8C0(a6),a0                      	| [$4eba: ld   hl,$C8C0]
	add.w	d3,a0                            	| [$4ebd: add  hl,de]
	STORE_POINTER	a0,ram_pointer_8346(a6)            	| [$4ebe: ld   ($8346),hl]
	move.b	#0x98,d3
	move.b	#0xFE,d4                      	| [$4ec1: ld   de,$98FE]
	addq.w	#1,a0                           	| [$4ec4: inc  hl]
	btst.b	#0,d1                           	| [$4ec5: bit  0,b]
	jeq	l_4ed1                             	| [$4ec7: jp   z,$4ED1]
	move.w	#0x0020,d1                      	| [$4eca: ld   bc,$0020] 32
	add.w	d1,a0                            	| [$4ecd: add  hl,bc]
	move.b	#0x99,d3
	move.b	#0xFD,d4                      	| [$4ece: ld   de,$99FD]
l_4ed1:
	move.b	player_on_roof_anim_timer_833C(a6),d0                   	| [$4ed1: ld   a,($833C)]
	cmp.b	#0x0C,d0                         	| [$4ed4: cp   $0C]
	jne	l_4edb                             	| [$4ed6: jp   nz,$4EDB]
	move.b	#0x9C,d4                        	| [$4ed9: ld   e,$9C]
l_4edb:
	STORE_POINTER	a0,ram_pointer_8349(a6)            	| [$4edb: ld   ($8349),hl]
	                           	| [$4ede: ld   a,d]
	move.b	d3,grappling_hook_tile_8348(a6)                   	| [$4edf: ld   ($8348),a]
	                           	| [$4ee2: ld   a,e]
	move.b	d4,grappling_hook_tile_834b(a6)                   	| [$4ee3: ld   ($834B),a]
	rts                                    	| [$4ee6: ret]
grappling_wire_in_tension_4ee7:
	move.b	player_on_roof_anim_timer_833C(a6),d0                   	| [$4ee7: ld   a,($833C)]
	move.b	d0,d1                           	| [$4eea: ld   b,a]
	add.b	d0,d0                            	| [$4eeb: add  a,a]
	add.b	d0,d0                            	| [$4eec: add  a,a]
	add.b	d0,d0                            	| [$4eed: add  a,a]
	add.b	d0,d0                            	| [$4eee: add  a,a]
	add.b	d0,d0                            	| [$4eef: add  a,a]
	add.b	d1,d0                            	| [$4ef0: add  a,b]
	add.b	d1,d0                            	| [$4ef1: add  a,b]
	moveq   #0,d3                               	| [$4ef3: ld   d,$00]
	move.b	d0,d3                           	| [$4ef2: ld   e,a]
	lea	l_C8C0(a6),a0                      	| [$4ef5: ld   hl,$C8C0]
	add.w	d3,a0                            	| [$4ef8: add  hl,de]
	STORE_POINTER	a0,ram_pointer_8346(a6)            	| [$4ef9: ld   ($8346),hl]
	addq.w	#1,a0                           	| [$4efc: inc  hl]
	STORE_POINTER	a0,ram_pointer_8349(a6)            	| [$4efd: ld   ($8349),hl]
	move.b	#0x9A,d0                        	| [$4f00: ld   a,$9A]
	move.b	d0,grappling_hook_tile_8348(a6)                   	| [$4f02: ld   ($8348),a]
	addq.b	#1,d0                           	| [$4f05: inc  a]
	move.b	d0,grappling_hook_tile_834b(a6)                   	| [$4f06: ld   ($834B),a]
	move.b	d1,d0                           	| [$4f09: ld   a,b]
	cmp.b	#0x06,d0                         	| [$4f0a: cp   $06]
	bcc.b	0f                               	| [...]
	rts                                    	| [$4f0c: ret  c] [...]
0:
	move.b	#0x9C,d0                        	| [$4f0d: ld   a,$9C]
	move.b	d0,grappling_hook_tile_834b(a6)                   	| [$4f0f: ld   ($834B),a]
	rts                                    	| [$4f12: ret]

compute_player_sliding_on_wire_sprites_4f13:
	move.b	player_on_roof_anim_timer_833C(a6),d0                   	| [$4f13: ld   a,($833C)]
	add.b	d0,d0                            	| [$4f16: add  a,a]
	move.b	d0,d1                           	| [$4f17: ld   b,a]
	add.b	d0,d0                            	| [$4f18: add  a,a]
	add.b	#0xF0,d0                         	| [$4f19: add  a,$F0]
	move.b	d0,d2                           	| [$4f1b: ld   c,a]
	move.b	#0xC8,d0                        	| [$4f1c: ld   a,$C8]
	sub.b	d1,d0                            	| [$4f1e: sub  b]
	move.b	d0,d1                           	| [$4f1f: ld   b,a]
	lea	l_833E(a6),a0                      	| [$4f20: ld   hl,$833E]
	move.b	#0xF0,(a0)+                      	| [$4f23: ld   (hl),$F0]
	                           	| [$4f25: inc  hl]
	move.b	d1,(a0)+                         	| [$4f26: ld   (hl),b]
	                           	| [$4f27: inc  hl]
	move.b	#0x04,(a0)+                      	| [$4f28: ld   (hl),$04]
	                           	| [$4f2a: inc  hl]
	move.b	#0x02,(a0)+                      	| [$4f2b: ld   (hl),$02]
	                           	| [$4f2d: inc  hl]
	move.b	d2,(a0)+                         	| [$4f2e: ld   (hl),c]
	                           	| [$4f2f: inc  hl]
	move.b	d1,(a0)+                         	| [$4f30: ld   (hl),b]
	                           	| [$4f31: inc  hl]
	clr.b	(a0)+                             	| [$4f32: ld   (hl),$00]
	                           	| [$4f34: inc  hl]
	move.b	#0x4D,(a0)                      	| [$4f35: ld   (hl),$4D]
	lea	l_833E(a6),a0                      	| [$4f37: ld   hl,$833E]
	jbsr	l_4f40                            	| [$4f3a: call $4F40]
	lea	l_8342(a6),a0                      	| [$4f3d: ld   hl,$8342]
l_4f40:
	move.b	flip_screen_81D8(a6),d0                   	| [$4f40: ld   a,($81D8)]
	                             	| [$4f43: or   a]
	jne	l_4f4a                             	| [$4f44: jp   nz,$4F4A]
	addq.b	#2,(a0)                         	| [$4f47: inc  (hl)] * 2
	rts                                    	| [$4f49: ret]
l_4f4a:
	subq.b	#1,(a0)+                         	| [$4f4a: dec  (hl)]
	                           	| [$4f4b: inc  hl]
	subq.b	#2,(a0)                         	| [$4f4c: dec  (hl)] * 2
	rts                                    	| [$4f4e: ret]

player_sliding_slowing_down_4f4f:
	lea	l_8342(a6),a0                      	| [$4f4f: ld   hl,$8342]
	addq.b	#2,(a0)+                         	| [$4f52: inc  (hl)] * 2
	                           	| [$4f54: inc  hl]
	subq.b	#1,(a0)                         	| [$4f55: dec  (hl)]
	addq.w	#2,a0                           	| [$4f56: inc  hl] * 2
	move.b	#0x99,d0                        	| [$4f58: ld   a,$99]
	sub.b	(a0),d0                          	| [$4f5a: sub  (hl)]
	move.b	d0,(a0)                         	| [$4f5b: ld   (hl),a]
	rts                                    	| [$4f5c: ret]

player_releases_wire_4f5d:
	move.b	player_on_roof_anim_timer_833C(a6),d0                   	| [$4f5d: ld   a,($833C)]
	add.b	d0,d0                            	| [$4f60: add  a,a]
	add.b	d0,d0                            	| [$4f61: add  a,a]
	add.b	d0,d0                            	| [$4f62: add  a,a]
	moveq   #0,d3                               	| [$4f64: ld   d,$00]
	move.b	d0,d3                           	| [$4f63: ld   e,a]
	lea	table_4F7F,a0                      	| [$4f66: ld   hl,table_4F7F]
	add.w	d3,a0                            	| [$4f69: add  hl,de]
	lea	l_833E(a6),a1                      	| [$4f6a: ld   de,$833E]
	move.w	#0x0008,d1                      	| [$4f6d: ld   bc,$0008] 8
	jbsr	ldir                              	| [$4f70: ldir]
	lea	l_833E(a6),a0                      	| [$4f72: ld   hl,$833E]
	jbsr	l_4f40                            	| [$4f75: call $4F40]
	lea	l_8342(a6),a0                      	| [$4f78: ld   hl,$8342]
	jbsr	l_4f40                            	| [$4f7b: call $4F40]
	rts                                    	| [$4f7e: ret]

table_4F7F:
	.byte	0x53
	.byte	0x94
	.byte	0x01,0x44,0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x54
	.byte	0x93
	.byte	0x01,0x44,0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x55
	.byte	0x91
	.byte	0x01,0x44,0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x56
	.byte	0x8E
	.byte	0x01,0x44,0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x57
	.byte	0x86
	.byte	0x01,0x43,0x57
	.byte	0x96
	.byte	0x01,0x4E,0x59
	.byte	0x81
	.byte	0x01,0x43,0x59
	.byte	0x91
	.byte	0x01,0x4E,0x5A
	.byte	0x7B
	.byte	0x01,0x43,0x5A
	.byte	0x8B
	.byte	0x01,0x4E,0x5B
	.byte	0x6E
	.byte	0x01,0x43,0x5B
	.byte	0x7E
	.byte	0x01,0x4E,0x60
	.byte	0x6E
	.byte	0x01,0x42,0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.align	2

player_checking_surroundings_4fc7:
	move.b	player_on_roof_anim_timer_833C(a6),d0                   	| [$4fc7: ld   a,($833C)]
	move.b	d0,l_833D(a6)                   	| [$4fca: ld   ($833D),a]
	and.b	#0xF8,d0                         	| [$4fcd: and  $F8]
	moveq   #0,d3                               	| [$4fd0: ld   d,$00]
	move.b	d0,d3                           	| [$4fcf: ld   e,a]
	lea	table_4FEB,a0                      	| [$4fd2: ld   hl,table_4FEB]
	add.w	d3,a0                            	| [$4fd5: add  hl,de]
	lea	l_833E(a6),a1                      	| [$4fd6: ld   de,$833E]
	move.w	#0x0008,d1                      	| [$4fd9: ld   bc,$0008] 8
	jbsr	ldir                              	| [$4fdc: ldir]
	lea	l_833E(a6),a0                      	| [$4fde: ld   hl,$833E]
	jbsr	l_4f40                            	| [$4fe1: call $4F40]
	lea	l_8342(a6),a0                      	| [$4fe4: ld   hl,$8342]
	jbsr	l_4f40                            	| [$4fe7: call $4F40]
	rts                                    	| [$4fea: ret]

table_4FEB:
	.byte	0x60
	.byte	0x6E
	.byte	0x01,0x42,0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x5C
	.byte	0x6E
	.byte	0x00
	.byte	0x42
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x60
	.byte	0x6E
	.byte	0x01,0x42,0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x5C
	.byte	0x6E
	.byte	0x01,0x41,0x5D
	.byte	0x7E
	.byte	0x01,0x4E
	.align	2

l_500b:
	lea	l_833E(a6),a0                      	| [$500b: ld   hl,$833E]
	move.b	#0x83,d0                        	| [$500c: ld   a,$83] why??
	lea	sprite_ram_d100,a1                 	| [$500e: ld   de,sprite_ram_d100]
											| [$5011: ld   bc,$0008] 8
	move.l	(a0)+,(a1)+                              	| [$5014: ldir]
	move.l	(a0)+,(a1)+                              	| [$5014: ldir]
	move.b	l_833D(a6),d0                   	| [$5016: ld   a,($833D)]
	                             	| [$5019: or   a]
	jeq	display_grappling_wire_5026                             	| [$501a: jp   z,$5026]
	subq.b	#1,d0                           	| [$501d: dec  a]
	jeq	erase_grappling_wire_5035                             	| [$501e: jp   z,$5035]
	subq.b	#1,d0                           	| [$5021: dec  a]
	jeq	erase_grappling_wire_5043                             	| [$5022: jp   z,$5043]
	rts                                    	| [$5025: ret]
	
display_grappling_wire_5026:
	move.b	ram_pointer_8346+1(a6),d0
	cmp.b	#0xC8,d0
	jcs		0f
	* video ram pointer
	LOAD_POINTER	ram_pointer_8346(a6),a0             	| [$5026: ld   hl,($8346)]
	move.b	grappling_hook_tile_8348(a6),d0                   	| [$5029: ld   a,($8348)]
	jbsr	osd_w_videoram                         	| [$502c: ld   (hl),a]
	LOAD_POINTER	ram_pointer_8349(a6),a0             	| [$502d: ld   hl,($8349)]
	move.b	grappling_hook_tile_834b(a6),d0                   	| [$5030: ld   a,($834B)]
	jbsr	osd_w_videoram                         	| [$5033: ld   (hl),a]
	rts                                    	| [$5034: ret]
0:
	* regular ram
	LOAD_POINTER	ram_pointer_8346(a6),a0             	| [$5026: ld   hl,($8346)]
	move.b	grappling_hook_tile_8348(a6),d0                   	| [$5029: ld   a,($8348)]
	move.b	d0,(a0)                         	| [$502c: ld   (hl),a]
	LOAD_POINTER	ram_pointer_8349(a6),a0             	| [$502d: ld   hl,($8349)]
	move.b	grappling_hook_tile_834b(a6),d0                   	| [$5030: ld   a,($834B)]
	move.b	d0,(a0)                         	| [$5033: ld   (hl),a]
	rts                                    	| [$5034: ret]
	
	
erase_grappling_wire_5035:
	lea	l_C8C0(a6),a0                      	| [$5035: ld   hl,$C8C0]
	move.w	#0x0022,d3                      	| [$5038: ld   de,$0022] 34
	move.b	#0x07,d1                        	| [$503b: ld   b,$07]
	move.b	#0x40,d0
l_503d:
	jbsr	osd_w_videoram                    	| [$503d: ld   (hl),$40]
	add.w	d3,a0                            	| [$503f: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_503d                             	| [$5040: djnz $503D]
	rts                                    	| [$5042: ret]
erase_grappling_wire_5043:
	lea	l_C8C1(a6),a0                      	| [$5043: ld   hl,$C8C1]
	move.w	#0x0022,d3                      	| [$5046: ld   de,$0022] 34
	move.b	#0x06,d1                        	| [$5049: ld   b,$06]
	move.b	#0x40,d0
	jbsr	l_503d                            	| [$504b: call $503D]
	* remove head of grappling hook
	move.b	#0x41,d0                        	| [$504e: ld   a,$41]
	lea		l_C98D(a6),a0                   	| [$5050: ld   ($C98D),a]
	jbsr	osd_w_videoram
	rts                                    	| [$5053: ret]

handle_shoot_5054:
	move.l	a2,-(sp)                        	| [$5054: push ix]
	move.b	(0x05,a2),d4    	| [$5056: ld   e,(ix+5)]
	move.b	(0x06,a2),d3  	| [$5059: ld   d,(ix+6)]
	LOAD_D3_16_FROM_D3D4
	* this is a character address in RAM (ex: 851A) | [$505c: push de]
	sub.w	#0x8000,d3
	.ifndef		RELEASE
	jcc		0f
	illegal
	cmp.b	d3,d3
0:
	.endif
	lea	(a6,d3.w),a2	| real RAM address on host space
	                   	| [$505c: push de]
	                   	| [$505d: pop  ix]
	move.b	(enemy_state_09,a2),d0                    	| [$505f: ld   a,(ix+$09)]
	cmp.b	#0x07,d0                         	| [$5062: cp   $07]
	jeq	l_506b                             	| [$5064: jr   z,$506B]
	cmp.b	#0x05,d0                         	| [$5066: cp   $05]
	jcc	character_falling_50A0             	| [$5068: jp   nc,character_falling_50A0]
l_506b:
	move.b	(character_situation_06,a2),d0  	| [$506b: ld   a,(ix+character_situation_06)]
	cmp.b	#CS_FALLING_03,d0                	| [$506e: cp   CS_FALLING_03]
	jeq	character_falling_50A0             	| [$5070: jp   z,character_falling_50A0]
	jbsr	l_5110                            	| [$5073: call $5110]
	jbsr	compute_d5_from_table_50ac                            	| [$5076: call $50AC]
	move.l	(sp)+,a2                        	| [$5079: pop  ix]
	move.b	d1,(character_x_00,a2)          	| [$507b: ld   (ix+character_x_00),b]
	move.b	d2,(character_x_right_01,a2)    	| [$507e: ld   (ix+character_x_right_01),c]
	move.b	d3,(0x04,a2)                    	| [$5081: ld   (ix+$04),d]
	move.b	d4,d1                           	| [$5084: ld   b,e]
	move.b	(current_floor_07,a2),d0            | [$5085: ld   a,(ix+$07)]
	                             	            | [$5088: or   a]
	jeq	l_5099                             	    | [$5089: jp   z,$5099]
	move.b	l_834C(a6),d0                   	| [$508c: ld   a,($834C)]
	move.b	d0,d1                           	| [$508f: ld   b,a]
	neg.b	d0                               	| [$5090: neg]
	move.b	d0,d2                           	| [$5092: ld   c,a]
	move.b	d4,d0                           	| [$5093: ld   a,e]
	                             	| [$5094: or   a]
	jpl	l_5099                             	| [$5095: jp   p,$5099]
	move.b	d2,d1                           	| [$5098: ld   b,c]
l_5099:
	move.b	d1,(character_y_offset_03,a2)   	| [$5099: ld   (ix+character_y_offset_03),b]
	jbsr	l_5153                            	| [$509c: call $5153]
	rts                                    	| [$509f: ret]

character_falling_50A0:
	move.l	(sp)+,a2                        	| [$50a0: pop  ix]
	st	(0x02,a2)                 	| [$50a2: ld   (ix+$02),$FF]
	LOAD_POINTER	ram_pointer_8336(a6),a0             	| [$50a6: ld   hl,($8336)]
	st.b	(a0)                      	| [$50a9: ld   (hl),$FF]
	rts                                    	| [$50ab: ret]

compute_d5_from_table_50ac:
	lea	table_50D8,a0                      	| [$50ac: ld   hl,table_50D8]
	move.b	(0x0c,a2),d0                    	| [$50af: ld   a,(ix+$0c)]
	cmp.b	#0x07,d0                         	| [$50b2: cp   $07]
	jcs	l_50b8                             	| [$50b4: jr   c,$50B8]
	subq.b	#0x03,d0                        	| [$50b6: sub  $03]
l_50b8:
	add.b	d0,d0                            	| [$50b8: add  a,a]
	add.b	(0x0b,a2),d0                     	| [$50b9: add  a,(ix+$0b)]
	add.b	d0,d0                            	| [$50bc: add  a,a]
	add.b	d0,d0                            	| [$50bd: add  a,a]
	moveq   #0,d3                               	| [$50bf: ld   d,$00]
	move.b	d0,d3                           	| [$50be: ld   e,a]
	add.w	d3,a0                            	| [$50c1: add  hl,de]
	move.b	(a0)+,d0                         	| [$50c2: ld   a,(hl)]
										| [$50c3: inc  hl]
	add.b	d2,d0                            	| [$50c4: add  a,c]
	cmp.b	#0x30,d0                         	| [$50c5: cp   $30]
	jcs	l_50cd                             	| [$50c7: jp   c,$50CD]
	sub.b	#0x30,d0                         	| [$50ca: sub  $30]
	addq.b	#1,d1                           	| [$50cc: inc  b]
l_50cd:
	move.b	d0,d2                           	| [$50cd: ld   c,a]
	move.b	(a0)+,d0                         	| [$50ce: ld   a,(hl)]
	                           	| [$50cf: inc  hl]
	add.b	(character_x_00,a2),d0           	| [$50d0: add  a,(ix+character_x_00)]
	move.b	d0,d3                           	| [$50d3: ld   d,a]
	move.b	(a0)+,d4                         	| [$50d4: ld   e,(hl)]
												| [$50d5: inc  hl]
	move.b	(a0),d5                         	| [$50d6: ld   h,(hl)]
	rts                                    	    | [$50d7: ret]

table_50D8:
	.byte	0x0F
	.byte	0xFE,0xF8
	.byte	0x72
	.byte	0x0F
	.byte	0x0B
	.byte	0x08
	.byte	0x72
	.byte	0x0F
	.byte	0xFE,0xF8
	.byte	0x72
	.byte	0x0F
	.byte	0x0B
	.byte	0x08
	.byte	0x72
	.byte	0x09
	.byte	0xFE,0xF8
	.byte	0x74
	.byte	0x09
	.byte	0x0B
	.byte	0x08
	.byte	0x74
	.byte	0x0C
	.byte	0xFE,0xF8
	.byte	0x72
	.byte	0x0C
	.byte	0x0B
	.byte	0x08
	.byte	0x72
	.byte	0x0C
	.byte	0xFE,0xF8
	.byte	0x00
	.byte	0x0C
	.byte	0x0B
	.byte	0x08
	.byte	0x00
	.byte	0x06,0xFE
	.byte	0xF8
	.byte	0x74
	.byte	0x06,0x0B
	.byte	0x08
	.byte	0x74
	.byte	0x03
	.byte	0xFE,0xF8
	.byte	0x76
	.byte	0x03
	.byte	0x15
	.byte	0x08
	.byte	0x76
	.align	2

l_5110:
	move.b	(character_situation_06,a2),d0  	| [$5110: ld   a,(ix+character_situation_06)]
	                             	| [$5113: or   a]
	jeq	character_on_ground_514C           	| [$5114: jp   z,character_on_ground_514C]
	subq.b	#1,d0                           	| [$5117: dec  a]
	jeq	character_in_elevator_5134         	| [$5118: jp   z,character_in_elevator_5134]

	jbsr	load_character_elevator_structure_62CE	| [$511b: call load_character_elevator_structure_62CE]
	move.b	(0x08,a2),d0                    	| [$511e: ld   a,(ix+$08)]
	and.b	#0x80,d0                         	| [$5121: and  $80]
	rol.b	#2,d0                            	| [$5123: rlca] * 2
	neg.b	d0                               	| [$5125: neg]
	add.b	(0x01,a3),d0                     	| [$5127: add  a,(iy+$01)]
	addq.b	#1,d0                           	| [$512a: inc  a]
	move.b	d0,d1                           	| [$512b: ld   b,a]
	move.b	(character_y_offset_03,a2),d0   	| [$512c: ld   a,(ix+character_y_offset_03)]
	add.b	(a3),d0                     	| [$512f: add  a,(iy+$00)]
	move.b	d0,d2                           	| [$5132: ld   c,a]
	rts                                    	| [$5133: ret]

character_in_elevator_5134:
	jbsr	load_character_elevator_structure_62CE	| [$5134: call load_character_elevator_structure_62CE]
	move.b	(0x08,a2),d0                    	| [$5137: ld   a,(ix+$08)]
	and.b	#0x80,d0                         	| [$513a: and  $80]
	rol.b	#2,d0                            	| [$513c: rlca] * 2
	neg.b	d0                               	| [$513e: neg]
	add.b	(0x01,a3),d0                     	| [$5140: add  a,(iy+$01)]
	move.b	d0,d1                           	| [$5143: ld   b,a]
	move.b	(character_y_offset_03,a2),d0   	| [$5144: ld   a,(ix+character_y_offset_03)]
	add.b	(a3),d0                     	| [$5147: add  a,(iy+$00)]
	move.b	d0,d2                           	| [$514a: ld   c,a]
	rts                                    	| [$514b: ret]

character_on_ground_514C:
	move.b	(current_floor_07,a2),d1                    	| [$514c: ld   b,(ix+$07)]
	move.b	(character_y_offset_03,a2),d2   	| [$514f: ld   c,(ix+character_y_offset_03)]
	rts                                    	| [$5152: ret]

* < D5.B
l_5153:
	move.b	d5,d2                           	| [$5153: ld   c,h]
	LOAD_POINTER	ram_pointer_8336(a6),a0             	| [$5154: ld   hl,($8336)]
	move.w	#0x0004,d3                      	| [$5157: ld   de,$0004] 4
	add.w	d3,a0                            	| [$515a: add  hl,de]
	move.b	d2,(a0)                         	| [$515b: ld   (hl),c]
	move.b	(0,a2),d1          	| [$515c: ld   b,(ix+character_x_00)]
	clr.b	d2                               	| [$515f: ld   c,$00]
	move.b	(1,a2),d3    	| [$5161: ld   d,(ix+character_x_right_01)]
	jbsr	compute_delta_height_1e6c                            	| [$5164: call $1E6C]
	move.b	d5,d0                           	| [$5167: ld   a,h]
	                             	| [$5168: or   a]
	jne	l_519d                             	| [$5169: jp   nz,$519D]
	move.b	d6,d0                           	| [$516c: ld   a,l]
	sub.b	#0x08,d0                         	| [$516d: sub  $08]
	move.b	d0,d2                           	| [$516f: ld   c,a]
	LOAD_POINTER	ram_pointer_8336(a6),a0             	| [$5170: ld   hl,($8336)]
	clr.b	(a0)+                             	| [$5173: ld   (hl),$00]
	                           	| [$5175: inc  hl]
	move.b	#0xFB,d1                        	| [$5176: ld   b,$FB]
	move.b	(3,a2),d0   	| [$5178: ld   a,(ix+character_y_offset_03)]
	                             	| [$517b: or   a]
	jpl	l_5181                             	| [$517c: jp   p,$5181]
	move.b	#0xF5,d1                        	| [$517f: ld   b,$F5]
l_5181:
	move.b	(0x04,a2),d0                    	| [$5181: ld   a,(ix+$04)]
	add.b	d1,d0                            	| [$5184: add  a,b]
	move.b	d0,(a0)+                         	| [$5185: ld   (hl),a]
	                           	| [$5186: inc  hl]
	move.b	d2,(a0)+                         	| [$5187: ld   (hl),c]
	                           	| [$5188: inc  hl]

	move.l	a0,-(sp)                        	| [$5189: push hl]
	lea	l_80F4(a6),a0                      	| [$518a: ld   hl,$80F4]
	move.b	(0x07,a2),d0                    	| [$518d: ld   a,(ix+$07)]
	move.b	d0,d1                           	| [$5190: ld   b,a]
	add.b	d0,d0                            	| [$5191: add  a,a]
	add.b	d0,d0                            	| [$5192: add  a,a]
	add.b	d1,d0                            	| [$5193: add  a,b]
	add.b	d0,d0                            	| [$5194: add  a,a]
	moveq   #0,d3                               	| [$5196: ld   d,$00]
	move.b	d0,d3                           	| [$5195: ld   e,a]
	                            	| [$5198: add  hl,de]
	move.b	(a0,d3.w),d0                         	| [$5199: ld   a,(hl)]
	move.l	(sp)+,a0                        	| [$519a: pop  hl]
	move.b	d0,(a0)                         	| [$519b: ld   (hl),a]
	rts                                    	| [$519c: ret]

l_519d:
	move.b	#0xFF,(0x02,a2)                 	| [$519d: ld   (ix+$02),$FF]
	LOAD_POINTER	ram_pointer_8336(a6),a0             	| [$51a1: ld   hl,($8336)]
	move.b	#0xFF,(a0)                      	| [$51a4: ld   (hl),$FF]
	rts                                    	| [$51a6: ret]

* when???
enemy_unknown_state_51A7:
	jbsr	load_character_elevator_structure_62CE	| [$51a7: call load_character_elevator_structure_62CE]
	clr.b	d0                               	| [$51aa: xor  a]
	move.b	d0,(0x1a,a2)                    	| [$51ab: ld   (ix+$1a),a]
	move.b	d0,(0x17,a2)                    	| [$51ae: ld   (ix+$17),a]
	jbsr	should_enemy_shoot_0568                            	| [$51b1: call $0568]
	jcs	l_51f8                             	| [$51b4: jp   c,$51F8]
	move.b	player_structure_851A+current_floor_07(a6),d0	| [$51b7: ld   a,(player_structure_851A+current_floor_07)]
	cmp.b	#0x07,d0                         	| [$51ba: cp   $07]
	jcs	l_5205                             	| [$51bc: jr   c,$5205]
	move.b	(0x10,a2),d0                    	| [$51be: ld   a,(ix+$10)]
	                             	| [$51c1: or   a]
	jne	l_51d6                             	| [$51c2: jr   nz,$51D6]
	clr.b	(0x12,a2)                        	| [$51c4: ld   (ix+$12),$00]
l_51c8:
	move.b	#0x0A,(0x10,a2)                 	| [$51c8: ld   (ix+$10),$0A]
	move.b	(0x0e,a2),d0                    	| [$51cc: ld   a,(ix+$0e)]
	                             	| [$51cf: or   a]
	jeq	l_51d6                             	| [$51d0: jr   z,$51D6]
	move.b	#0x07,(0x10,a2)                 	| [$51d2: ld   (ix+$10),$07]
l_51d6:
	move.b	(0x18,a2),d0                    	| [$51d6: ld   a,(ix+$18)]
	                             	| [$51d9: or   a]
	jne	l_51e1                             	| [$51da: jr   nz,$51E1]
	jbsr	l_52a8                            	| [$51dc: call $52A8]
	jra	l_51f4                             	| [$51df: jr   $51F4]
l_51e1:
	jbsr	l_52ff                            	| [$51e1: call $52FF]
	move.b	(0x07,a2),d0                    	| [$51e4: ld   a,(ix+$07)]
	cmp.b	(0x18,a2),d0                     	| [$51e7: cp   (ix+$18)]
	jne	l_51f4                             	| [$51ea: jr   nz,$51F4]
	move.b	(a3),d0                    	| [$51ec: ld   a,(iy+$00)]
	cmp.b	#0x10,d0                         	| [$51ef: cp   $10]
	jcs	l_533b                             	| [$51f1: jp   c,$533B]
l_51f4:
	jbsr	l_003b                            	| [$51f4: call $003B]
	rts                                    	| [$51f7: ret]
l_51f8:
	clr.b	(0x18,a2)                        	| [$51f8: ld   (ix+$18),$00]
	move.b	#0x01,(0x0f,a2)                 	| [$51fc: ld   (ix+$0f),$01]
	clr.b	(0x10,a2)                        	| [$5200: ld   (ix+$10),$00]
	rts                                    	| [$5204: ret]
l_5205:
	jbsr	l_5324                            	| [$5205: call $5324]
	move.b	(0x10,a2),d0                    	| [$5208: ld   a,(ix+$10)]
	                             	| [$520b: or   a]
	jne	l_51f4                             	| [$520c: jp   nz,$51F4]
	move.b	player_structure_851A+current_floor_07(a6),d0	| [$520f: ld   a,(player_structure_851A+current_floor_07)]
	cmp.b	#0x07,d0                         	| [$5212: cp   $07]
	jcc	l_521f                             	| [$5214: jr   nc,$521F]
	move.b	l_8520(a6),d0                   	| [$5216: ld   a,($8520)]
	subq.b	#1,d0                           	| [$5219: dec  a]
	jeq	l_5235                             	| [$521a: jr   z,$5235]
	subq.b	#1,d0                           	| [$521c: dec  a]
	jeq	l_5235                             	| [$521d: jr   z,$5235]
l_521f:
	jbsr	l_527a                            	| [$521f: call $527A]
	move.b	player_structure_851A+current_floor_07(a6),d0	| [$5222: ld   a,(player_structure_851A+current_floor_07)]
	sub.b	(0x07,a2),d0                     	| [$5225: sub  (ix+$07)]
	clr.b	d0                               	| [$5228: ld   a,$00]
	roxl.b	#1,d0                           	| [$522a: rla]
	cmp.b	d1,d0                            	| [$522b: cp   b]
	jne	l_5235                             	| [$522c: jp   nz,$5235]
	jbsr	l_0529                            	| [$522f: call $0529]
	jra	l_51c8                             	| [$5232: jp   $51C8]
l_5235:
	move.b	player_structure_851A(a6),d0    	| [$5235: ld   a,(player_structure_851A)]
	move.b	d0,d1                           	| [$5238: ld   b,a]
	move.b	(character_x_00,a2),d0          	| [$5239: ld   a,(ix+character_x_00)]
	sub.b	d1,d0                            	| [$523c: sub  b]
	clr.b	d0                               	| [$523d: ld   a,$00]
	roxl.b	#1,d0                           	| [$523f: rla]
	move.b	d0,(0x0b,a2)                    	| [$5240: ld   (ix+$0b),a]
	move.b	#0x03,(0x12,a2)                 	| [$5243: ld   (ix+$12),$03]
	move.b	#0x0F,(0x10,a2)                 	| [$5247: ld   (ix+$10),$0F]
	jra	l_51f4                             	| [$524b: jp   $51F4]

* called when enemy is on top of elevator cabin, A.I there
enemy_above_elevator_524E:
	clr.b	(0x1a,a2)                        	| [$524e: ld   (ix+$1a),$00]
	jbsr	should_enemy_shoot_0568                            	| [$5252: call $0568]
	jcs	l_51f8                             	| [$5255: jp   c,$51F8]
	move.b	(0x11,a2),d0                    	| [$5258: ld   a,(ix+$11)]
	                             	| [$525b: or   a]
	jne	l_5267                             	| [$525c: jr   nz,$5267]
	move.b	(0x10,a2),d0                    	| [$525e: ld   a,(ix+$10)]
	                             	| [$5261: or   a]
	jeq	l_5267                             	| [$5262: jr   z,$5267]
	jra	l_51f4                             	| [$5264: jp   $51F4]
l_5267:
	move.b	(0x0b,a2),d0                    	| [$5267: ld   a,(ix+$0b)]
	eor.b	#0x01,d0                         	| [$526a: xor  $01]
	move.b	d0,(0x0b,a2)                    	| [$526c: ld   (ix+$0b),a]
	move.b	#0x05,(0x10,a2)                 	| [$526f: ld   (ix+$10),$05]
	move.b	#0x03,(0x12,a2)                 	| [$5273: ld   (ix+$12),$03]
	jra	l_51f4                             	| [$5277: jp   $51F4]
l_527a:
	move.b	#0x01,d1                        	| [$527a: ld   b,$01]
	move.b	(0x01,a3),d0                    	| [$527c: ld   a,(iy+$01)]
	cmp.b	(0x02,a3),d0                     	| [$527f: cp   (iy+$02)]
	bne.b	0f                               	| [...]
	rts                                    	| [$5282: ret  z] [...]
0:
	moveq	#0,d1                               	| [$5283: ld   b,$00]
	sub.b	(0x06,a3),d0                     	| [$5285: sub  (iy+$06)]
	sub.b	(0x06,a3),d0                     	| [$5288: sub  (iy+$06)]
	cmp.b	(0x03,a3),d0                     	| [$528b: cp   (iy+$03)]
	jne	l_5295                             	| [$528e: jr   nz,$5295]
	move.b	(a3),d0                    	| [$5290: ld   a,(iy+$00)]
	                             	| [$5293: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$5294: ret  z] [...]
0:
l_5295:
	lea	elevator_directions_array_8081(a6),a0	| [$5295: ld   hl,elevator_directions_array_8081]
	move.b	(0x08,a2),d0                    	| [$5298: ld   a,(ix+$08)]
	and.b	#0x7F,d0                         	| [$529b: and  $7F]
	add.b	d0,d0                            	| [$529d: add  a,a]
	moveq   #0,d3                               	| [$529f: ld   d,$00]
	move.b	d0,d3                           	| [$529e: ld   e,a]
	add.w	d3,a0                            	| [$52a1: add  hl,de]
	move.b	(a0),d0                         	| [$52a2: ld   a,(hl)]
	                             	| [$52a3: or   a]
	bmi.b	0f                               	| [...]
	rts                                    	| [$52a4: ret  p] [...]
0:
	move.b	#0x01,d1                        	| [$52a5: ld   b,$01]
	rts                                    	| [$52a7: ret]
l_52a8:
	move.b	current_enemy_index_85BA(a6),d0 	| [$52a8: ld   a,(current_enemy_index_85BA)]
	addq.b	#0x03,d0                        	| [$52ab: add  a,$03]
	move.b	d0,(0x10,a2)                    	| [$52ad: ld   (ix+$10),a]
	jbsr	l_52b4                            	| [$52b0: call $52B4]
	rts                                    	| [$52b3: ret]
l_52b4:
	move.b	player_structure_851A+current_floor_07(a6),d0	| [$52b4: ld   a,(player_structure_851A+current_floor_07)]
	move.b	d0,d1                           	| [$52b7: ld   b,a]
	move.b	(0x08,a2),d0                    	| [$52b8: ld   a,(ix+$08)]
	and.b	#0x7F,d0                         	| [$52bb: and  $7F]
	cmp.b	#0x0A,d0                         	| [$52bd: cp   $0A]
	jeq	l_52e4                             	| [$52bf: jp   z,$52E4]
l_52c2:
	move.b	(0x08,a2),d0                    	| [$52c2: ld   a,(ix+$08)]
	and.b	#0x80,d0                         	| [$52c5: and  $80]
	rol.b	#2,d0                            	| [$52c7: rlca] * 2
	move.b	d0,d3                           	| [$52c9: ld   d,a]
	move.b	(0x02,a3),d0                    	| [$52ca: ld   a,(iy+$02)]
	sub.b	d3,d0                            	| [$52cd: sub  d]
	move.b	d0,d4                           	| [$52ce: ld   e,a]
	cmp.b	d1,d0                            	| [$52cf: cp   b]
	jcs	l_52df                             	| [$52d0: jr   c,$52DF]
	move.b	(0x06,a3),d0                    	| [$52d2: ld   a,(iy+$06)]
	add.b	d0,d0                            	| [$52d5: add  a,a]
	add.b	(0x03,a3),d0                     	| [$52d6: add  a,(iy+$03)]
	sub.b	d3,d0                            	| [$52d9: sub  d]
	move.b	d0,d4                           	| [$52da: ld   e,a]
	move.b	d1,d0                           	| [$52db: ld   a,b]
	cmp.b	d4,d0                            	| [$52dc: cp   e]
	jcc	l_52e0                             	| [$52dd: jr   nc,$52E0]
l_52df:
	move.b	d4,d1                           	| [$52df: ld   b,e]
l_52e0:
	move.b	d1,(0x18,a2)                    	| [$52e0: ld   (ix+$18),b]
	rts                                    	| [$52e3: ret]
l_52e4:
	move.b	d1,d0                           	| [$52e4: ld   a,b]
	cmp.b	#0x1E,d0                         	| [$52e5: cp   $1E]
	jcc	l_52fa                             	| [$52e7: jr   nc,$52FA]
	cmp.b	#0x14,d0                         	| [$52e9: cp   $14]
	jne	l_52c2                             	| [$52eb: jr   nz,$52C2]
	move.b	player_structure_851A(a6),d0    	| [$52ed: ld   a,(player_structure_851A)]
	cmp.b	#0xAC,d0                         	| [$52f0: cp   $AC]
	jcs	l_52c2                             	| [$52f2: jr   c,$52C2]
	move.b	#0x13,d1                        	| [$52f4: ld   b,$13]
	moveq   #0,d3                               	| [$52f6: ld   d,$00]
	jra	l_52e0                             	| [$52f8: jr   $52E0]
l_52fa:
	move.b	#0x1E,(0x18,a2)                 	| [$52fa: ld   (ix+$18),$1E]
	rts                                    	| [$52fe: ret]
l_52ff:
	moveq	#0,d1                               	| [$52ff: ld   b,$00]
	move.b	(0x08,a2),d0                    	| [$5301: ld   a,(ix+$08)]
	rol.b	#2,d0                            	| [$5304: rlca] * 2
	and.b	#0x02,d0                         	| [$5306: and  $02]
	move.b	d0,d2                           	| [$5308: ld   c,a]
	move.b	(0x01,a3),d0                    	| [$5309: ld   a,(iy+$01)]
	sub.b	d2,d0                            	| [$530c: sub  c]
	cmp.b	(0x18,a2),d0                     	| [$530d: cp   (ix+$18)]
	jeq	l_5318                             	| [$5310: jr   z,$5318]
	move.b	#0x01,d1                        	| [$5312: ld   b,$01]
	cmp.b	(0x18,a2),d0                     	| [$530d: cp   (ix+$18)]
	jcs	l_5320                             	| [$5314: jr   c,$5320]
	jra	l_531e                             	| [$5316: jr   $531E]
l_5318:
	move.b	(a3),d0                    	| [$5318: ld   a,(iy+$00)]
	                             	| [$531b: or   a]
	jeq	l_5320                             	| [$531c: jr   z,$5320]
l_531e:
	st.b	d1                                	| [$531e: ld   b,$FF]
l_5320:
	move.b	d1,(0x17,a2)                    	| [$5320: ld   (ix+$17),b]
	rts                                    	| [$5323: ret]
l_5324:
	move.b	(0x18,a2),d0                    	| [$5324: ld   a,(ix+$18)]
	                             	| [$5327: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$5328: ret  nz] [...]
0:
	move.b	current_enemy_index_85BA(a6),d0 	| [$5329: ld   a,(current_enemy_index_85BA)]
	addq.b	#0x03,d0                        	| [$532c: add  a,$03]
	move.b	d0,(0x10,a2)                    	| [$532e: ld   (ix+$10),a]
	move.b	(0x09,a2),d0                    	| [$5331: ld   a,(ix+$09)]
	                             	| [$5334: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$5335: ret  nz] [...]
0:
	move.b	#0x28,(0x18,a2)                 	| [$5336: ld   (ix+$18),$28]
	rts                                    	| [$533a: ret]
l_533b:
	move.b	(0x18,a2),d0                    	| [$533b: ld   a,(ix+$18)]
	cmp.b	#0x13,d0                         	| [$533e: cp   $13]
	jeq	l_5359                             	| [$5340: jr   z,$5359]
	cmp.b	#0x11,d0                         	| [$5342: cp   $11]
	jeq	l_536d                             	| [$5344: jr   z,$536D]
l_5346:
	move.b	current_enemy_index_85BA(a6),d0 	| [$5346: ld   a,(current_enemy_index_85BA)]
	and.b	#0x01,d0                         	| [$5349: and  $01]
	jne	l_5353                             	| [$534b: jr   nz,$5353]
	jbsr	l_538b                            	| [$534d: call $538B]
	jra	l_51f4                             	| [$5350: jp   $51F4]
l_5353:
	jbsr	l_53ba                            	| [$5353: call $53BA]
	jra	l_51f4                             	| [$5356: jp   $51F4]
l_5359:
	move.b	player_structure_851A+current_floor_07(a6),d0	| [$5359: ld   a,(player_structure_851A+current_floor_07)]
	cmp.b	#0x14,d0                         	| [$535c: cp   $14]
	jne	l_5370                             	| [$535e: jr   nz,$5370]
	move.b	player_structure_851A(a6),d0    	| [$5360: ld   a,(player_structure_851A)]
	cmp.b	#0xAC,d0                         	| [$5363: cp   $AC]
	jcs	l_5346                             	| [$5365: jr   c,$5346]
	move.b	#0x01,(0x0b,a2)                 	| [$5367: ld   (ix+$0b),$01]
	jra	l_5380                             	| [$536b: jr   $5380]
l_536d:
	move.b	player_structure_851A+current_floor_07(a6),d0	| [$536d: ld   a,(player_structure_851A+current_floor_07)]
l_5370:
	cmp.b	#0x12,d0                         	| [$5370: cp   $12]
	jne	l_5346                             	| [$5372: jr   nz,$5346]
	move.b	player_structure_851A(a6),d0    	| [$5374: ld   a,(player_structure_851A)]
	sub.b	#0x7D,d0                         	| [$5377: sub  $7D]
	INVERT_XC_FLAGS                        	| [$5379: ccf]
	roxl.b	#1,d0                           	| [$537a: rla]
	and.b	#0x01,d0                         	| [$537b: and  $01]
	move.b	d0,(0x0b,a2)                    	| [$537d: ld   (ix+$0b),a]
l_5380:
	move.b	#0x03,(0x12,a2)                 	| [$5380: ld   (ix+$12),$03]
	move.b	#0x14,(0x10,a2)                 	| [$5384: ld   (ix+$10),$14]
	jra	l_51f4                             	| [$5388: jp   $51F4]
l_538b:
	clr.b	(0x0b,a2)                        	| [$538b: ld   (ix+$0b),$00]
	move.b	(0x08,a2),d0                    	| [$538f: ld   a,(ix+$08)]
	and.b	#0x7F,d0                         	| [$5392: and  $7F]
	cmp.b	#0x02,d0                         	| [$5394: cp   $02]
	jcs	l_53b4                             	| [$5396: jr   c,$53B4]
	cmp.b	#0x07,d0                         	| [$5398: cp   $07]
	jeq	l_53b4                             	| [$539a: jr   z,$53B4]
	cmp.b	#0x08,d0                         	| [$539c: cp   $08]
	jne	l_53a9                             	| [$539e: jr   nz,$53A9]
	move.b	(0x07,a2),d0                    	| [$53a0: ld   a,(ix+$07)]
	cmp.b	#0x0C,d0                         	| [$53a3: cp   $0C]
	jeq	l_53b4                             	| [$53a5: jr   z,$53B4]
	jra	l_53ed                             	| [$53a7: jr   $53ED]
l_53a9:
	cmp.b	#0x09,d0                         	| [$53a9: cp   $09]
	jne	l_53ed                             	| [$53ab: jr   nz,$53ED]
	move.b	(0x07,a2),d0                    	| [$53ad: ld   a,(ix+$07)]
	cmp.b	#0x10,d0                         	| [$53b0: cp   $10]
	jne	l_53ed                             	| [$53b2: jr   nz,$53ED]
l_53b4:
	move.b	#0x01,(0x0b,a2)                 	| [$53b4: ld   (ix+$0b),$01]
	jra	l_53ed                             	| [$53b8: jr   $53ED]
l_53ba:
	move.b	#0x01,(0x0b,a2)                 	| [$53ba: ld   (ix+$0b),$01]
	move.b	(0x08,a2),d0                    	| [$53be: ld   a,(ix+$08)]
	and.b	#0x7F,d0                         	| [$53c1: and  $7F]
	cmp.b	#0x02,d0                         	| [$53c3: cp   $02]
	jeq	l_53e9                             	| [$53c5: jr   z,$53E9]
	cmp.b	#0x06,d0                         	| [$53c7: cp   $06]
	jeq	l_53e9                             	| [$53c9: jr   z,$53E9]
	cmp.b	#0x09,d0                         	| [$53cb: cp   $09]
	jne	l_53d8                             	| [$53cd: jr   nz,$53D8]
	move.b	(0x07,a2),d0                    	| [$53cf: ld   a,(ix+$07)]
	cmp.b	#0x0F,d0                         	| [$53d2: cp   $0F]
	jeq	l_53e9                             	| [$53d4: jr   z,$53E9]
	jra	l_53ed                             	| [$53d6: jr   $53ED]
l_53d8:
	cmp.b	#0x0A,d0                         	| [$53d8: cp   $0A]
	jne	l_53ed                             	| [$53da: jr   nz,$53ED]
	move.b	(0x07,a2),d0                    	| [$53dc: ld   a,(ix+$07)]
	cmp.b	#0x14,d0                         	| [$53df: cp   $14]
	jeq	l_53e9                             	| [$53e1: jp   z,$53E9]
	cmp.b	#0x1F,d0                         	| [$53e4: cp   $1F]
	jne	l_53ed                             	| [$53e6: jp   nz,$53ED]
l_53e9:
	clr.b	(0x0b,a2)                        	| [$53e9: ld   (ix+$0b),$00]
l_53ed:
	move.b	#0x03,(0x12,a2)                 	| [$53ed: ld   (ix+$12),$03]
	move.b	#0x1E,(0x10,a2)                 	| [$53f1: ld   (ix+$10),$1E]
	rts                                    	| [$53f5: ret]

* most of enemy A.I. is probably there
enemy_walk_state_53F6:
	clr.b	d0                               	| [$53f6: xor  a]
	move.b	d0,(0x1b,a2)                    	| [$53f7: ld   (ix+$1b),a]
	move.b	d0,(0x18,a2)                    	| [$53fa: ld   (ix+$18),a]
	jbsr	should_enemy_shoot_0568             | [$53fd: call $0568]
	jcs	enemy_decided_to_shoot_5436             | [$5400: jp   c,$5436]
	move.b	(0x1a,a2),d0                    	| [$5403: ld   a,(ix+$1a)]
	                             	| [$5406: or   a]
	bne.b	0f                               	| [...]
	jbsr	l_5b33                            	| [$5407: call z,$5B33]
0:
	move.b	(associated_elevator_08,a2),d0                    	| [$540a: ld   a,(ix+$08)]
	addq.b	#1,d0                           	| [$540d: inc  a]
	jne	l_545e                             	| [$540e: jp   nz,$545E]
	move.b	(character_x_00,a2),d0          	| [$5411: ld   a,(ix+character_x_00)]
	sub.b	(0x1a,a2),d0                     	| [$5414: sub  (ix+$1a)]
	addq.b	#0x02,d0                        	| [$5417: add  a,$02]
	cmp.b	#0x05,d0                         	| [$5419: cp   $05]
	jcs	l_5443                             	| [$541b: jp   c,$5443]
	move.b	(0x11,a2),d0                    	| [$541e: ld   a,(ix+$11)]
	addq.b	#1,d0                           	| [$5421: inc  a]
	cmp.b	#0x02,d0                         	| [$5422: cp   $02]
	jcc	l_55d7                             	| [$5424: jp   nc,$55D7]
	move.b	(0x10,a2),d0                    	| [$5427: ld   a,(ix+$10)]
	                             	| [$542a: or   a]
	bne.b	0f                               	| [...]
	jbsr	l_55ef                            	| [$542b: call z,$55EF]
0:
l_542e:
	move.b	#0xFF,(0x08,a2)                 	| [$542e: ld   (ix+$08),$FF]
	jbsr	l_003b                            	| [$5432: call $003B]
	rts                                    	| [$5435: ret]
enemy_decided_to_shoot_5436:
	move.b	#0x01,(0x0f,a2)                 	| [$5436: ld   (ix+$0f),$01]
	clr.b	(0x10,a2)                        	| [$543a: ld   (ix+$10),$00]
	clr.b	(0x1a,a2)                        	| [$543e: ld   (ix+$1a),$00]
	rts                                    	| [$5442: ret]
l_5443:
	move.b	(0x1c,a2),d0                    	| [$5443: ld   a,(ix+$1c)]
	sub.b	#0x0B,d0                         	| [$5446: sub  $0B]
	jeq	l_5519                             	| [$5448: jp   z,$5519]
	subq.b	#1,d0                           	| [$544b: dec  a]
	jeq	l_55b0                             	| [$544c: jp   z,$55B0]
	clr.b	(0x12,a2)                        	| [$544f: ld   (ix+$12),$00]
	move.b	#0x07,(0x10,a2)                 	| [$5453: ld   (ix+$10),$07]
	clr.b	(0x1a,a2)                        	| [$5457: ld   (ix+$1a),$00]
	jra	l_542e                             	| [$545b: jp   $542E]
l_545e:
	jbsr	l_5464                            	| [$545e: call $5464]
	jra	l_542e                             	| [$5461: jp   $542E]
l_5464:
	jbsr	load_character_elevator_structure_62CE	| [$5464: call load_character_elevator_structure_62CE]
	move.b	(0x11,a2),d0                    	| [$5467: ld   a,(ix+$11)]
	addq.b	#1,d0                           	| [$546a: inc  a]
	cmp.b	#0x02,d0                         	| [$546b: cp   $02]
	jcc	l_54a9                             	| [$546d: jp   nc,$54A9]
	move.b	(0x1c,a2),d0                    	| [$5470: ld   a,(ix+$1c)]
	cmp.b	#0x0B,d0                         	| [$5473: cp   $0B]
	jcc	l_5485                             	| [$5475: jr   nc,$5485]
	move.b	(0x1a,a2),d0                    	| [$5477: ld   a,(ix+$1a)]
	sub.b	(character_x_00,a2),d0           	| [$547a: sub  (ix+character_x_00)]
	jcc	l_5481                             	| [$547d: jr   nc,$5481]
	neg.b	d0                               	| [$547f: neg]
l_5481:
	cmp.b	#0x11,d0                         	| [$5481: cp   $11]
	jcs	l_54b0                             	| [$5483: jr   c,$54B0]
l_5485:
	move.b	(0x07,a3),d0                    	| [$5485: ld   a,(iy+$07)]
	sub.b	(0x06,a3),d0                     	| [$5488: sub  (iy+$06)]
	sub.b	(0x06,a3),d0                     	| [$548b: sub  (iy+$06)]
	cmp.b	(0x07,a2),d0                     	| [$548e: cp   (ix+$07)]
	beq.b	0f                               	| [...]
	rts                                    	| [$5491: ret  nz] [...]
0:
	move.b	(0x08,a2),d0                    	| [$5492: ld   a,(ix+$08)]
	add.b	d0,d0                            	| [$5495: add  a,a]
	moveq   #0,d3                               	| [$5497: ld   d,$00]
	move.b	d0,d3                           	| [$5496: ld   e,a]
	lea	elevator_directions_array_8081(a6),a0	| [$5499: ld   hl,elevator_directions_array_8081]
	add.w	d3,a0                            	| [$549c: add  hl,de]
	move.b	(a0),d0                         	| [$549d: ld   a,(hl)]
												| [$549e: or   a]
	bmi.b	0f                               	| [...]
	rts                                    	| [$549f: ret  p] [...]
0:
	move.b	#0x03,(0x12,a2)                 	| [$54a0: ld   (ix+$12),$03]
	move.b	#0x01,(0x10,a2)                 	| [$54a4: ld   (ix+$10),$01]
	rts                                    	| [$54a8: ret]
l_54a9:
	move.b	(0x03,a3),d0                    	| [$54a9: ld   a,(iy+$03)]
	cmp.b	(0x07,a2),d0                     	| [$54ac: cp   (ix+$07)]
	bne.b	0f                               	| [...]
	rts                                    	| [$54af: ret  z] [...]
0:
l_54b0:
	move.b	(0x06,a3),d0                    	| [$54b0: ld   a,(iy+$06)]
	                             	| [$54b3: or   a]
	jeq	l_54eb                             	| [$54b4: jr   z,$54EB]
	move.b	(0x1e,a2),d0                    	| [$54b6: ld   a,(ix+$1e)]
	                             	| [$54b9: or   a]
	jeq	l_54cd                             	| [$54ba: jr   z,$54CD]
	move.b	(0x07,a2),d0                    	| [$54bc: ld   a,(ix+$07)]
	sub.b	(0x03,a3),d0                     	| [$54bf: sub  (iy+$03)]
	cmp.b	#0x03,d0                         	| [$54c2: cp   $03]
	jcc	l_54d7                             	| [$54c4: jr   nc,$54D7]
	move.b	(0x01,a3),d1                    	| [$54c6: ld   b,(iy+$01)]
	subq.b	#2,d1                           	| [$54c9: dec  b] * 2
	jra	l_54ee                             	| [$54cb: jr   $54EE]
l_54cd:
	move.b	(0x02,a3),d0                    	| [$54cd: ld   a,(iy+$02)]
	sub.b	(0x07,a2),d0                     	| [$54d0: sub  (ix+$07)]
	cmp.b	#0x03,d0                         	| [$54d3: cp   $03]
	jcs	l_54eb                             	| [$54d5: jr   c,$54EB]
l_54d7:
	move.b	(0x07,a2),d0                    	| [$54d7: ld   a,(ix+$07)]
	sub.b	(0x01,a3),d0                     	| [$54da: sub  (iy+$01)]
	jeq	l_5510                             	| [$54dd: jr   z,$5510]
	subq.b	#1,d0                           	| [$54df: dec  a]
	jeq	l_5510                             	| [$54e0: jr   z,$5510]
	addq.b	#0x03,d0                        	| [$54e2: add  a,$03]
	jeq	l_5510                             	| [$54e4: jr   z,$5510]
	subq.b	#1,d0                           	| [$54e6: dec  a]
	jeq	l_5510                             	| [$54e7: jr   z,$5510]
	jra	l_54f7                             	| [$54e9: jr   $54F7]
l_54eb:
	move.b	(0x01,a3),d1                    	| [$54eb: ld   b,(iy+$01)]
l_54ee:
	move.b	(0x07,a2),d0                    	| [$54ee: ld   a,(ix+$07)]
	sub.b	d1,d0                            	| [$54f1: sub  b]
	jeq	l_5510                             	| [$54f2: jr   z,$5510]
	subq.b	#1,d0                           	| [$54f4: dec  a]
	jeq	l_5510                             	| [$54f5: jr   z,$5510]
l_54f7:
	move.b	#0x0D,(0x1c,a2)                 	| [$54f7: ld   (ix+$1c),$0D]
	jbsr	pseudo_random_with_regsave_1DF5                	| [$54fb: call pseudo_random_with_regsave_1DF5]
	and.b	#0x0F,d0                         	| [$54fe: and  $0F]
	                           	| [$5500: ld   b,a]
	tst.b	(0x0b,a2)                    	| [$5501: ld   a,(ix+$0b)]
	                             	| [$5504: or   a]
	                           	| [$5505: ld   a,b]
	jeq	l_550a                             	| [$5506: jr   z,$550A]
	neg.b	d0                               	| [$5508: neg]
l_550a:
	add.b	(character_x_00,a2),d0           	| [$550a: add  a,(ix+character_x_00)]
	move.b	d0,(0x1a,a2)                    	| [$550d: ld   (ix+$1a),a]
l_5510:
	clr.b	(0x12,a2)                        	| [$5510: ld   (ix+$12),$00]
	move.b	#0x05,(0x10,a2)                 	| [$5514: ld   (ix+$10),$05]
	rts                                    	| [$5518: ret]
l_5519:
	move.b	(0x1a,a2),d0                    	| [$5519: ld   a,(ix+$1a)]
	cmp.b	#0x09,d0                         	| [$551c: cp   $09]
	jeq	l_554f                             	| [$551e: jr   z,$554F]
	cmp.b	#0x2F,d0                         	| [$5520: cp   $2F]
	jeq	l_552f                             	| [$5522: jr   z,$552F]
	cmp.b	#0xC2,d0                         	| [$5524: cp   $C2]
	jeq	l_552f                             	| [$5526: jr   z,$552F]
	cmp.b	#0xE7,d0                         	| [$5528: cp   $E7]
	jeq	l_554f                             	| [$552a: jr   z,$554F]
	jra	l_542e                             	| [$552c: jp   $542E]
l_552f:
	LOAD_POINTER	ram_pointer_85BD(a6),a0             	| [$552f: ld   hl,($85BD)]
	move.b	(a0),d0                         	| [$5532: ld   a,(hl)]
	addq.b	#1,d0                           	| [$5533: inc  a]
	jne	l_556f                             	| [$5534: jr   nz,$556F]
	jbsr	l_557a                            	| [$5536: call $557A]
	jeq	l_5593                             	| [$5539: jp   z,$5593]
	clr.b	(0x12,a2)                        	| [$553c: ld   (ix+$12),$00]
	move.b	#0x01,(0x10,a2)                 	| [$5540: ld   (ix+$10),$01]
	move.b	#0x02,(0x09,a2)                 	| [$5544: ld   (ix+$09),$02]
	move.b	#0x01,(0x1b,a2)                 	| [$5548: ld   (ix+$1b),$01]
	jra	l_542e                             	| [$554c: jp   $542E]
l_554f:
	LOAD_POINTER	ram_pointer_85BD(a6),a0             	| [$554f: ld   hl,($85BD)]
	move.b	(a0),d0                         	| [$5552: ld   a,(hl)]
	addq.b	#1,d0                           	| [$5553: inc  a]
	jne	l_556f                             	| [$5554: jr   nz,$556F]
	jbsr	l_557a                            	| [$5556: call $557A]
	jeq	l_5593                             	| [$5559: jp   z,$5593]
	move.b	#0x01,(0x12,a2)                 	| [$555c: ld   (ix+$12),$01]
	move.b	#0x01,(0x10,a2)                 	| [$5560: ld   (ix+$10),$01]
	clr.b	(0x09,a2)                        	| [$5564: ld   (ix+$09),$00]
	move.b	#0x01,(0x1b,a2)                 	| [$5568: ld   (ix+$1b),$01]
	jra	l_542e                             	| [$556c: jp   $542E]
l_556f:
	clr.b	(0x12,a2)                        	| [$556f: ld   (ix+$12),$00]
	move.b	#0x01,(0x10,a2)                 	| [$5573: ld   (ix+$10),$01]
	jra	l_542e                             	| [$5577: jp   $542E]

l_557a:
	move.b	l_8520(a6),d0                   	| [$557a: ld   a,($8520)]
	cmp.b	#0x04,d0                         	| [$557d: cp   $04]
	beq.b	0f                               	| [...]
	rts                                    	| [$557f: ret  nz] [...]
0:
	move.b	player_structure_851A+current_floor_07(a6),d0	| [$5580: ld   a,(player_structure_851A+current_floor_07)]
	sub.b	(0x07,a2),d0                     	| [$5583: sub  (ix+$07)]
	jeq	l_558a                             	| [$5586: jr   z,$558A]
	addq.b	#1,d0                           	| [$5588: inc  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$5589: ret  nz] [...]
0:
l_558a:
	move.b	player_structure_851A(a6),d0    	| [$558a: ld   a,(player_structure_851A)]
	move.b	(character_x_00,a2),d7
	eor.b	d7,d0                            	| [$558d: xor  (ix+character_x_00)]
	and.b	#0x80,d0                         	| [$5590: and  $80]
	rts                                    	| [$5592: ret]
l_5593:
	                             	| [$5596: or   a]
	move.b	#0x0A,d0                        	| [$5597: ld   a,$0A]
	tst.b	(0x0b,a2)                    	| [$5593: ld   a,(ix+$0b)]
	jne	l_559d                             	| [$5599: jr   nz,$559D]
	move.b	#0xF6,d0                        	| [$559b: ld   a,$F6]
l_559d:
	add.b	(character_x_00,a2),d0           	| [$559d: add  a,(ix+character_x_00)]
	move.b	d0,(0x1a,a2)                    	| [$55a0: ld   (ix+$1a),a]
	move.b	#0x03,(0x12,a2)                 	| [$55a3: ld   (ix+$12),$03]
	move.b	#0x07,(0x10,a2)                 	| [$55a7: ld   (ix+$10),$07]
	move.b	#0x0D,(0x1c,a2)                 	| [$55ab: ld   (ix+$1c),$0D]
	rts                                    	| [$55af: ret]

l_55b0:
	move.b	(0x16,a2),d0                    	| [$55b0: ld   a,(ix+$16)]
	cmp.b	#0xCF,d0                         	| [$55b3: cp   $CF]
	jcc	l_55ca                             	| [$55b5: jr   nc,$55CA]
	clr.b	(0x0a,a2)                        	| [$55b7: ld   (ix+$0a),$00]
	clr.b	(0x04,a2)                        	| [$55bb: ld   (ix+$04),$00]
	move.b	#CS_IN_ROOM_05,(character_situation_06,a2)	| [$55bf: ld   (ix+character_situation_06),CS_IN_ROOM_05]
	move.b	(0x1d,a2),d0                    	| [$55c3: ld   a,(ix+$1d)]
	move.b	d0,(0x08,a2)                    	| [$55c6: ld   (ix+$08),a]
	rts                                    	| [$55c9: ret]

l_55ca:
	move.b	#0x0A,(0x10,a2)                 	| [$55ca: ld   (ix+$10),$0A]
	clr.b	(0x12,a2)                        	| [$55ce: ld   (ix+$12),$00]
	clr.b	(0x1a,a2)                        	| [$55d2: ld   (ix+$1a),$00]
	rts                                    	| [$55d6: ret]

l_55d7:
	clr.b	(0x1a,a2)                        	| [$55d7: ld   (ix+$1a),$00]
	move.b	#0x0A,d1                        	| [$55db: ld   b,$0A]
	move.b	(0x0e,a2),d0                    	| [$55dd: ld   a,(ix+$0e)]
	                             	| [$55e0: or   a]
	jeq	l_55e5                             	| [$55e1: jr   z,$55E5]
	move.b	#0x07,d1                        	| [$55e3: ld   b,$07]
l_55e5:
	move.b	d1,(0x10,a2)                    	| [$55e5: ld   (ix+$10),b]
	clr.b	(0x12,a2)                        	| [$55e8: ld   (ix+$12),$00]
	jra	l_542e                             	| [$55ec: jp   $542E]

l_55ef:
	jbsr	l_04e6                            	| [$55ef: call $04E6]
	move.b	(0x12,a2),d0                    	| [$55f2: ld   a,(ix+$12)]
	cmp.b	#0x03,d0                         	| [$55f5: cp   $03]
	beq.b	0f                               	| [...]
	rts                                    	| [$55f7: ret  nz] [...]
0:
	move.b	(character_x_00,a2),d0          	| [$55f8: ld   a,(ix+character_x_00)]
	sub.b	(0x1a,a2),d0                     	| [$55fb: sub  (ix+$1a)]
	clr.b	d0                               	| [$55fe: ld   a,$00]
	roxl.b	#1,d0                           	| [$5600: rla]
 	move.b	d0,(0x0b,a2)                    	| [$5601: ld   (ix+$0b),a]
	rts                                    	| [$5604: ret]

* > D1
* < D5.W
l_5605:
	lea	table_563F(pc),a0                          	| [$5605: ld   hl,$563F]
	moveq   #0,d3                               	| [$5608: ld   d,$00]
	move.b	d1,d3                           	| [$560a: ld   e,b]
	add.w	d3,a0                            	| [$560b: add  hl,de]
	add.w	d3,a0                            	| [$560c: add  hl,de]
	move.b	(a0)+,d4                         	| [$560d: ld   e,(hl)]
	                           	| [$560e: inc  hl]
	move.b	(a0),d3                         	| [$560f: ld   d,(hl)]
	LOAD_D3_16_FROM_D3D4
	move.b	d1,d0                           	| [$5610: ld   a,b]
	cmp.b	#0x07,d0                         	| [$5611: cp   $07]
	jcs	l_5623                             	| [$5613: jr   c,$5623]
	move.w #0xFF84,d5                          	| [$5615: ld   hl,$FF84]
	add.w	d3,d5                            	| [$5618: add  hl,de]
 	                           	| [$5619: ld   a,h]
	and.w	#0x03FF,d5                         	| [$561a: and  $03]
	                           	| [$561c: ld   h,a]
	move.b	d2,d0                           	| [$561d: ld   a,c]
	add.b	d2,d0                            	| [$561e: add  a,c]
	add.b	d2,d0                            	| [$561f: add  a,c]
	add.b	d5,d0                            	| [$5620: add  a,l]
	move.b	d0,d5                           	| [$5621: ld   l,a]
	rts                                    	| [$5622: ret]
l_5623:
	move.b	d2,d0                           	| [$5623: ld   a,c]
	move.w  #0xFF83,d5                          	| [$5624: ld   hl,$FF83]
	tst.b	d0                             	| [$5627: or   a]
	jeq	l_562d                             	| [$5628: jr   z,$562D]
	move.w 	#0xFF9A,d5                          	| [$562a: ld   hl,$FF9A]
l_562d:
	add.w	d3,d5                            	| [$562d: add  hl,de]
											| [$562e: ld   a,h]
	and.w	#0x03FF,d5                         	| [$562f: and  $03]
											| [$5631: ld   h,a]
	rts                                    	| [$5632: ret]
	
* < D3.W
l_5633:
	add.b	d0,d0                            	| [$5633: add  a,a]
	moveq   #0,d3                               	| [$5635: ld   d,$00]
	move.b	d0,d3                           	| [$5634: ld   e,a]
	lea	table_563F(pc),a0                      	| [$5637: ld   hl,table_563F]
	add.w	d3,a0                            	| [$563a: add  hl,de]
	move.b	(a0)+,d4                         	| [$563b: ld   e,(hl)]
												| [$563C: inc  hl]
	move.b	(a0),d3                         	| [$563d: ld   d,(hl)]
	LOAD_D3_16_FROM_D3D4
	rts                                    	| [$563e: ret]

table_563F:
	.byte	0x80
	.byte	0x01,0xC0,0x00
	.byte	0x00
	.byte	0x00
	.byte	0x40
	.byte	0x03
	.byte	0x80
	.byte	0x02
	.byte	0xC0
	.byte	0x01,0x00,0x01
	.byte	0x40
	.byte	0x00
	.byte	0x80
	.byte	0x03
	.byte	0xC0
	.byte	0x02
	.byte	0x00
	.byte	0x02
	.byte	0x40
	.byte	0x01,0x80,0x00
	.byte	0xC0
	.byte	0x03
	.byte	0x00
	.byte	0x03
	.byte	0x40
	.byte	0x02
	.byte	0x80
	.byte	0x01,0xC0,0x00
	.byte	0x00
	.byte	0x00
	.byte	0x40
	.byte	0x03
	.byte	0x80
	.byte	0x02
	.byte	0xC0
	.byte	0x01,0x00,0x01
	.byte	0x40
	.byte	0x00
	.byte	0x80
	.byte	0x03
	.byte	0xC0
	.byte	0x02
	.byte	0x00
	.byte	0x02
	.byte	0x40
	.byte	0x01,0x80,0x00
	.byte	0xC0
	.byte	0x03
	.byte	0x00
	.byte	0x03
	.byte	0x40
	.byte	0x02
	.align	2

* seems unreached
	lea	current_player_score_834D(a6),a0                      	| [$567f: ld   hl,$834D]
	move.b	#0x03,d1                        	| [$5682: ld   b,$03]
l_5684:
	clr.b	(a0)+                             	| [$5684: ld   (hl),$00]
	                           	| [$5686: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_5684                             	| [$5687: djnz $5684]
	lea	l_8254(a6),a0                      	| [$5689: ld   hl,$8254]
	move.b	#0x03,d1                        	| [$568c: ld   b,$03]
l_568e:
	clr.b	(a0)+                             	| [$568e: ld   (hl),$00]
	                           	| [$5690: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_568e                             	| [$5691: djnz $568E]
	rts                                    	| [$5693: ret]

l_5694:
	movem.w	d1/d2,-(sp)                    	| [$5694: push bc]
	move.l	a4,-(sp)                        	| [$5694: push bc]
	movem.w	d3/d4,-(sp)                    	| [$5695: push de]
	move.l	a1,-(sp)                        	| [$5695: push de]

	move.l	a0,-(sp)                        	| [$5696: push hl]
	lea	table_577B-0xB+0xE,a0                          	| [$5697: ld   hl,$577E]
	move.b	building_is_dark_8242(a6),d0                   	| [$569a: ld   a,($8242)]
	                             	| [$569d: or   a]
	jne	l_5702                             	| [$569e: jp   nz,$5702]
	move.b	(0x06,a3),d0                    	| [$56a1: ld   a,(iy+$06)]
	                             	| [$56a4: or   a]
	jne	l_56b3                             	| [$56a5: jr   nz,$56B3]
	move.b	(0x07,a3),d0                    	| [$56a7: ld   a,(iy+$07)]
	cmp.b	#0x0B,d0                         	| [$56aa: cp   $0B]
	jcs	l_56b3                             	| [$56ac: jr   c,$56B3]
	cmp.b	#0x10,d0                         	| [$56ae: cp   $10]
	jcs	l_5702                             	| [$56b0: jp   c,$5702]
l_56b3:
	lea	table_577B,a0                          	| [$56b3: ld   hl,table_577B]
	jra	l_5702                             	| [$56b6: jp   $5702]
l_56b9:
	movem.w	d1/d2,-(sp)                    	| [$56b9: push bc]
	move.l	a4,-(sp)                        	| [$56b9: push bc]
	movem.w	d3/d4,-(sp)                    	| [$56ba: push de]
	move.l	a1,-(sp)                        	| [$56ba: push de]

	move.l	a0,-(sp)                        	| [$56bb: push hl]
	lea	table_577B-0xB+0x14,a0                          	| [$56bc: ld   hl,$5784]
	move.b	building_is_dark_8242(a6),d0                   	| [$56bf: ld   a,($8242)]
	                             	| [$56c2: or   a]
	jne	l_5702                             	| [$56c3: jp   nz,$5702]
	move.b	(character_situation_06,a2),d0  	| [$56c6: ld   a,(ix+character_situation_06)]
	                             	| [$56c9: or   a]
	jne	l_56d8                             	| [$56ca: jr   nz,$56D8]
* on ground
	move.b	(0x07,a2),d0                    	| [$56cc: ld   a,(ix+$07)]
	cmp.b	#0x0B,d0                         	| [$56cf: cp   $0B]
	jcs	l_56d8                             	| [$56d1: jr   c,$56D8]
	cmp.b	#0x10,d0                         	| [$56d3: cp   $10]
	jcs	l_5702                             	| [$56d5: jp   c,$5702]
l_56d8:
	lea	table_577B-0xB+0x11,a0                          	| [$56d8: ld   hl,$5781]
	jra	l_5702                             	| [$56db: jp   $5702]
l_56de:
	movem.w	d1/d2,-(sp)                    	| [$56de: push bc]
	move.l	a4,-(sp)                        	| [$56de: push bc]
	movem.w	d3/d4,-(sp)                    	| [$56df: push de]
	move.l	a1,-(sp)                        	| [$56df: push de]

	move.l	a0,-(sp)                        	| [$56e0: push hl]
	lea	l_5787,a0                          	| [$56e1: ld   hl,$5787]
	jra	l_5702                             	| [$56e4: jp   $5702]
l_56e7:
	movem.w	d1/d2,-(sp)                    	| [$56e7: push bc]
	move.l	a4,-(sp)                        	| [$56e7: push bc]
	movem.w	d3/d4,-(sp)                    	| [$56e8: push de]
	move.l	a1,-(sp)                        	| [$56e8: push de]

	move.l	a0,-(sp)                        	| [$56e9: push hl]
	lea	l_578A,a0                          	| [$56ea: ld   hl,$578A]
	jra	l_5702                             	| [$56ed: jp   $5702]
l_56f0:
	movem.w	d1/d2,-(sp)                    	| [$56f0: push bc]
	move.l	a4,-(sp)                        	| [$56f0: push bc]
	movem.w	d3/d4,-(sp)                    	| [$56f1: push de]
	move.l	a1,-(sp)                        	| [$56f1: push de]

	move.l	a0,-(sp)                        	| [$56f2: push hl]
	lea	l_578D,a0                          	| [$56f3: ld   hl,$578D]
	jra	l_5702                             	| [$56f6: jp   $5702]

award_end_of_level_bonus_56F9:
	movem.w	d1/d2,-(sp)                    	| [$56f9: push bc]
	move.l	a4,-(sp)                        	| [$56f9: push bc]
	movem.w	d3/d4,-(sp)                    	| [$56fa: push de]
	move.l	a1,-(sp)                        	| [$56fa: push de]

	move.l	a0,-(sp)                        	| [$56fb: push hl]
	lea	points_awarded_on_level_end_836D(a6),a0	| [$56fc: ld   hl,points_awarded_on_level_end_836D]
	jra	l_5702                             	| [$56ff: jp   $5702] useless!
l_5702:
	move.b	game_in_play_flag_823B(a6),d0   	| [$5702: ld   a,(game_in_play_flag_823B)]
	                             	| [$5705: or   a]
	jne	l_5716                             	| [$5706: jr   nz,$5716]
	lea	current_player_score_834D(a6),a1                      	| [$5708: ld   de,$834D]
	moveq	#2,d1                        	| [$570b: ld   b,$03]
	CLEAR_XC_FLAGS                               	| [$570d: xor  a]
l_570e:
	move.b	(a1),d0                         	| [$570e: ld   a,(de)]
	move.b	(a0)+,d7                         	| [$570f: adc  a,(hl)]
	abcd	d7,d0			| daa
	move.b	d0,(a1)+                         	| [$5711: ld   (de),a]
	                           	| [$5712: inc  hl]
	                           	| [$5713: inc  de]
	                           	| [...]
	dbf	d1,l_570e                             	| [$5714: djnz $570E]
l_5716:
	lea	current_player_score_834D(a6),a0                      	| [$5716: ld   hl,$834D]
	lea	l_8358(a6),a1                      	| [$5719: ld   de,$8358]
	move.b	current_player_is_p2_8236(a6),d0                   	| [$571c: ld   a,($8236)]
	                             	| [$571f: or   a]
	jeq	l_5725                             	| [$5720: jr   z,$5725]
	lea	l_836C(a6),a1                      	| [$5722: ld   de,$836C]
l_5725:
	jbsr	encode_score_as_tiles_58d3                            	| [$5725: call $58D3]
	jbsr	l_5754                            	| [$5728: call $5754]
	move.l	(sp)+,a0                        	| [$572b: pop  hl]
	move.l	(sp)+,a1                        	| [$572c: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$572c: pop  de]
	move.l	(sp)+,a4                        	| [$572d: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$572d: pop  bc]
	rts                                    	| [$572e: ret]

l_572f:
	lea	highest_score_8350(a6),a0                      	| [$572f: ld   hl,$8350]
	lea	current_player_score_834D(a6),a1                      	| [$5732: ld   de,$834D]
	move.b	#0x03,d1                        	| [$5735: ld   b,$03]
	clr.b	d0                               	| [$5737: xor  a]
l_5738:
	move.b	(a1)+,d0                         	| [$5738: ld   a,(de)]
	move.b	(a0)+,d7                         	| [$5739: sbc  a,(hl)]
	subx.b	d7,d0
	                           	| [$573a: inc  hl]
	                           	| [$573b: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_5738                             	| [$573c: djnz $5738]
	bcc.b	0f                               	| [...]
	rts                                    	| [$573e: ret  c] [...]
0:
	lea	current_player_score_834D(a6),a0                      	| [$573f: ld   hl,$834D]
	lea	highest_score_8350(a6),a1                      	| [$5742: ld   de,$8350]
	move.w	#0x0003,d1                      	| [$5745: ld   bc,$0003] 3
	jbsr	ldir                              	| [$5748: ldir]
	lea	highest_score_8350(a6),a0                      	| [$574a: ld   hl,$8350]
	lea	l_8362(a6),a1                      	| [$574d: ld   de,$8362]
	jbsr	encode_score_as_tiles_58d3                            	| [$5750: call $58D3]
	rts                                    	| [$5753: ret]
l_5754:
	move.b	l_8373(a6),d0                   	| [$5754: ld   a,($8373)]
	                             	| [$5757: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$5758: ret  nz] [...]
0:
	lea	l_8370(a6),a0                      	| [$5759: ld   hl,$8370]
	lea	current_player_score_834D(a6),a1                      	| [$575c: ld   de,$834D]
	move.w	#0x03-1,d1                        	| [$575f: ld   b,$03]
	CLEAR_XC_FLAGS                               	| [$5761: xor  a]
l_5762:
	move.b	(a1)+,d0                         	| [$5762: ld   a,(de)]
	move.b	(a0)+,d7                         	| [$5763: sbc  a,(hl)]
	subx.b	d7,d0
												| [$5764: inc  hl]
												| [$5765: inc  de]
	dbf 	d1,l_5762                            | [$5766: djnz $5762]	using dbf preserves flags
	bcc.b	0f                               	| [...]
	rts                                    	| [$5768: ret  c] [...]
0:
	move.b	#0x01,d0                        	| [$5769: ld   a,$01]
	move.b	d0,l_8373(a6)                   	| [$576b: ld   ($8373),a]
	move.b	nb_lives_8234(a6),d0            	| [$576e: ld   a,(nb_lives_8234)]
	addq.b	#1,d0                           	| [$5771: inc  a]
	move.b	d0,nb_lives_8234(a6)            	| [$5772: ld   (nb_lives_8234),a]
	move.b	#0x3D,d0                        	| [$5775: ld   a,$3D]
	jbsr	play_sound             	| [$5777: ld   (sound_latch_D50B),a]
	rts                                    	| [$577a: ret]
table_577B:
	.byte	0x00
	.byte	0x01,0x00,0x50
	.byte	0x01,0x00
l_5781:
	.byte	0x50
	.byte	0x01,0x00,0x00
	.byte	0x02
	.byte	0x00
l_5787:
	.byte	0x00
	.byte	0x03
	.byte	0x00
l_578A:
	.byte	0x00
	.byte	0x03
	.byte	0x00
l_578D:
	.byte	0x00
	.byte	0x05
	.byte	0x00
thousand_points_5790:
	.byte	0x00,0x10,0x00
	.align 	2

compute_end_level_points_5793:
	move.b	copy_of_dip_switches_3_8250(a6),d0	| [$5793: ld   a,(copy_of_dip_switches_3_8250)]
	and.b	#0x03,d0                         	| [$5796: and  $03]
	move.b	d0,d1                           	| [$5798: ld   b,a]
	move.b	skill_level_8237(a6),d0         	| [$5799: ld   a,(skill_level_8237)]
	sub.b	d1,d0                            	| [$579c: sub  b]
l_579d:
	addq.b	#1,d0                           	| [$579d: inc  a]
	jeq	l_579d                             	| [$579e: jr   z,$579D]
	cmp.b	#0x0B,d0                         	| [$57a0: cp   $0B]
	jcs	l_57a6                             	| [$57a2: jr   c,$57A6]
	move.b	#0x0A,d0                        	| [$57a4: ld   a,$0A]
l_57a6:
	move.b	d0,d2                           	| [$57a6: ld   c,a]
	lea	points_awarded_on_level_end_836D(a6),a0	| [$57a7: ld   hl,points_awarded_on_level_end_836D]
	clr.b	d0                               	| [$57aa: xor  a]
	move.b	#0x03,d1                        	| [$57ab: ld   b,$03]
l_57ad:
	move.b	d0,(a0)+                         	| [$57ad: ld   (hl),a]
												| [$57ae: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_57ad                             	| [$57af: djnz $57AD]
l_57b1:
	moveq	#0x03-1,d1                        	| [$57b1: ld   b,$03]
	lea	points_awarded_on_level_end_836D(a6),a1	| [$57b3: ld   de,points_awarded_on_level_end_836D]
	lea	thousand_points_5790,a0            	| [$57b6: ld   hl,thousand_points_5790]
	CLEAR_XC_FLAGS                               	| [$57b9: xor  a]
l_57ba:
	move.b	(a1),d0                         	| [$57ba: ld   a,(de)]
	move.b	(a0)+,d7                         	| [$57bb: adc  a,(hl)]
	abcd	d7,d0 		| daa
	move.b	d0,(a1)+                         	| [$57bd: ld   (de),a]
	                           	| [$57be: inc  hl]
	                           	| [$57bf: inc  de]
	                           	| [...]
	dbf	d1,l_57ba                             	| [$57c0: djnz $57BA]
	subq.w	#1,d2                           	| [$57c2: dec  c]
	jne	l_57b1                             	| [$57c3: jr   nz,$57B1]
	rts                                    	| [$57c5: ret]

update_upper_status_bar_57C6:
	* completely rewritten for efficiency
	lea	upper_status_bar_shadow_8353(a6),a1                      	| [$57c6: ld   hl,$8353]
	lea	l_C463(a6),a0                      	| [$57c9: ld   de,$C463] screen address of status bar
	moveq	#26-1,d1
0:
    move.b    (a1)+,d0
	jbsr	osd_w_videoram
	addq.w	#1,a0
	dbf		d1,0b
	rts
	

	                               	| [$57cc: ldi]
	                               	| [$57ce: ldi]					
	                               	| [$57d0: ldi]					
	                               	| [$57d2: ldi]					
	                               	| [$57d4: ldi]					
	                               	| [$57d6: ldi]				
	                               	| [$57d8: ldi]				
	                               	| [$57da: ldi]				
	                               	| [$57dc: ldi]				
	                               	| [$57de: ldi]
					
	                               	| [$57e0: ldi]
					
	                               	| [$57e2: ldi]
					
	                               	| [$57e4: ldi]
					
	                               	| [$57e6: ldi]
					
	                               	| [$57e8: ldi]
					
 	                               	| [$57ea: ldi]
					
 	                               	| [$57ec: ldi]
					
	                               	| [$57ee: ldi]
					
	                               	| [$57f0: ldi]
					
	                               	| [$57f2: ldi]
					
	                               	| [$57f4: ldi]
					
	                               	| [$57f6: ldi]
					
 	                               	| [$57f8: ldi]
					
	                               	| [$57fa: ldi]
					
	                               	| [$57fc: ldi]
					
	                               	| [$57fe: ldi]
	                                | [$5800: ret]

display_nb_lives_5801:
	move.b	copy_of_dip_switches_3_8250(a6),d0	| [$5801: ld   a,(copy_of_dip_switches_3_8250)]
	btst.b	#6,d0                           	| [$5804: bit  6,a]
	jne	no_hit_dsw_set_581d                             	| [$5806: jr   nz,$581D]
	lea	l_C7A1(a6),a0                      	| [$5808: ld   hl,$C7A1]
	move.b	nb_lives_8234(a6),d0            	| [$580b: ld   a,(nb_lives_8234)]
	                             	| [$580e: or   a]
	jeq	l_581a                             	| [$580f: jr   z,$581A]
	jmi	l_581a                             	| [$5811: jp   m,$581A]
	move.b	d0,d1                           	| [$5814: ld   b,a]
	st	d0
l_5815:
	jbsr	osd_w_videoram                      	| [$5815: ld   (hl),$FF]
	addq	#1,a0											| [$5817: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_5815                             	| [$5818: djnz $5815]
l_581a:
	move.b	#0x33,d0                      	| [$581a: ld   (hl),$33]
	jbsr	osd_w_videoram
	rts                                    	| [$581c: ret]
	
no_hit_dsw_set_581d:
	lea	no_hit_string_5827,a0                     	| [$581d: ld   hl,no_hit_string_5827]
	lea	l_C7A1(a6),a1                      	| [$5820: ld   de,$C7A1]
	jbsr	copy_string_to_screen_29F9        	| [$5823: call copy_string_to_screen_29F9]
	rts                                    	| [$5826: ret]

no_hit_string_5827:
	.byte	0x25
	.byte	0x2F
	.byte	0x33
	.byte	0x2B
	.byte	0x2C
	.byte	0x31,0xFF
	.align	2
	
display_bottom_bricks_582e:
	lea	brick_layer_screen_address_C740(a6),a0                      	| [$582e: ld   hl,$C740]
	move.b	#0x32,d0                        	| [$5831: ld   a,$32]
	move.b	#0x60,d1                        	| [$5833: ld   b,$60]
l_5835:
	jbsr	osd_w_videoram                   	| [$5835: ld   (hl),a]
	addq	#1,a0                           	| [$5836: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_5835                             	| [$5837: djnz $5835]

* title screen / in-game: display score/credits text
display_status_bars_5839:
	lea	status_bar_screen_address_C440(a6),a0                      	| [$5839: ld   hl,$C440]
	move.b	#0x33,d0                        	| [$583c: ld   a,$33]
	move.b	#0x40,d1                        	| [$583e: ld   b,$40]
l_5840:
	jbsr	osd_w_videoram                         	| [$5840: ld   (hl),a]
	addq.w	#1,a0                           	| [$5841: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_5840                             	| [$5842: djnz $5840]
	move.w	#0x0012,d1                      	| [$5844: ld   bc,$0012] 18
	move.b	number_of_players_8235(a6),d0                   	| [$5847: ld   a,($8235)]
	subq.b	#1,d0                           	| [$584a: dec  a]
	jeq	l_5850                             	| [$584b: jr   z,$5850]
	move.w	#0x001C,d1                      	| [$584d: ld   bc,$001C] 28
l_5850:
	lea	string_player_hiscore_6872(pc),a0                          	| [$5850: ld   hl,string_player_hiscore_6872]
	lea	l_C442(a6),a1                      	| [$5853: ld   de,$C442]
	jbsr	ldir_video                              	| [$5856: ldir]
	jbsr	l_5895                            	| [$5858: call $5895]
	lea	l_C7A0(a6),a0                      	| [$585b: ld   hl,$C7A0]
	move.b	#0x33,d0                        	| [$585e: ld   a,$33]
	move.b	#0x20,d1                        	| [$5860: ld   b,$20]
l_5862:
	jbsr	osd_w_videoram                         	| [$5862: ld   (hl),a]
	addq.w	#1,a0                           	| [$5863: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_5862                             	| [$5864: djnz $5862]
	lea	string_credit_588E(pc),a0                          	| [$5866: ld   hl,$588E]
	lea	l_C7B7(a6),a1                      	| [$5869: ld   de,$C7B7]
	move.w	#0x0007,d1                      	| [$586c: ld   bc,$0007] 7
	jbsr	ldir_video                              	| [$586f: ldir]
	rts                                    	| [$5871: ret]

* "PLAYER-1/2 HI-SCORE"
string_player_hiscore_6872:
	.byte	0x1A
	.byte	0x1B
	.byte	0x1C
	.byte	0x1D
	.byte	0x1E,0x1F
	.byte	0x2A,0x11,0x33
	.byte	0x33
	.byte	0x2B
	.byte	0x2C
	.byte	0x2A,0x2D
	.byte	0x2E
	.byte	0x2F
	.byte	0x1F
	.byte	0x1E,0x33
	.byte	0x33
	.byte	0x1A
	.byte	0x1B
	.byte	0x1C
	.byte	0x1D
	.byte	0x1E,0x1F
	.byte	0x2A,0x12
* "CREDIT-"
string_credit_588E:	
	.byte	0x2E
	.byte	0x1F
	.byte	0x1E,0x30
	.byte	0x2C
	.byte	0x31,0x2A
	.align	2
	
l_5895:
	lea	upper_status_bar_shadow_8353(a6),a0                      	| [$5895: ld   hl,$8353]
	move.b	#0x1A,d1                        	| [$5898: ld   b,$1A]
	move.b	#0x33,d0                        	| [$589a: ld   a,$33]
l_589c:
	move.b	d0,(a0)+                         	| [$589c: ld   (hl),a]
	                           	| [$589d: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_589c                             	| [$589e: djnz $589C]
	lea	current_player_score_834D(a6),a0          | [$58a0: ld   hl,$834D]
	lea	l_8358(a6),a1                      	| [$58a3: ld   de,$8358]
	move.b	current_player_is_p2_8236(a6),d0                   	| [$58a6: ld   a,($8236)]
	                             	| [$58a9: or   a]
	jeq	l_58af                             	| [$58aa: jr   z,$58AF]
	lea	l_836C(a6),a1                      	| [$58ac: ld   de,$836C]
l_58af:
	jbsr	encode_score_as_tiles_58d3                            	| [$58af: call $58D3]
	lea	highest_score_8350(a6),a0                      	| [$58b2: ld   hl,$8350]
	lea	l_8362(a6),a1                      	| [$58b5: ld   de,$8362]
	jbsr	encode_score_as_tiles_58d3                            	| [$58b8: call $58D3]
	move.b	number_of_players_8235(a6),d0                   	| [$58bb: ld   a,($8235)]
	subq.b	#1,d0                           	| [$58be: dec  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$58bf: ret  z] [...]
0:
	lea	l_8254(a6),a0                      	| [$58c0: ld   hl,$8254]
	lea	l_8358(a6),a1                      	| [$58c3: ld   de,$8358]
	move.b	current_player_is_p2_8236(a6),d0                   	| [$58c6: ld   a,($8236)]
	                             	| [$58c9: or   a]
	jne	l_58cf                             	| [$58ca: jr   nz,$58CF]
	lea	l_836C(a6),a1                      	| [$58cc: ld   de,$836C]
l_58cf:
	jbsr	encode_score_as_tiles_58d3                            	| [$58cf: call $58D3]
	rts                                    	| [$58d2: ret]
encode_score_as_tiles_58d3:
	move.b	#0x03,d1                        	| [$58d3: ld   b,$03]
l_58d5:
	move.b	(a0),d0                         	| [$58d5: ld   a,(hl)]
	and.b	#0x0F,d0                         	| [$58d6: and  $0F]
	add.b	#0x10,d0                         	| [$58d8: add  a,$10]
	move.b	d0,(a1)                         	| [$58da: ld   (de),a]
	                           	                | [$58db: dec  de]
	move.b	(a0)+,d0                         	| [$58dc: ld   a,(hl)]
	ror.b	#4,d0                            	| [$58dd: rrca] * 4
	and.b	#0x0F,d0                         	| [$58e1: and  $0F]
	add.b	#0x10,d0                         	| [$58e3: add  a,$10]
	move.b	d0,-(a1)                         	| [$58e5: ld   (de),a]
	subq.w	#1,a1                           	| [$58e6: dec  de]
	                           	                | [$58e7: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_58d5                             	| [$58e8: djnz $58D5]
	rts                                    	| [$58ea: ret]

l_58eb:
	jbsr	l_58fb                            	| [$58eb: call $58FB]
	jbsr	check_opening_doors_596c                            	| [$58ee: call $596C]
	jbsr	l_59bb                            	| [$58f1: call $59BB]
	jbsr	l_59f4                            	| [$58f4: call $59F4]
	jbsr	l_041f                            	| [$58f7: call $041F]
	rts                                    	| [$58fa: ret]

l_58fb:
	LOAD_WORD	level_timer_16bit_8231(a6),d5	| [$58fb: ld   hl,(level_timer_16bit_8231)]
	addq.w	#1,d5                           	| [$58fe: inc  hl]
	STORE_WORD	d5,level_timer_16bit_8231(a6)	| [$58ff: ld   (level_timer_16bit_8231),hl]
	jbsr	compute_difficulty_592F           	| [$5902: call compute_difficulty_592F]
	move.b	#0x01,d1                        	| [$5905: ld   b,$01]
	move.b	level_timer_16bit_msb_8232(a6),d0	| [$5907: ld   a,(level_timer_16bit_msb_8232)]
	cmp.b	#0x03,d0                         	| [$590a: cp   $03]
	jcs	l_5914                             	| [$590c: jr   c,$5914]
	addq.b	#1,d1                           	| [$590e: inc  b]
	cmp.b	#0x0C,d0                         	| [$590f: cp   $0C]
	jcs	l_5914                             	| [$5911: jr   c,$5914]
	addq.b	#1,d1                           	| [$5913: inc  b]
l_5914:
	move.b	d1,d0                           	| [$5914: ld   a,b]
	move.b	d0,l_837A(a6)                   	| [$5915: ld   ($837A),a]
	move.b	instant_difficulty_level_8374(a6),d0	| [$5918: ld   a,(instant_difficulty_level_8374)]
	add.b	d0,d0                            	| [$591b: add  a,a]
	move.b	d0,d1                           	| [$591c: ld   b,a]
	move.b	#0x50,d0                        	| [$591d: ld   a,$50]
	sub.b	d1,d0                            	| [$591f: sub  b]
	sub.b	d1,d0                            	| [$5920: sub  b]
	sub.b	d1,d0                            	| [$5921: sub  b]
	jcc	l_5925                             	| [$5922: jr   nc,$5925]
	clr.b	d0                               	| [$5924: xor  a]
l_5925:
	move.b	d0,l_8375(a6)                   	| [$5925: ld   ($8375),a]
	jbsr	update_max_nb_enemies_and_spawn_proba_594D	| [$5928: call update_max_nb_enemies_and_spawn_proba_594D]
	jbsr	update_enemies_timers_and_aggressivity_5afc       | [$592b: call $5AFC]
	rts                                    	| [$592e: ret]

* real-time difficulty computation from skill level
* and current time elapsed in the level
compute_difficulty_592F:
	move.b	level_timer_16bit_msb_8232(a6),d0	| [$592f: ld   a,(level_timer_16bit_msb_8232)]
	cmp.b	#0x10,d0                         	| [$5932: cp   $10]
	jcc	l_5949                             	| [$5934: jr   nc,$5949]
	lsr.b	#2,d0                            	| [$5936: srl  a] * 2
l_593a:
	move.b	d0,d1                           	| [$593a: ld   b,a]
	move.b	skill_level_8237(a6),d0         	| [$593b: ld   a,(skill_level_8237)]
	add.b	d1,d0                            	| [$593e: add  a,b] add skill level with time spent in level
	cmp.b	#0x10,d0                         	| [$593f: cp   $10]
	jcs	l_5945                             	| [$5941: jr   c,$5945]
	move.b	#0x0F,d0                        	| [$5943: ld   a,$0F] maxed out at $F
l_5945:
	jbsr	l_4620                            	| [$5945: call $4620]
	rts                                    	| [$5948: ret]
* player has overstayed his welcome as
* timer MSB 8232 just reached $10: max out difficulty
l_5949:
	sub.b	#0x0C,d0                         	| [$5949: sub  $0C]
	jra	l_593a                             	| [$594b: jr   $593A]

* depending on difficulty level, select max enemies
* either 3 or 4, also update probability to spawn enemies
update_max_nb_enemies_and_spawn_proba_594D:
	move.b	#0x03,d1                        	| [$594d: ld   b,$03]
	move.b	skill_level_8237(a6),d0         	| [$594f: ld   a,(skill_level_8237)]
	add.b	d0,d0                            	| [$5952: add  a,a]
	add.b	d0,d0                            	| [$5953: add  a,a]
	move.b	d0,d2                           	| [$5954: ld   c,a]
	move.b	level_timer_16bit_msb_8232(a6),d0	| [$5955: ld   a,(level_timer_16bit_msb_8232)]
	add.b	d2,d0                            	| [$5958: add  a,c]
	cmp.b	#0x0E,d0                         	| [$5959: cp   $0E]
	jcs	l_595f                             	    | [$595b: jr   c,$595F]
	move.b	#0x04,d1                        	| [$595d: ld   b,$04]
l_595f:
	.ifne	OPT_ONLY_ONE_ENEMY
	move	#1,d1
	.endif
	move.b	d1,d0                           	| [$595f: ld   a,b]
	move.b	d0,max_nb_enemies_837B(a6)      	| [$5960: ld   (max_nb_enemies_837B),a]
	move.b	instant_difficulty_level_8374(a6),d0	| [$5963: ld   a,(instant_difficulty_level_8374)]
	add.b	d0,d0                            	| [$5966: add  a,a]
	add.b	d0,d0                            	| [$5967: add  a,a] times 4
	move.b	d0,probablility_to_spawn_an_enemy_837C(a6)	| [$5968: ld   (probablility_to_spawn_an_enemy_837C),a]
	rts                                    	    | [$596b: ret]

check_opening_doors_596c:
	lea	opening_door_flag_array_8377(a6),a0                      	| [$596c: ld   hl,$8377]
	clr.b	d0                               	| [$596f: xor  a]
	move.b	d0,(a0)+                         	| [$5970: ld   (hl),a]
	                           	| [$5971: inc  hl]
	move.b	d0,(a0)+                         	| [$5972: ld   (hl),a]
	                           	| [$5973: inc  hl]
	move.b	d0,(a0)                         	| [$5974: ld   (hl),a]
	lea	enemy_1_853A(a6),a2                	| [$5975: ld   ix,enemy_1_853A] first enemy pointer
	move.w	#0x0020,d3                      	| [$5979: ld   de,$0020] $20 per enemy 32
	move.b	#0x04,d1                        	| [$597c: ld   b,$04] 4 enemies
	move.b	player_structure_851A+current_floor_07(a6),d0	| [$597e: ld   a,(player_structure_851A+current_floor_07)]
	move.b	d0,d2                           	| [$5981: ld   c,a]
	subq.b	#1,d2                           	| [$5982: dec  c]
* start loop on enemies
l_5983:
	move.b	(enemy_state_09,a2),d0                    	| [$5983: ld   a,(ix+$09)]
	addq.b	#1,d0                           	| [$5986: inc  a]
	jeq	l_59b6                             	| [$5987: jp   z,$59B6] enemy inactive: skip
	move.b	(character_situation_06,a2),d0  	| [$598a: ld   a,(ix+character_situation_06)]
	cmp.b	#CS_IN_ROOM_05,d0                	| [$598d: cp   CS_IN_ROOM_05]
	jeq	enemy_exiting_room_599D            	| [$598f: jr   z,enemy_exiting_room_599D]
	cmp.b	#CS_ON_GROUND_00,d0                             	| [$5991: or   a]
	jne	l_59b6                             	| [$5992: jr   nz,$59B6]
	move.b	(0x1c,a2),d0                    	| [$5994: ld   a,(ix+$1c)]
	cmp.b	#0x0C,d0                         	| [$5997: cp   $0C]
	jeq	l_59b6                             	| [$5999: jr   z,$59B6]
	jra	l_59a4                             	| [$599b: jr   $59A4]

* starting point for enemies
enemy_exiting_room_599D:
	move.b	(exiting_room_timer_0a,a2),d0                    	| [$599d: ld   a,(ix+$0a)]
	                             	| [$59a0: or   a]
	jpl	l_59b6                             	| [$59a1: jp   p,$59B6]
l_59a4:
	* exiting room (door is opening)
	move.b	(current_floor_07,a2),d0                    	| [$59a4: ld   a,(ix+$07)]
	lea	opening_door_flag_array_8377(a6),a0                      	| [$59a7: ld   hl,$8377]
	* compare player and enemy floors
	sub.b	d2,d0                            	| [$59aa: sub  c]
	jeq	l_59b5                             	| [$59ab: jr   z,$59B5]
	addq.w	#1,a0                           	| [$59ad: inc  hl]
	subq.b	#1,d0                           	| [$59ae: dec  a]
	jeq	l_59b5                             	| [$59af: jr   z,$59B5]
	addq.w	#1,a0                           	| [$59b1: inc  hl]
	subq.b	#1,d0                           	| [$59b2: dec  a]
	jne	l_59b6                             	| [$59b3: jr   nz,$59B6]
l_59b5:
	* increase value of element of opening_door_flag_array_8377 array: door opening somewhere
	addq.b	#1,(a0)                         	| [$59b5: inc  (hl)]
l_59b6:
	* next enemy
	add.w	d3,a2                            	| [$59b6: add  ix,de]
 	subq.b	#1,d1                           	| [...]
	jne	l_5983                             	| [$59b8: djnz $5983]
	rts                                    	| [$59ba: ret]

l_59bb:
	lea	l_8376(a6),a0                      	| [$59bb: ld   hl,$8376]
	move.b	(a0),d0                         	| [$59be: ld   a,(hl)]
	                             	| [$59bf: or   a]
	jeq	l_59c3                             	| [$59c0: jr   z,$59C3]
	subq.b	#1,(a0)                         	| [$59c2: dec  (hl)]
l_59c3:
	move.b	instant_difficulty_level_8374(a6),d0	| [$59c3: ld   a,(instant_difficulty_level_8374)]
	                             	| [$59c6: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$59c7: ret  z] [...]
0:
	lea	l_8123(a6),a0                      	| [$59c8: ld   hl,$8123]
	move.w	#0x0004,d3                      	| [$59cb: ld   de,$0004] 4
	move.b	#0x03,d1                        	| [$59ce: ld   b,$03]
	move.b	#0x70,d2                        	| [$59d0: ld   c,$70]
l_59d2:
	move.b	(a0),d0                         	| [$59d2: ld   a,(hl)]
	add.w	d3,a0                            	| [$59d3: add  hl,de]
 	addq.b	#1,d0                           	| [$59d4: inc  a]
	jeq	l_59de                             	| [$59d5: jr   z,$59DE]
	move.b	(a0),d0                         	| [$59d7: ld   a,(hl)]
	sub.b	d2,d0                            	| [$59d8: sub  c]
	jeq	reload_timer_for_all_enemies_59e2                             	| [$59d9: jr   z,$59E2]
	subq.b	#1,d0                           	| [$59db: dec  a]
	jeq	reload_timer_for_all_enemies_59e2                             	| [$59dc: jr   z,$59E2]
l_59de:
	addq.w	#1,a0                           	| [$59de: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_59d2                             	| [$59df: djnz $59D2]
	rts                                    	| [$59e1: ret]

reload_timer_for_all_enemies_59e2:
	move.b	#0x5A,d0                        	| [$59e2: ld   a,$5A]
	move.b	d0,l_8376(a6)                   	| [$59e4: ld   ($8376),a]
	lea	enemy_1_853A+enemy_unknown_timer_0e(a6),a0                      	| [$59e7: ld   hl,$8548]
	move.w	#0x0020,d3                      	| [$59ea: ld   de,$0020] 32
	move.b	#0x04,d1                        	| [$59ed: ld   b,$04]
l_59ef:
	move.b	d0,(a0)                         	| [$59ef: ld   (hl),a]
	add.w	d3,a0                            	| [$59f0: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_59ef                             	| [$59f1: djnz $59EF]
	rts                                    	| [$59f3: ret]

l_59f4:
	move.b	player_structure_851A+character_situation_06(a6),d0	| [$59f4: ld   a,(player_structure_851A+character_situation_06)]
	                             	| [$59f7: or   a]
	jeq	l_59ff                             	| [$59f8: jp   z,$59FF]
	.ifeq	OPT_NO_ENEMIES
	jbsr	try_to_spawn_an_enemy_player_in_elev_5ADD	| [$59fb: call try_to_spawn_an_enemy_player_in_elev_5ADD]
	.endif
	rts                                    	| [$59fe: ret]
l_59ff:
	move.b	l_8376(a6),d0                   	| [$59ff: ld   a,($8376)]
	                             	| [$5a02: or   a]
	jne	l_5a09                             	| [$5a03: jr   nz,$5A09]
	.ifeq	OPT_NO_ENEMIES
	jbsr	try_to_spawn_an_enemy_player_in_elev_5ADD	| [$5a05: call try_to_spawn_an_enemy_player_in_elev_5ADD]
	.endif
	rts                                    	| [$5a08: ret]
l_5a09:
	* on a floor: different spawn strategy
	.ifeq	OPT_NO_ENEMIES
	jbsr	try_to_spawn_an_enemy_5A26        	| [$5a09: call try_to_spawn_an_enemy_5A26]
	.endif
	rts                                    	| [$5a0c: ret]

try_to_spawn_an_enemy_player_in_elev_5ADD:
	move.b	max_nb_enemies_837B(a6),d0      	| [$5a0d: ld   a,(max_nb_enemies_837B)]
	move.b	d0,d1                           	| [$5a10: ld   b,a]
	lea	enemy_1_853A(a6),a2                	| [$5a11: ld   ix,enemy_1_853A]
* loop on enemies
l_5a15:
	jbsr	random_1E2A                       	| [$5a15: call random_1E2A]
	move.b	d0,d4                           	| [$5a18: ld   e,a]
	move.b	#0x01,d2                        	| [$5a19: ld   c,$01]
	jbsr	maybe_spawn_an_enemy_5a4c                            	| [$5a1b: call $5A4C]
	move.w	#0x0020,d3                      	| [$5a1e: ld   de,$0020] 32
	add.w	d3,a2                            	| [$5a21: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_5a15                             	| [$5a23: djnz $5A15]
	rts                                    	| [$5a25: ret]


try_to_spawn_an_enemy_5A26:
	move.b	max_nb_enemies_837B(a6),d0      	| [$5a26: ld   a,(max_nb_enemies_837B)] 3 or 4
	move.b	d0,d1                           	| [$5a29: ld   b,a]
	lea	enemy_1_853A(a6),a2                	| [$5a2a: ld   ix,enemy_1_853A]
* loop
l_5a2e:
	move.b	l_837A(a6),d0                   	| [$5a2e: ld   a,($837A)]
	move.b	d0,d2                           	| [$5a31: ld   c,a]
	move.b	#0x01,d4                        	| [$5a32: ld   e,$01]
	jbsr	pseudo_random_with_regsave_1DF5                	| [$5a34: call pseudo_random_with_regsave_1DF5]
	lea	probablility_to_spawn_an_enemy_837C(a6),a0	| [$5a37: ld   hl,probablility_to_spawn_an_enemy_837C]
	cmp.b	(a0),d0                          	| [$5a3a: cp   (hl)]
	jcs	l_5a41                             	| [$5a3b: jr   c,$5A41]
	jbsr	random_1E2A                       	| [$5a3d: call random_1E2A]
	move.b	d0,d4                           	| [$5a40: ld   e,a]
l_5a41:
	jbsr	maybe_spawn_an_enemy_5a4c                            	| [$5a41: call $5A4C]
	move.w	#0x0020,d3                      	| [$5a44: ld   de,$0020] 32
	add.w	d3,a2                            	| [$5a47: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_5a2e                             	| [$5a49: djnz $5A2E]
	rts                                    	| [$5a4b: ret]

* < d4: random offset to apply
maybe_spawn_an_enemy_5a4c:
	move.b	(enemy_state_09,a2),d0             	| [$5a4c: ld   a,(ix+enemy_state_09)]
	addq.b	#1,d0                           	| [$5a4f: inc  a]
	jeq	l_5a5e                             	| [$5a50: jr   z,$5A5E] jump if enemy inactive
	move.b	(character_situation_06,a2),d0  	| [$5a52: ld   a,(ix+character_situation_06)]
	cmp.b	#CS_IN_ROOM_05,d0                	| [$5a55: cp   CS_IN_ROOM_05]
	beq.b	0f                               	| [...]
	rts                                    	| [$5a57: ret  nz] [...]
0:
	move.b	(exiting_room_timer_0a,a2),d0                    	| [$5a58: ld   a,(ix+$0a)]
	cmp.b	#0xE0,d0                         	| [$5a5b: cp   $E0]
	beq.b	0f                               	| [...]
	rts                                    	| [$5a5d: ret  nz] [...]
0:
l_5a5e:
	move.b	(0x10,a2),d0                    	| [$5a5e: ld   a,(ix+$10)]
	                             	| [$5a61: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$5a62: ret  nz] [...]
0:
	lea	opening_door_flag_array_8377(a6),a0                      	| [$5a63: ld   hl,$8377]
	and.w   #0xFF,d3                               	| [$5a66: ld   d,$00]
	move.b	d4,d3
	add.w	d3,a0                            	| [$5a68: add  hl,de]
	move.b	(a0),d0                         	| [$5a69: ld   a,(hl)]
	cmp.b	d2,d0                            	| [$5a6a: cp   c]
	bcs.b	0f                               	| [...]
	rts                                    	| [$5a6b: ret  nc] [...]
0:
	move.b	player_structure_851A+current_floor_07(a6),d0	| [$5a6c: ld   a,(player_structure_851A+current_floor_07)]
	add.b	d4,d0                            	| [$5a6f: add  a,e]
	subq.b	#1,d0                           	| [$5a70: dec  a]
	move.b	d0,(current_floor_07,a2)        	| [$5a71: ld   (ix+current_floor_07),a]
	jbsr	pseudo_random_with_regsave_1DF5     | [$5a74: call pseudo_random_with_regsave_1DF5]
	and.b	#0x07,d0                         	| [$5a77: and  $07]
	move.b	d0,(spawning_door_08,a2)        	| [$5a79: ld   (ix+spawning_door_08),a]

	move.l	a0,-(sp)                        	| [$5a7c: push hl]
	jbsr	must_spawn_enemy_5AAB             	| [$5a7d: call must_spawn_enemy_5AAB]
	movem.l	(sp)+,a0                        	| [$5a80: pop  hl]
	st.b	(enemy_state_09,a2)       	| [$5a81: ld   (ix+enemy_state_09),$FF] inactive
	bne.b	0f                               	| [...]
	rts                                    	| [$5a85: ret  z] [...]
0:
* must_spawn_enemy_5AAB returned nonzero:
* spawn a new enemy, located in the room we picked at random
* above, or by "cheating" if floor 20 and timer > 0x1000
spawn_enemy_5A86:
	clr.b	d0                               	| [$5a86: ld   a,$00]
	move.b	d0,(move_direction_0d,a2)       	| [$5a88: ld   (ix+move_direction_0d),a]
	move.b	d0,(enemy_shoot_timeout_19,a2)       | [$5a8b: ld   (ix+$19),a]
	move.b	d0,(enemy_state_09,a2)          	| [$5a8e: ld   (ix+enemy_state_09),a] enemy active
	move.b	d0,(0x0f,a2)                    	| [$5a91: ld   (ix+$0f),a]
	move.b	d0,(0x10,a2)                    	| [$5a94: ld   (ix+$10),a]
	move.b	#CS_IN_ROOM_05,(character_situation_06,a2)	| [$5a97: ld   (ix+character_situation_06),CS_IN_ROOM_05]
	st.b	(0x04,a2)                 	        | [$5a9b: ld   (ix+$04),$FF]
	move.b	#0xE0,(exiting_room_timer_0a,a2)    | [$5a9f: ld   (ix+$0a),$E0]
	addq.b	#1,(a0)                         	| [$5aa3: inc  (hl)]
	move.b	instant_difficulty_level_8374(a6),d0	| [$5aa4: ld   a,(instant_difficulty_level_8374)]
	move.b	d0,(enemy_aggressivity_13,a2)   	| [$5aa7: ld   (ix+enemy_aggressivity_13),a]
	rts                                    	| [$5aaa: ret]

must_spawn_enemy_5AAB:
	movem.w	d1/d2,-(sp)                    	| [$5aab: push bc]
	move.b	(current_floor_07,a2),d0        	| [$5aac: ld   a,(ix+current_floor_07)]
* probably never happens, floor range is 0-31
											| [$5aaf: or   a]
	jcs	l_5adc                             	| [$5ab0: jp   c,$5ADC]
	cmp.b	#0x1F,d0                         	| [$5ab3: cp   $1F]
	jcc	l_5adc                             	| [$5ab5: jp   nc,$5ADC]
	cmp.b	#0x14,d0                         	| [$5ab8: cp   $14]
	jeq	special_enemy_cheat_20th_floor_5ADF	| [$5aba: jr   z,special_enemy_cheat_20th_floor_5ADF]
l_5abc:
	moveq   #0,d3                               	| [$5abf: ld   d,$00]
	move.b	(current_floor_07,a2),d3        	| [$5abc: ld   e,(ix+current_floor_07)]
	lea	red_door_position_array_8210(a6),a0	| [$5ac1: ld   hl,red_door_position_array_8210]
	add.w	d3,a0                            	| [$5ac4: add  hl,de]
	move.b	(a0),d0                         	| [$5ac5: ld   a,(hl)] red door index
	cmp.b	(spawning_door_08,a2),d0         	| [$5ac6: cp   (ix+spawning_door_08)]
	jeq	l_5adc                             	| [$5ac9: jr   z,$5ADC] don"t spawn enemy from red door
	lea	l_81F1(a6),a0                      	| [$5acb: ld   hl,$81F1]
	add.w	d3,a0                            	| [$5ace: add  hl,de]
 	move.b	(a0),d0                         	| [$5acf: ld   a,(hl)]
	move.b	(spawning_door_08,a2),d1        	| [$5ad0: ld   b,(ix+spawning_door_08)]
	addq	#1,d1
	rol.b	d1,d0                            	| [$5ad3: rlca]
												| [$5ad4: dec  b]
												| [$5ad5: jp   p,$5AD3]
	and.b	#0x01,d0                         	| [$5ad8: and  $01] test spawn enemy
	movem.w	(sp)+,d1/d2                    	| [$5ada: pop  bc]
	rts                                    	| [$5adb: ret]

l_5adc:
	clr.b	d0                              | [$5adc: xor  a] don't spawn enemy
	movem.w	(sp)+,d1/d2                    	| [$5add: pop  bc]
	rts                                    	| [$5ade: ret]

special_enemy_cheat_20th_floor_5ADF:
	move.b	player_structure_851A+current_floor_07(a6),d0	| [$5adf: ld   a,(player_structure_851A+current_floor_07)]
	cmp.b	#0x14,d0                         	| [$5ae2: cp   $14]
	jne	l_5abc                             	| [$5ae4: jr   nz,$5ABC]
	move.b	player_structure_851A+character_x_00(a6),d0	| [$5ae6: ld   a,(player_structure_851A+character_x_00)]
	cmp.b	#0xAE,d0                         	| [$5ae9: cp   $AE]
	jcs	l_5abc                             	| [$5aeb: jr   c,$5ABC]
	move.b	level_timer_16bit_msb_8232(a6),d0	| [$5aed: ld   a,(level_timer_16bit_msb_8232)]
	cmp.b	#0x10,d0                         	| [$5af0: cp   $10]
	jcs	l_5abc                             	| [$5af2: jr   c,$5ABC]
* if player is on 20th floor on the hard right part
* (the isolated door, with a wall on the left, and stairs)
* force enemies to spawn on that very door
* when timer is in "hurry" mode
* (seems that they'll ignore the fact that the door is red too!)
	move.b	#0x06,(spawning_door_08,a2)     	| [$5af4: ld   (ix+spawning_door_08),$06]
	or.b	#0x01,d0                          	| [$5af8: or   $01] spawn enemy
	movem.w	(sp)+,d1/d2                    	| [$5afa: pop  bc]
	rts                                    	| [$5afb: ret]

* decrease various timers that trigger enemy actions

update_enemies_timers_and_aggressivity_5afc:
	move.b	level_timer_16bit_8231(a6),d0   	| [$5afc: ld   a,(level_timer_16bit_8231)]
	                         	| [$5aff: and  $FF]   useless!!
	cmp.b	#0xFF,d0                         	| [$5b01: cp   $FF]
	jne	l_5b16                             	| [$5b03: jr   nz,$5B16]
	* increase enemies aggressivity progressively 0->0xF, slowly, during current level
	lea	enemy_1_853A+enemy_aggressivity_13(a6),a0                      	| [$5b05: ld   hl,$854D]
	move.w	#0x0020,d3                      	| [$5b08: ld   de,$0020] 32
	move.b	#0x04,d1                        	| [$5b0b: ld   b,$04]
l_5b0d:
	move.b	(a0),d0                         	| [$5b0d: ld   a,(hl)]
	cmp.b	#0x0F,d0                         	| [$5b0e: cp   $0F]
	jeq	l_5b13                             	| [$5b10: jr   z,$5B13]
	addq.b	#1,(a0)                         	| [$5b12: inc  (hl)]
l_5b13:
	add.w	d3,a0                            	| [$5b13: add  hl,de]
 	subq.b	#1,d1                           	| [...]
	jne	l_5b0d                             	| [$5b14: djnz $5B0D]
	* at each iteration (fast loop), decrease a few enemy timer values
l_5b16:
	lea	enemy_1_853A+enemy_unknown_timer_0e(a6),a0  | [$5b16: ld   hl,$8548]
	jbsr	decrease_value_for_all_enemies_5b25                            	| [$5b19: call $5B25]
	lea	enemy_1_853A+enemy_unknown_timer_10(a6),a0                      	| [$5b1c: ld   hl,$854A]
	jbsr	decrease_value_for_all_enemies_5b25                            	| [$5b1f: call $5B25]
	lea	enemy_1_853A+enemy_shoot_timeout_19(a6),a0                      	| [$5b22: ld   hl,$8553]
decrease_value_for_all_enemies_5b25:
	move.w	#0x0020,d3                      	| [$5b25: ld   de,$0020] 32
	move.b	#0x04,d1                        	| [$5b28: ld   b,$04]
l_5b2a:
	move.b	(a0),d0                         	| [$5b2a: ld   a,(hl)]
	                             	| [$5b2b: or   a]
	jeq	l_5b2f                             	| [$5b2c: jr   z,$5B2F]
	subq.b	#1,(a0)                         	| [$5b2e: dec  (hl)]
l_5b2f:
	add.w	d3,a0                            	| [$5b2f: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_5b2a                             	| [$5b30: djnz $5B2A]
	rts                                    	| [$5b32: ret]
l_5b33:
	st.b	(associated_elevator_08,a2)                 	| [$5b33: ld   (ix+$08),$FF]
	move.b	player_structure_851A+current_floor_07(a6),d0	| [$5b37: ld   a,(player_structure_851A+current_floor_07)]
	move.b	d0,d1                           	| [$5b3a: ld   b,a]
	cmp.b	#0x1F,d0                         	| [$5b3b: cp   $1F]
	jcs	l_5b41                             	| [$5b3d: jr   c,$5B41]
	* maxed at floor 30 (in case player is above elevator on floor 31?)
	move.b	#0x1E,d1                        	| [$5b3f: ld   b,$1E]
l_5b41:
	move.b	(current_floor_07,a2),d0                    	| [$5b41: ld   a,(ix+$07)]
	cmp.b	d1,d0                            	| [$5b44: cp   b]
	jeq	player_and_enemy_same_floor_5d13                             	| [$5b45: jp   z,$5D13]
	jcs	l_5b4e                             	| [$5b48: jp   c,$5B4E]
	jra	l_5c52                             	| [$5b4b: jp   $5C52]
l_5b4e:
	move.b	#0x03,(0x1c,a2)                 	| [$5b4e: ld   (ix+$1c),$03]
	clr.b	(0x1e,a2)                        	| [$5b52: ld   (ix+$1e),$00]
	move.b	#0x78,(0x1a,a2)                 	| [$5b56: ld   (ix+$1a),$78]
	move.b	(current_floor_07,a2),d0                    	| [$5b5a: ld   a,(ix+$07)]
	cmp.b	#0x14,d0                         	| [$5b5d: cp   $14]
	jeq	l_5bb3                             	| [$5b5f: jr   z,$5BB3]
	bcs.b	0f                               	| [...]
	rts                                    	| [$5b61: ret  nc] [...]
0:
	cmp.b	#0x12,d0                         	| [$5b62: cp   $12]
	jeq	l_5bf4                             	| [$5b64: jp   z,$5BF4]
	jcc	l_5bc6                             	| [$5b67: jp   nc,$5BC6]
	cmp.b	#0x11,d0                         	| [$5b6a: cp   $11]
	jeq	l_5c07                             	| [$5b6c: jp   z,$5C07]
	tst.b	d0                             	| [$5b6f: or   a]
	jeq	l_5c44                             	| [$5b70: jp   z,$5C44]
	cmp.b	#0x07,d0                         	| [$5b73: cp   $07]
	jeq	l_5c35                             	| [$5b75: jp   z,$5C35]
	add.b	d0,d0                            	| [$5b78: add  a,a]
l_5b79:
	move.b	d0,d4                           	| [$5b79: ld   e,a]
	move.b	current_enemy_index_85BA(a6),d0 	| [$5b7a: ld   a,(current_enemy_index_85BA)]
l_5b7d:
	and.b	#0x01,d0                         	| [$5b7d: and  $01]
l_5b7f:
	add.b	d4,d0                            	| [$5b7f: add  a,e]
	moveq   #0,d3                               	| [$5b81: ld   d,$00]
	move.b	d0,d3                           	| [$5b80: ld   e,a]
	lea	table_5B93-2(pc),a0                          	| [$5b83: ld   hl,$5B91]
	add.w	d3,a0                            	| [$5b86: add  hl,de]
	move.b	(a0),d0                         	| [$5b87: ld   a,(hl)]
	move.b	d0,(0x1a,a2)                    	| [$5b88: ld   (ix+$1a),a]
	cmp.b	#0xC2,d0                         	| [$5b8b: cp   $C2]
	beq.b	0f                               	| [...]
	rts                                    	| [$5b8d: ret  nz] [...]
0:
	move.b	#0x0B,(0x1c,a2)                 	| [$5b8e: ld   (ix+$1c),$0B]
	rts                                    	| [$5b92: ret]

table_5B93:
	.byte	0x58
	.byte	0x98
	.byte	0x58
	.byte	0x98
	.byte	0x58
	.byte	0x98
	.byte	0x58
	.byte	0x98
	.byte	0x58
	.byte	0x98
	.byte	0x58
	.byte	0x98
	.byte	0x18,0xD8
	.byte	0x18,0xD8
	.byte	0x18,0xD8
	.byte	0x18,0xD8
	.byte	0x78
	.byte	0xD8
	.byte	0xD8
	.byte	0xD8
	.byte	0x18,0x18
	.byte	0x18,0x18
	.byte	0x78
	.byte	0x78
	.byte	0x78
	.byte	0xC2
	.align	2

l_5bb3:
	move.b	#0x78,(0x1a,a2)                 	| [$5bb3: ld   (ix+$1a),$78]
	move.b	(character_x_00,a2),d0          	| [$5bb7: ld   a,(ix+character_x_00)]
	cmp.b	#0xAC,d0                         	| [$5bba: cp   $AC]
	bcc.b	0f                               	| [...]
	rts                                    	| [$5bbc: ret  c] [...]
0:
	move.b	#0x0B,(0x1c,a2)                 	| [$5bbd: ld   (ix+$1c),$0B]
	move.b	#0xE7,(0x1a,a2)                 	| [$5bc1: ld   (ix+$1a),$E7]
l_5bc5:
	rts                                    	| [$5bc5: ret]
l_5bc6:
	move.b	player_structure_851A+current_floor_07(a6),d0	| [$5bc6: ld   a,(player_structure_851A+current_floor_07)]
	cmp.b	#0x14,d0                         	| [$5bc9: cp   $14]
	jne	l_5bdd                             	| [$5bcb: jr   nz,$5BDD]
	move.b	player_structure_851A(a6),d0    	| [$5bcd: ld   a,(player_structure_851A)]
	cmp.b	#0xAC,d0                         	| [$5bd0: cp   $AC]
	jcc	l_5beb                             	| [$5bd2: jr   nc,$5BEB]
	move.b	#0x0B,(0x1c,a2)                 	| [$5bd4: ld   (ix+$1c),$0B]
	move.b	#0x2F,(0x1a,a2)                 	| [$5bd8: ld   (ix+$1a),$2F]
	rts                                    	| [$5bdc: ret]
l_5bdd:
	move.b	#0x2F,(0x1a,a2)                 	| [$5bdd: ld   (ix+$1a),$2F]
	move.b	#0x0B,(0x1c,a2)                 	| [$5be1: ld   (ix+$1c),$0B]
	move.b	current_enemy_index_85BA(a6),d0 	| [$5be5: ld   a,(current_enemy_index_85BA)]
	and.b	#0x01,d0                         	| [$5be8: and  $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$5bea: ret  z] [...]
0:
l_5beb:
	move.b	#0xC2,(0x1a,a2)                 	| [$5beb: ld   (ix+$1a),$C2]
	move.b	#0x0B,(0x1c,a2)                 	| [$5bef: ld   (ix+$1c),$0B]
	rts                                    	| [$5bf3: ret]
l_5bf4:
	move.b	#0x0B,(0x1c,a2)                 	| [$5bf4: ld   (ix+$1c),$0B]
	move.b	#0x2F,(0x1a,a2)                 	| [$5bf8: ld   (ix+$1a),$2F]
	move.b	(character_x_00,a2),d0          	| [$5bfc: ld   a,(ix+character_x_00)]
	cmp.b	#0x7D,d0                         	| [$5bff: cp   $7D]
	bcc.b	0f                               	| [...]
	rts                                    	| [$5c01: ret  c] [...]
0:
	move.b	#0xC2,(0x1a,a2)                 	| [$5c02: ld   (ix+$1a),$C2]
	rts                                    	| [$5c06: ret]
l_5c07:
	move.b	player_structure_851A+current_floor_07(a6),d0	| [$5c07: ld   a,(player_structure_851A+current_floor_07)]
	cmp.b	#0x12,d0                         	| [$5c0a: cp   $12]
	jne	l_5c1e                             	| [$5c0c: jr   nz,$5C1E]
	move.b	player_structure_851A(a6),d0    	| [$5c0e: ld   a,(player_structure_851A)]
	cmp.b	#0x7D,d0                         	| [$5c11: cp   $7D]
	jcc	l_5c2c                             	| [$5c13: jr   nc,$5C2C]
	move.b	#0x2F,(0x1a,a2)                 	| [$5c15: ld   (ix+$1a),$2F]
	move.b	#0x0B,(0x1c,a2)                 	| [$5c19: ld   (ix+$1c),$0B]
	rts                                    	| [$5c1d: ret]
l_5c1e:
	move.b	#0x2F,(0x1a,a2)                 	| [$5c1e: ld   (ix+$1a),$2F]
	move.b	#0x0B,(0x1c,a2)                 	| [$5c22: ld   (ix+$1c),$0B]
	move.b	current_enemy_index_85BA(a6),d0 	| [$5c26: ld   a,(current_enemy_index_85BA)]
	and.b	#0x01,d0                         	| [$5c29: and  $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$5c2b: ret  z] [...]
0:
l_5c2c:
	move.b	#0xC2,(0x1a,a2)                 	| [$5c2c: ld   (ix+$1a),$C2]
	move.b	#0x0B,(0x1c,a2)                 	| [$5c30: ld   (ix+$1c),$0B]
	rts                                    	| [$5c34: ret]
l_5c35:
	move.b	#0x18,(0x1a,a2)                 	| [$5c35: ld   (ix+$1a),$18]
	move.b	(character_x_00,a2),d0          	| [$5c39: ld   a,(ix+character_x_00)]
	cmp.b	#0x91,d0                         	| [$5c3c: cp   $91]
	bcc.b	0f                               	| [...]
	rts                                    	| [$5c3e: ret  c] [...]
0:
	move.b	#0xD8,(0x1a,a2)                 	| [$5c3f: ld   (ix+$1a),$D8]
	rts                                    	| [$5c43: ret]

l_5c44:
	move.b	l_802D(a6),d0                   	| [$5c44: ld   a,($802D)]
	lsl.b	#5,d0                            	| [$5c47: add  a,a]
												| [$5c48: add  a,a]
												| [$5c49: add  a,a]
												| [$5c4a: add  a,a]
												| [$5c4b: add  a,a] times 32
	add.b	#0x38,d0                         	| [$5c4c: add  a,$38]
	move.b	d0,(0x1a,a2)                    	| [$5c4e: ld   (ix+$1a),a]
	rts                                    	| [$5c51: ret]

l_5c52:
	move.b	#0x03,(0x1c,a2)                 	| [$5c52: ld   (ix+$1c),$03]
	move.b	#0x01,(0x1e,a2)                 	| [$5c56: ld   (ix+$1e),$01]
	move.b	#0x78,(0x1a,a2)                 	| [$5c5a: ld   (ix+$1a),$78]
	move.b	(current_floor_07,a2),d0        	| [$5c5e: ld   a,(ix+current_floor_07)]
	cmp.b	#0x14,d0                         	| [$5c61: cp   $14] 20th floor
	jeq	l_5caf                             	| [$5c63: jr   z,$5CAF]
	bcs.b	0f                               	| [...]
	rts                                    	| [$5c65: ret  nc] [...]
0:
	cmp.b	#0x12,d0                         	| [$5c66: cp   $12] 18th floor
	jeq	l_5d00                             	| [$5c68: jp   z,$5D00]
	jcc	l_5cd2                             	| [$5c6b: jp   nc,$5CD2]
	tst.b	d0                             	| [$5c6e: or   a]
	jeq	l_5c44                             	| [$5c6f: jp   z,$5C44]
	add.b	d0,d0                            	| [$5c72: add  a,a]
	move.b	d0,d4                           	| [$5c73: ld   e,a]
	move.b	current_enemy_index_85BA(a6),d0 	| [$5c74: ld   a,(current_enemy_index_85BA)]
	and.b	#0x01,d0                         	| [$5c77: and  $01]
	add.b	d4,d0                            	| [$5c79: add  a,e]
	moveq   #0,d3                               	| [$5c7b: ld   d,$00]
	move.b	d0,d3                           	| [$5c7a: ld   e,a]
	lea	table_5C8D-2,a0                    	| [$5c7d: ld   hl,table_5C8D-2] TODO looks fishy
	add.w	d3,a0                            	| [$5c80: add  hl,de]
 	move.b	(a0),d0                         	| [$5c81: ld   a,(hl)]
	move.b	d0,(0x1a,a2)                    	| [$5c82: ld   (ix+$1a),a]
	cmp.b	#0xE7,d0                         	| [$5c85: cp   $E7]
	beq.b	0f                               	| [...]
	rts                                    	| [$5c87: ret  nz] [...]
0:
	move.b	#0x0B,(0x1c,a2)                 	| [$5c88: ld   (ix+$1c),$0B]
	rts                                    	| [$5c8c: ret]
table_5C8D:
	.byte	0x58
	.byte	0x98
	.byte	0x58
	.byte	0x98
	.byte	0x58
	.byte	0x98
	.byte	0x58
	.byte	0x98
	.byte	0x58
	.byte	0x98
	.byte	0x58
	.byte	0x98
	.byte	0x58
	.byte	0x98
	.byte	0x18,0xD8
	.byte	0x18,0xD8
	.byte	0x18,0xD8
	.byte	0x18,0xD8
	.byte	0x78
	.byte	0xD8
	.byte	0xD8
	.byte	0xD8
	.byte	0x18,0x18
	.byte	0x18,0x18
	.byte	0x78
	.byte	0x78
	.byte	0x78
	.byte	0xE7
	.align	2

l_5caf:
	move.b	(character_x_00,a2),d0          	| [$5caf: ld   a,(ix+character_x_00)]
	cmp.b	#0xAC,d0                         	| [$5cb2: cp   $AC]
	jcc	l_5cc9                             	| [$5cb4: jr   nc,$5CC9]
	move.b	current_enemy_index_85BA(a6),d0 	| [$5cb6: ld   a,(current_enemy_index_85BA)]
	move.b	#0x78,(0x1a,a2)                 	| [$5cb9: ld   (ix+$1a),$78]
	and.b	#0x01,d0                         	| [$5cbd: and  $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$5cbf: ret  nz] [...]
0:
	move.b	#0x0B,(0x1c,a2)                 	| [$5cc0: ld   (ix+$1c),$0B]
	move.b	#0x09,(0x1a,a2)                 	| [$5cc4: ld   (ix+$1a),$09]
	rts                                    	| [$5cc8: ret]
l_5cc9:
	move.b	#0xE7,(0x1a,a2)                 	| [$5cc9: ld   (ix+$1a),$E7]
	move.b	#0x0B,(0x1c,a2)                 	| [$5ccd: ld   (ix+$1c),$0B]
	rts                                    	| [$5cd1: ret]
l_5cd2:
	move.b	player_structure_851A+current_floor_07(a6),d0	| [$5cd2: ld   a,(player_structure_851A+current_floor_07)]
	cmp.b	#0x12,d0                         	| [$5cd5: cp   $12]
	jne	l_5ce9                             	| [$5cd7: jr   nz,$5CE9]
	move.b	player_structure_851A(a6),d0    	| [$5cd9: ld   a,(player_structure_851A)]
	cmp.b	#0x7D,d0                         	| [$5cdc: cp   $7D]
	jcc	l_5cf7                             	| [$5cde: jr   nc,$5CF7]
	move.b	#0x09,(0x1a,a2)                 	| [$5ce0: ld   (ix+$1a),$09]
	move.b	#0x0B,(0x1c,a2)                 	| [$5ce4: ld   (ix+$1c),$0B]
	rts                                    	| [$5ce8: ret]
l_5ce9:
	move.b	#0x09,(0x1a,a2)                 	| [$5ce9: ld   (ix+$1a),$09]
	move.b	#0x0B,(0x1c,a2)                 	| [$5ced: ld   (ix+$1c),$0B]
	move.b	current_enemy_index_85BA(a6),d0 	| [$5cf1: ld   a,(current_enemy_index_85BA)]
	and.b	#0x01,d0                         	| [$5cf4: and  $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$5cf6: ret  z] [...]
0:
l_5cf7:
	move.b	#0xE7,(0x1a,a2)                 	| [$5cf7: ld   (ix+$1a),$E7]
	move.b	#0x0B,(0x1c,a2)                 	| [$5cfb: ld   (ix+$1c),$0B]
	rts                                    	| [$5cff: ret]
l_5d00:
	move.b	#0x09,(0x1a,a2)                 	| [$5d00: ld   (ix+$1a),$09]
	move.b	#0x0B,(0x1c,a2)                 	| [$5d04: ld   (ix+$1c),$0B]
	move.b	(character_x_00,a2),d0          	| [$5d08: ld   a,(ix+character_x_00)]
	cmp.b	#0x7D,d0                         	| [$5d0b: cp   $7D]
	bcc.b	0f                               	| [...]
	rts                                    	| [$5d0d: ret  c] [...]
0:
	move.b	#0xE7,(0x1a,a2)                 	| [$5d0e: ld   (ix+$1a),$E7]
	rts                                    	| [$5d12: ret]
player_and_enemy_same_floor_5d13:
	move.b	(current_floor_07,a2),d0                    	| [$5d13: ld   a,(ix+$07)]
	cmp.b	#0x14,d0                         	| [$5d16: cp   $14]
	jeq	l_5d34                             	| [$5d18: jr   z,$5D34]
	cmp.b	#0x12,d0                         	| [$5d1a: cp   $12]
	jne	l_5d47                             	| [$5d1c: jp   nz,$5D47]
	move.b	player_structure_851A+character_x_00(a6),d0    	| [$5d1f: ld   a,(player_structure_851A)]
	sub.b	#0x7B,d0                         	| [$5d22: sub  $7B]
	roxl.b	#1,d0                           	| [$5d24: rla]
	move.b	d0,d1                           	| [$5d25: ld   b,a]
	move.b	(character_x_00,a2),d0          	| [$5d26: ld   a,(ix+character_x_00)]
	sub.b	#0x7B,d0                         	| [$5d29: sub  $7B]
	roxl.b	#1,d0                           	| [$5d2b: rla]
	eor.b	d1,d0                            	| [$5d2c: xor  b]
	and.b	#0x01,d0                         	| [$5d2d: and  $01]
	jne	l_5c52                             	| [$5d2f: jp   nz,$5C52]
	jra	l_5d47                             	| [$5d32: jr   $5D47]
l_5d34:
	move.b	player_structure_851A+character_x_00(a6),d0    	| [$5d34: ld   a,(player_structure_851A)]
	sub.b	#0xAB,d0                         	| [$5d37: sub  $AB]
	roxl.b	#1,d0                           	| [$5d39: rla]
	move.b	d0,d1                           	| [$5d3a: ld   b,a]
	move.b	(character_x_00,a2),d0          	| [$5d3b: ld   a,(ix+character_x_00)]
	sub.b	#0xAB,d0                         	| [$5d3e: sub  $AB]
	roxl.b	#1,d0                           	| [$5d40: rla]
	eor.b	d1,d0                            	| [$5d41: xor  b]
	and.b	#0x01,d0                         	| [$5d42: and  $01]
	jne	l_5c52                             	| [$5d44: jp   nz,$5C52]
l_5d47:
	move.b	#0x0D,(0x1c,a2)                 	| [$5d47: ld   (ix+$1c),$0D]
	jbsr	pseudo_random_with_regsave_1DF5                	| [$5d4b: call pseudo_random_with_regsave_1DF5]
	and.b	#0x0F,d0                         	| [$5d4e: and  $0F]
	add.b	#0x40,d0                         	| [$5d50: add  a,$40]
												| [$5d52: ld   b,a]
												| [$5d56: or   a]
												| [$5d57: ld   a,b]
	tst.b	(current_floor_07,a2)        	    | [$5d53: ld   a,(ix+current_floor_07)]
	jpl	l_5d5d                             	    | [$5d58: jp   p,$5D5D]
	* when does that happen? on ground floor?
	neg.b	d0                               	| [$5d5b: neg]
l_5d5d:
	move.b	d0,(0x1a,a2)                    	| [$5d5d: ld   (ix+$1a),a]
	rts                                    	| [$5d60: ret]

l_5d61:
	jbsr	l_5d8e                            	| [$5d61: call $5D8E]
	move.b	#0x0A,d0                        	| [$5d64: ld   a,$0A]
	move.b	d0,l_850E(a6)                   	| [$5d66: ld   ($850E),a]
	lea	elevator_tile_address_84BC(a6),a0  	| [$5d69: ld   hl,elevator_tile_address_84BC]
	STORE_POINTER	a0,elevator_tile_address_copy_850F(a6)            	| [$5d6c: ld   ($850F),hl]
	lea	l_84A7(a6),a2                      	| [$5d6f: ld   ix,$84A7]
l_5d73:
	jbsr	elevator_stuff_5f44                            	| [$5d73: call $5F44]
	move.w	#0xFFEB,d3                          	| [$5d76: ld   de,$FFEB]
	add.w	d3,a2                            	| [$5d79: add  ix,de]
	move.b	l_850E(a6),d0                   	| [$5d7b: ld   a,($850E)]
	subq.b	#1,d0                           	| [$5d7e: dec  a]
	move.b	d0,l_850E(a6)                   	| [$5d7f: ld   ($850E),a]
	jpl	l_5d73                             	| [$5d82: jp   p,$5D73]
 	LOAD_POINTER	elevator_tile_address_copy_850F(a6),a0             	| [$5d85: ld   hl,($850F)]
 	clr.b	(a0)                             	| [$5d88: ld   (hl),$00]
	jbsr	l_612e                            	| [$5d8a: call $612E]
	rts                                    	| [$5d8d: ret]

l_5d8e:
	jbsr	l_5d95                            	| [$5d8e: call $5D95]
	jbsr	propagate_main_scroll_value_to_elevators_5f29                            	| [$5d91: call $5F29]
	rts                                    	| [$5d94: ret]

l_5d95:
	lea	l_83D5(a6),a2                      	| [$5d95: ld   ix,$83D5]
	lea	elevator_array_837D(a6),a3         	| [$5d99: ld   iy,elevator_array_837D]
	lea	elevator_directions_array_8081(a6),a0	| [$5d9d: ld   hl,elevator_directions_array_8081]
	STORE_POINTER	a0,elevator_directions_array_copy_8511(a6)            	| [$5da0: ld   ($8511),hl]
	clr.b	d0                               	| [$5da3: xor  a]
	move.b	d0,l_850E(a6)                   	| [$5da4: ld   ($850E),a]
l_5da7:
	jbsr	handle_automatic_elevator_directions_5ddb                            	| [$5da7: call $5DDB]
	move.w	#0x0015,d3                      	| [$5daa: ld   de,$0015] 21
	add.w	d3,a2                            	| [$5dad: add  ix,de]
	move.w	#0x0008,d3                      	| [$5daf: ld   de,$0008] 8
	add.w	d3,a3                            	| [$5db2: add  iy,de]
	LOAD_POINTER	elevator_directions_array_copy_8511(a6),a0             	| [$5db4: ld   hl,($8511)]
	addq.w	#2,a0                           	| [$5db7: inc  hl] * 2
	STORE_POINTER	a0,elevator_directions_array_copy_8511(a6)            	| [$5db9: ld   ($8511),hl]
	move.b	l_850E(a6),d0                   	| [$5dbc: ld   a,($850E)]
	addq.b	#1,d0                           	| [$5dbf: inc  a]
	move.b	d0,l_850E(a6)                   	| [$5dc0: ld   ($850E),a]
	cmp.b	#0x07,d0                         	| [$5dc3: cp   $07]
	jne	l_5da7                             	| [$5dc5: jp   nz,$5DA7]
	move.b	l_83E1(a6),d0                   	| [$5dc8: ld   a,($83E1)]
	move.b	d0,l_8474(a6)                   	| [$5dcb: ld   ($8474),a]
	move.b	l_8420(a6),d0                   	| [$5dce: ld   a,($8420)]
	move.b	d0,l_8489(a6)                   	| [$5dd1: ld   ($8489),a]
	move.b	d0,l_849E(a6)                   	| [$5dd4: ld   ($849E),a]
	move.b	d0,l_84B3(a6)                   	| [$5dd7: ld   ($84B3),a]
	rts                                    	| [$5dda: ret]

handle_automatic_elevator_directions_5ddb:
	LOAD_POINTER	elevator_directions_array_copy_8511(a6),a0             	| [$5ddb: ld   hl,($8511)]
	addq.w	#1,a0                           	| [$5dde: inc  hl]
	move.b	(a0),d0                         	| [$5ddf: ld   a,(hl)]
	                             	| [$5de0: or   a]
	jeq	l_5de8                             	| [$5de1: jp   z,$5DE8]
	clr.b	(0x0c,a2)                        	| [$5de4: ld   (ix+$0c),$00]
l_5de8:
	move.b	(0x10,a2),d5                    	| [$5de8: ld   h,(ix+$10)]
	move.b	(0x0f,a2),d6                    	| [$5deb: ld   l,(ix+$0f)]
	LOAD_D5_16_FROM_D5D6
	move.b	(0x0c,a2),d1                    	| [$5dee: ld   c,(ix+$0c)]
	                               	| [$5df1: ld   b,$00]
	ext.w	d1                           	| [$5df3: ld   a,c]
												| [$5df4: or   a]
	                           	| [$5df5: jp   p,$5DFA]
	                              	| [$5df8: ld   b,$FF]
	add.w	d1,d5                            	| [$5dfa: add  hl,bc]
 
	move.w	d5,-(sp)                        	| [$5dfb: push hl]
	jbsr	compute_d3w_from_d5w_5e76                            	| [$5dfc: call $5E76]
	move.w	(sp)+,d1                    	| [$5dff: pop  bc]
	exg	d3,d5                              	| [$5e00: ex   de,hl]
	                               	| [$5e01: xor  a]
	sub.w	d1,d5                            	| [$5e02: sbc  hl,bc]
 	jmi	l_5e49                             	| [$5e04: jp   m,$5E49]
	move.w	d1,d5                           	| [$5e07: ld   h,b]
	                           	| [$5e08: ld   l,c]
	                               	| [$5e09: xor  a]
	sub.w	d3,d5                            	| [$5e0a: sbc  hl,de]
	jmi	l_5e60                             	| [$5e0c: jp   m,$5E60]
	LOAD_D1D2_FROM_D1_16
	move.b	d2,(0x0f,a2)                    	| [$5e0f: ld   (ix+$0f),c]
	move.b	d1,(0x10,a2)                    	| [$5e12: ld   (ix+$10),b]
	LOAD_POINTER	elevator_directions_array_copy_8511(a6),a0             	| [$5e15: ld   hl,($8511)]
 
	addq.w	#1,a0                           	| [$5e18: inc  hl]
	move.b	(a0),d0                         	| [$5e19: ld   a,(hl)]
	subq.b	#1,(a0)                         	| [$5e1a: dec  (hl)]
	tst.b	d0                             	| [$5e1b: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$5e1c: ret  nz] [...]
0:
	addq.b	#1,(a0)                         	| [$5e1d: inc  (hl)]
	move.b	(a3),d0                    	| [$5e1e: ld   a,(iy+$00)]
	add.b	(0x0c,a2),d0                     	| [$5e21: add  a,(ix+$0c)]
	                             	| [$5e24: or   a]
	jeq	l_5e2b                             	| [$5e25: jp   z,$5E2B]
	cmp.b	#0x30,d0                         	| [$5e28: cp   $30]
	beq.b	0f                               	| [...]
	rts                                    	| [$5e2a: ret  nz] [...]
0:
l_5e2b:
	move.b	#0x1E,d1                        	| [$5e2b: ld   b,$1E]
	move.b	l_850E(a6),d0                   	| [$5e2d: ld   a,($850E)]
	subq.b	#0x03,d0                        	| [$5e30: sub  $03]
	jeq	l_5e47                             	| [$5e32: jp   z,$5E47]
	jcc	l_5e3a                             	| [$5e35: jp   nc,$5E3A]
	neg.b	d0                               	| [$5e38: neg]
l_5e3a:
	cmp.b	#0x03,d0                         	| [$5e3a: cp   $03]
	jcc	l_5e47                             	| [$5e3c: jp   nc,$5E47]
	jbsr	pseudo_random_with_regsave_1DF5                	| [$5e3f: call pseudo_random_with_regsave_1DF5]
	and.b	#0x0F,d0                         	| [$5e42: and  $0F]
	addq.b	#0x05,d0                        	| [$5e44: add  a,$05]
	move.b	d0,d1                           	| [$5e46: ld   b,a]
l_5e47:
	move.b	d1,(a0)                         	| [$5e47: ld   (hl),b]
	rts                                    	| [$5e48: ret]
l_5e49:
	move.b	d5,d0                           	| [$5e49: ld   a,l]
	add.b	(0x0c,a2),d0                     	| [$5e4a: add  a,(ix+$0c)]
	move.b	d0,(0x0c,a2)                    	| [$5e4d: ld   (ix+$0c),a]
	add.w	d1,d5                            	| [$5e50: add  hl,bc]
	LOAD_D5D6_FROM_D5_16
 	move.b	d6,(0x0f,a2)                    	| [$5e51: ld   (ix+$0f),l]
	move.b	d5,(0x10,a2)                    	| [$5e54: ld   (ix+$10),h]
	LOAD_POINTER	elevator_directions_array_copy_8511(a6),a0             	| [$5e57: ld   hl,($8511)]
	move.b	#0xFE,(a0)+                      	| [$5e5a: ld   (hl),$FE] sets elevator direction: down
												| [$5e5c: inc  hl]
	clr.b	(a0)                             	| [$5e5d: ld   (hl),$00]
	rts                                    	| [$5e5f: ret]
l_5e60:
	move.b	(0x0c,a2),d0                    	| [$5e60: ld   a,(ix+$0c)]
	sub.b	d5,d0                            	| [$5e63: sub  l]
	move.b	d0,(0x0c,a2)                    	| [$5e64: ld   (ix+$0c),a]
	LOAD_D3D4_FROM_D3_16
	move.b	d4,(0x0f,a2)                    	| [$5e67: ld   (ix+$0f),e]
	move.b	d3,(0x10,a2)                    	| [$5e6a: ld   (ix+$10),d]
	LOAD_POINTER	elevator_directions_array_copy_8511(a6),a0             	| [$5e6d: ld   hl,($8511)]
 
	move.b	#0x02,(a0)+                      	| [$5e70: ld   (hl),$02] sets elevator direction: up
												| [$5e72: inc  hl]
	clr.b	(a0)                             	| [$5e73: ld   (hl),$00]
	rts                                    	    | [$5e75: ret]

* > D3.w
* complex computation to find best distance??
compute_d3w_from_d5w_5e76:
	
	LOAD_WORD	absolute_height_802A(a6),d5             	| [$5e76: ld   hl,($802A)]
	
	move.b	l_850E(a6),d0                   	| [$5e79: ld   a,($850E)]
	                             	| [$5e7c: or   a]
	jeq	l_5efa                             	| [$5e7d: jp   z,$5EFA]
	cmp.b	#0x03,d0                         	| [$5e80: cp   $03]
	jne	l_5e8f                             	| [$5e82: jr   nz,$5E8F]
	move.w	d5,d0                           	| [$5e84: ld   a,h]
	rol.w	#8,d0
	cmp.b	#0x03,d0                         	| [$5e85: cp   $03]
	jne	l_5e8c                             	| [$5e87: jr   nz,$5E8C]
	move.b	d5,d0                           	| [$5e89: ld   a,l]
	cmp.b	#0x60,d0                         	| [$5e8a: cp   $60]
l_5e8c:
	jcc	l_5ed5                             	| [$5e8c: jp   nc,$5ED5]
l_5e8f:
	move.b	(0x14,a2),d3                    	| [$5e8f: ld   d,(ix+$14)]
	move.b	(0x13,a2),d4                    	| [$5e92: ld   e,(ix+$13)]
	LOAD_D3_16_FROM_D3D4
	exg	d3,d5                              	| [$5e95: ex   de,hl]
	move.w	#0x0060,d1                      	| [$5e96: ld   bc,$0060] 96
	add.w	d1,d5                            	| [$5e99: add  hl,bc]
	move.w	d5,d0
	                           	| [$5e9a: ld   a,l]
	sub.w	d3,d0                            	| [$5e9b: sub  e]
	                           	| [$5e9c: ld   a,h]
	                           	| [$5e9d: sbc  a,d]
	jpl	l_5ea2                             	| [$5e9e: jp   p,$5EA2]
	exg	d3,d5                              	| [$5ea1: ex   de,hl]
l_5ea2:
	move.b	(0x12,a2),d3                    	| [$5ea2: ld   d,(ix+$12)]
	move.b	(0x11,a2),d4                    	| [$5ea5: ld   e,(ix+$11)]
	LOAD_D3_16_FROM_D3D4
	move.w	d5,d0                           	| [$5ea8: ld   a,l]
	sub.w	d3,d0                            	| [$5ea9: sub  e]
	                           	| [$5eaa: ld   a,h]
	                           	| [$5eab: sbc  a,d]
	jpl	l_5eb0                             	| [$5eac: jp   p,$5EB0]
	exg	d3,d5                              	| [$5eaf: ex   de,hl]
l_5eb0:
	move.w	#0xFFA0,d5                          	| [$5eb0: ld   hl,$FFA0]
	add.w	d3,d5                            	| [$5eb3: add  hl,de]
 
	move.w	d5,-(sp)                        	| [$5eb4: push hl]
	LOAD_WORD	absolute_height_802A(a6),d5             	| [$5eb5: ld   hl,($802A)]

	move.w	#0x00C0,d3                          	| [$5eb8: ld   de,$00C0]
	move.b	(0x0e,a2),d0                    	| [$5ebb: ld   a,(ix+$0e)]
	                             	| [$5ebe: or   a]
	jeq	l_5ec4                             	| [$5ebf: jr   z,$5EC4]
	move.w	#0x0120,d3                          	| [$5ec1: ld   de,$0120]
l_5ec4:
	add.w	d3,d5                            	| [$5ec4: add  hl,de]
	move.b	(0x12,a2),d3                    	| [$5ec5: ld   d,(ix+$12)]
	move.b	(0x11,a2),d4                    	| [$5ec8: ld   e,(ix+$11)]
	LOAD_D3_16_FROM_D3D4
	move.w	d5,d0                           	| [$5ecb: ld   a,l]
	sub.w	d3,d0                            	| [$5ecc: sub  e]
	                           	| [$5ecd: ld   a,h]
	                           	| [$5ece: sbc  a,d]
 	jpl	l_5ed3                             	| [$5ecf: jp   p,$5ED3]
	exg	d3,d5                              	| [$5ed2: ex   de,hl]
l_5ed3:
	move.w	(sp)+,d5                        	| [$5ed3: pop  hl]
	rts                                    	| [$5ed4: ret]
l_5ed5:
	move.w	#0x03F0,d3                          	| [$5ed5: ld   de,$03F0]
	move.w	d5,d0                           	| [$5ed8: ld   a,l]
	sub.w	d3,d0                            	| [$5ed9: sub  e]
	                           	| [$5eda: ld   a,h]
	                           	| [$5edb: sbc  a,d]
	jpl	l_5ee0                             	| [$5edc: jp   p,$5EE0]
	exg	d3,d5                              	| [$5edf: ex   de,hl]
l_5ee0:
	move.w	#0xFCA0,d3                          	| [$5ee0: ld   de,$FCA0]
	add.w	d3,d5                            	| [$5ee3: add  hl,de]

	move.w	d5,-(sp)                        	| [$5ee4: push hl]
	LOAD_WORD	absolute_height_802A(a6),d5             	| [$5ee5: ld   hl,($802A)]

	move.w	#0x0540,d3                          	| [$5ee8: ld   de,$0540]
	move.w	d5,d0                           	| [$5eeb: ld   a,l]
	sub.w	d3,d0                            	| [$5eec: sub  e]
	                          	| [$5eed: ld   a,h]
	                          	| [$5eee: sbc  a,d]
	jpl	l_5ef3                             	| [$5eef: jp   p,$5EF3]
	exg	d3,d5                              	| [$5ef2: ex   de,hl]
l_5ef3:
	move.w	#0xFD90,d5                          	| [$5ef3: ld   hl,$FD90]
	add.w	d3,d5                            	| [$5ef6: add  hl,de]
 	exg	d3,d5                              	| [$5ef7: ex   de,hl]
	move.w	(sp)+,d5                        	| [$5ef8: pop  hl]
	rts                                    	| [$5ef9: ret]
l_5efa:
	move.b	(0x14,a2),d3                    	| [$5efa: ld   d,(ix+$14)]
	move.b	(0x13,a2),d4                    	| [$5efd: ld   e,(ix+$13)]
	LOAD_D3_16_FROM_D3D4
	move.w 	#0xFFE0,d1                          	| [$5f00: ld   bc,$FFE0]
	add.w	d1,d5                            	| [$5f03: add  hl,bc]
 	move.w	d5,d0                           	| [$5f04: ld   a,l]
	sub.w	d3,d0                            	| [$5f05: sub  e]
	                           	| [$5f06: ld   a,h]
	                           	| [$5f07: sbc  a,d]
 	jpl	l_5f0c                             	| [$5f08: jp   p,$5F0C]
	exg	d3,d5                              	| [$5f0b: ex   de,hl]
l_5f0c:
	exg	d3,d5                              	| [$5f0c: ex   de,hl]
	move.b	(0x12,a2),d5                    	| [$5f0d: ld   h,(ix+$12)]
	move.b	(0x11,a2),d6                    	| [$5f10: ld   l,(ix+$11)]
	LOAD_D5_16_FROM_D5D6
	move.w	#0xFFA0,d1                          	| [$5f13: ld   bc,$FFA0]
	add.w	d1,d5                            	| [$5f16: add  hl,bc]
	move.w	d5,d0                           	| [$5f17: ld   a,l]
	sub.w	d3,d0                            	| [$5f18: sub  e]
	                           	| [$5f19: ld   a,h]
	                           	| [$5f1a: sbc  a,d]
	jpl	l_5f1f                             	| [$5f1b: jp   p,$5F1F]
	exg	d3,d5                              	| [$5f1e: ex   de,hl]
l_5f1f:
	move.w	d3,-(sp)                    	| [$5f1f: push de]
	LOAD_WORD	absolute_height_802A(a6),d5             	| [$5f20: ld   hl,($802A)]

	move.w	#0x0120,d3                          	| [$5f23: ld   de,$0120]
	jra	l_5ec4                             	| [$5f26: jp   $5EC4]
	
	
propagate_main_scroll_value_to_elevators_5f29:
	move.b	main_scroll_value_8005(a6),d2   	| [$5f29: ld   a,(main_scroll_value_8005)]
	                           	| [$5f2c: ld   c,a]
	lea	l_83D5(a6),a2                      	| [$5f2d: ld   ix,$83D5]
	lea	elevator_scroll_array_8513(a6),a0  	| [$5f31: ld   hl,elevator_scroll_array_8513]
	move.w	#0x0015,d3                      	| [$5f34: ld   de,$0015] 21
	move.b	#0x07,d1                        	| [$5f37: ld   b,$07]
* loop on elevators
l_5f39:
	move.b	(0x0f,a2),d0                    	| [$5f39: ld   a,(ix+$0f)]
	add.b	d2,d0                            	| [$5f3c: add  a,c]
	move.b	d0,(a0)+                         	| [$5f3d: ld   (hl),a]
	                           	| [$5f3e: inc  hl]
	add.w	d3,a2                            	| [$5f3f: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_5f39                             	| [$5f41: djnz $5F39]
	rts                                    	| [$5f43: ret]

* < IX (ex: $8492???)
elevator_stuff_5f44:
	jbsr	l_5f96                            	| [$5f44: call $5F96]
	jbsr	l_5fdf                            	| [$5f47: call $5FDF]
	move.b	(1,a2),d5    	| [$5f4a: ld   h,(ix+character_x_right_01)]
	move.b	(0,a2),d6          	| [$5f4d: ld   l,(ix+character_x_00)]
	LOAD_D5_16_FROM_D5D6
	move.b	(3,a2),d3   	| [$5f50: ld   d,(ix+character_y_offset_03)]
	move.b	(2,a2),d4                    	| [$5f53: ld   e,(ix+$02)]
	LOAD_D3_16_FROM_D3D4
												| [$5f56: xor  a]
	sub.w	d3,d5                            	| [$5f57: sbc  hl,de]
	jcc	l_5f75                             	| [$5f59: jp   nc,$5F75]
	move.b	(0xd,a2),d0       	| [$5f5c: ld   a,(ix+move_direction_0d)]
	                             	| [$5f5f: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$5f60: ret  z] [...]
0:
	subq.b	#1,(0xd,a2)       	| [$5f61: dec  (ix+move_direction_0d)]
	move.b	l_850C(a6),d0                   	| [$5f64: ld   a,($850C)]
	move.b	d0,d3                           	| [$5f67: ld   d,a]
	movem.w	d3/d4,-(sp)                    	| [$5f68: push de]
	jbsr	l_6033                            	| [$5f69: call $6033]
	movem.w	(sp)+,d3/d4                    	| [$5f6c: pop  de]
	move.b	l_850D(a6),d0                   	| [$5f6d: ld   a,($850D)]
	cmp.b	d3,d0                            	| [$5f70: cp   d]
	bne.b	0f                               	| [...]
	rts                                    	| [$5f71: ret  z] [...]
0:
	jra	l_6033                             	| [$5f72: jp   $6033]
l_5f75:
	move.b	(0xd,a2),d0       	| [$5f75: ld   a,(ix+move_direction_0d)]
	                             	| [$5f78: or   a]
	jeq	l_5f83                             	| [$5f79: jp   z,$5F83]
	jbsr	l_6028                            	| [$5f7c: call $6028]
	jbsr	l_605a                            	| [$5f7f: call $605A]
	rts                                    	| [$5f82: ret]
l_5f83:
	addq.b	#1,(0xd,a2)       	| [$5f83: inc  (ix+move_direction_0d)]
	move.b	(0x09,a2),d3                    	| [$5f86: ld   d,(ix+$09)]
	jbsr	l_604b                            	| [$5f89: call $604B]
	move.b	(0x0b,a2),d3                    	| [$5f8c: ld   d,(ix+$0b)]
	cmp.b	(0x09,a2),d0                     	| [$5f8f: cp   (ix+$09)]
	bne.b	0f                               	| [...]
	rts                                    	| [$5f92: ret  z] [...]
0:
	jra	l_604b                             	| [$5f93: jp   $604B]
	
	
l_5f96:
	LOAD_WORD	l_8028(a6),d5             	| [$5f96: ld   hl,($8028)]
	move.w	d5,d1                           	| [$5f99: ld   b,h]
	move.b	(0x05,a2),d3    	| [$5f9b: ld   d,(ix+character_delta_x_05)]
	move.b	(0x04,a2),d4                    	| [$5f9e: ld   e,(ix+$04)]
	LOAD_D3_16_FROM_D3D4
	                               	| [$5fa1: xor  a]
	sub.w	d3,d5                            	| [$5fa2: sbc  hl,de]
 	jcc	l_5fa9                             	| [$5fa4: jp   nc,$5FA9]
	move.w	d1,d3                           	| [$5fa7: ld   d,b]
												| [$5fa8: ld   e,c]
l_5fa9:
	LOAD_D3D4_FROM_D3_16
	move.b	(0x01,a2),d5    	| [$5fa9: ld   h,(ix+1)]
	move.b	(a2),d6          	| [$5fac: ld   l,(ix)]
	move.b	d3,(0x01,a2)    	| [$5faf: ld   (ix+character_x_right_01),d]
	move.b	d4,(a2)          	| [$5fb2: ld   (ix+character_x_00),e]
	LOAD_D3_16_FROM_D3D4
	LOAD_D5_16_FROM_D5D6
	exg	d3,d5                              	| [$5fb5: ex   de,hl]
	                               	| [$5fb6: xor  a]
	sub.w	d3,d5                            	| [$5fb7: sbc  hl,de]
	move.b	(0x09,a2),d0          	| [$5fb9: ld   a,(ix+enemy_state_09)]
	move.b	d0,l_850C(a6)                   	| [$5fbc: ld   ($850C),a]
	move.b	d5,d0                           	| [$5fbf: ld   a,l]
	add.b	(0x08,a2),d0   	| [$5fc0: add  a,(ix+associated_elevator_08)]
	sub.b	(0x0c,a2),d0                     	| [$5fc3: sub  (ix+$0c)]
	move.b	d0,(0x08,a2)  	| [$5fc6: ld   (ix+associated_elevator_08),a]
	jmi	l_5fd6                             	| [$5fc9: jp   m,$5FD6]
	sub.b	#0x08,d0                         	| [$5fcc: sub  $08]
	bcc.b	0f                               	| [...]
	rts                                    	| [$5fce: ret  c] [...]
0:
	move.b	d0,(0x08,a2)  	| [$5fcf: ld   (ix+associated_elevator_08),a]
	addq.b	#1,(0x09,a2)          	| [$5fd2: inc  (ix+enemy_state_09)]
	rts                                    	| [$5fd5: ret]
l_5fd6:
	add.b	#0x08,d0                         	| [$5fd6: add  a,$08]
	move.b	d0,(0x08,a2)  	| [$5fd8: ld   (ix+associated_elevator_08),a]
	subq.b	#1,(0x09,a2)          	| [$5fdb: dec  (ix+enemy_state_09)]
	rts                                    	| [$5fde: ret]
	
* < IX: 847D??
l_5fdf:
	LOAD_WORD	absolute_height_802A(a6),d5             	| [$5fdf: ld   hl,($802A)]

	move.w	d5,d1                           	| [$5fe2: ld   b,h]
	                           	| [$5fe3: ld   c,l]
	move.b	(7,a2),d3        	| [$5fe4: ld   d,(ix+current_floor_07)]
	move.b	(6,a2),d4  	| [$5fe7: ld   e,(ix+character_situation_06)]
	LOAD_D3_16_FROM_D3D4
	                               	| [$5fea: xor  a]
	sub.w	d3,d5                            	| [$5feb: sbc  hl,de]
	jcs	l_5ff2                             	| [$5fed: jp   c,$5FF2]
	move.w	d1,d3                           	| [$5ff0: ld   d,b]
											| [$5ff1: ld   e,c]
l_5ff2:
	move.b	(0x03,a2),d5   	| [$5ff2: ld   h,(ix+character_y_offset_03)]
	move.b	(0x02,a2),d6                    	| [$5ff5: ld   l,(ix+$02)]
	LOAD_D5_16_FROM_D5D6
	
	move.b	d3,(0x02,a2)                    	| [$5ffb: ld   (ix+$02),e]
	rol.w	#8,d3
	move.b	d3,(0x03,a2)   	| [$5ff8: ld   (ix+character_y_offset_03),d]
	rol.w	#8,d3
	exg	d3,d5                              	| [$5ffe: ex   de,hl]
	                               	| [$5fff: xor  a]
	sub.w	d3,d5                            	| [$6000: sbc  hl,de]
 	move.b	(0x0b,a2),d0                    	| [$6002: ld   a,(ix+$0b)]
	move.b	d0,l_850D(a6)                   	| [$6005: ld   ($850D),a]
	move.b	d5,d0                           	| [$6008: ld   a,l]
	add.b	(0x0a,a2),d0                     	| [$6009: add  a,(ix+$0a)]
	sub.b	(0x0c,a2),d0                     	| [$600c: sub  (ix+$0c)]
	move.b	d0,(0x0a,a2)                    	| [$600f: ld   (ix+$0a),a]
	jmi	l_601f                             	| [$6012: jp   m,$601F]
	sub.b	#0x08,d0                         	| [$6015: sub  $08]
	bcc.b	0f                               	| [...]
	rts                                    	| [$6017: ret  c] [...]
0:
	move.b	d0,(0x0a,a2)                    	| [$6018: ld   (ix+$0a),a]
	addq.b	#1,(0x0b,a2)                    	| [$601b: inc  (ix+$0b)]
	rts                                    	| [$601e: ret]
l_601f:
	add.b	#0x08,d0                         	| [$601f: add  a,$08]
	move.b	d0,(0x0a,a2)                    	| [$6021: ld   (ix+$0a),a]
	subq.b	#1,(0x0b,a2)                    	| [$6024: dec  (ix+$0b)]
	rts                                    	| [$6027: ret]
l_6028:
	move.b	l_850C(a6),d0                   	| [$6028: ld   a,($850C)]
	move.b	(0x09,a2),d3                    	| [$602b: ld   d,(ix+$09)]
	cmp.b	d3,d0                            	| [$602e: cp   d]
	bne.b	0f                               	| [...]
	rts                                    	| [$602f: ret  z] [...]
0:
	jmi	l_604b                             	| [$6030: jp   m,$604B]
l_6033:
	move.b	d0,d2                           	| [$6033: ld   c,a]
	move.b	l_850E(a6),d0                   	| [$6034: ld   a,($850E)]
	move.b	d0,d1                           	| [$6037: ld   b,a]
	jbsr	l_6068                            	| [$6038: call $6068]
	LOAD_POINTER	elevator_tile_address_copy_850F(a6),a0             	| [$603b: ld   hl,($850F)]

	clr.b	(a0)+                             	| [$603e: ld   (hl),$00]
	                           	| [$6040: inc  hl]
	clr.b	(a0)+                             	| [$6041: ld   (hl),$00]
	                           	| [$6043: inc  hl]
	clr.b	(a0)+                             	| [$6044: ld   (hl),$00]
	                           	| [$6046: inc  hl]
	STORE_POINTER	a0,elevator_tile_address_copy_850F(a6)            	| [$6047: ld   ($850F),hl]
	rts                                    	| [$604a: ret]
l_604b:
	move.b	d3,d2                           	| [$604b: ld   c,d]
	move.b	l_850E(a6),d0                   	| [$604c: ld   a,($850E)]
	move.b	d0,d1                           	| [$604f: ld   b,a]
	jbsr	l_6068                            	| [$6050: call $6068]
	move.b	(0x0e,a2),d1                    	| [$6053: ld   b,(ix+$0e)]
	jbsr	l_60ad                            	| [$6056: call $60AD]
	rts                                    	| [$6059: ret]
l_605a:
	move.b	l_850D(a6),d0                   	| [$605a: ld   a,($850D)]
	move.b	(0x0b,a2),d3                    	| [$605d: ld   d,(ix+$0b)]
	cmp.b	d3,d0                            	| [$6060: cp   d]
	bne.b	0f                               	| [...]
	rts                                    	| [$6061: ret  z] [...]
0:
	jpl	l_604b                             	| [$6062: jp   p,$604B]
	jra	l_6033                             	| [$6065: jp   $6033]

* < d1/d2
l_6068:
	movem.w	d1/d2,-(sp)                    	| [$6068: push bc]
	lea	table_6097(pc),a0                          	| [$6069: ld   hl,$6097]
	moveq   #0,d3                               	| [$606c: ld   d,$00]
 	move.b	d1,d3                           	| [$606e: ld   e,b]
	add.w	d3,a0                            	| [$606f: add  hl,de]
	add.w	d3,a0                            	| [$6070: add  hl,de]
	move.b	(a0)+,d4                         	| [$6071: ld   e,(hl)]
	                           	| [$6072: inc  hl]
	move.b	(a0),d3                         	| [$6073: ld   d,(hl)]
	move.b	d2,d5                           	| [$6074: ld   h,c]
	clr.b	d0                               	| [$6075: xor  a]
	asr.b	#1,d5                            	| [$6076: sra  h]
	roxr.b	#1,d0                           	| [$6078: rra]
	asr.b	#1,d5                            	| [$6079: sra  h]
	roxr.b	#1,d0                           	| [$607b: rra]
	asr.b	#1,d5                            	| [$607c: sra  h]
	roxr.b	#1,d0                           	| [$607e: rra]
	move.b	d0,d6                           	| [$607f: ld   l,a]
	LOAD_D5_16_FROM_D5D6
	LOAD_D3_16_FROM_D3D4
	exg	d3,d5                              	| [$6080: ex   de,hl]
	                               	| [$6081: xor  a]
	sub.w	d3,d5                            	| [$6082: sbc  hl,de]
	rol.w	#8,d5			| work on HL/D5 MSB
 	                           	| [$6084: ld   a,h]	
	and.b	#0x03,d5                         	| [$6085: and  $03]
	add.b	#0xCC,d5                         	| [$6087: add  a,$CC]
	                           	| [$6089: ld   h,a]
	rol.w	#8,d5           | restore MSB
	exg	d3,d5                              	| [$608a: ex   de,hl]
	LOAD_POINTER	elevator_tile_address_copy_850F(a6),a0             	| [$608b: ld   hl,($850F)]
	LOAD_D3D4_FROM_D3_16
	move.b	d3,(a0)+                         	| [$608e: ld   (hl),d]
	                           	| [$608f: inc  hl]
	move.b	d4,(a0)+                         	| [$6090: ld   (hl),e]
	                           	| [$6091: inc  hl]
	STORE_POINTER	a0,elevator_tile_address_copy_850F(a6)            	| [$6092: ld   ($850F),hl]
	movem.w	(sp)+,d1/d2                    	| [$6095: pop  bc]
	rts                                    	| [$6096: ret]

table_6097:
	.byte	0x82
	.byte	0x01,0x86,0x01
	.byte	0x8A
	.byte	0x01,0x8E,0x01
	.byte	0x92
	.byte	0x01,0x96,0x01
	.byte	0x9A
	.byte	0x01,0x82,0x02
	.byte	0x4E
	.byte	0x00
	.byte	0x8E
	.byte	0x00
	.byte	0x8E
	.byte	0x01

l_60ad:
	move.b	#0x07,d3                        	| [$60ad: ld   d,$07]
	move.b	d2,d0                           	| [$60af: ld   a,c]
	subq.b	#1,d1                           	| [$60b0: dec  b]
	jne	l_60b8                             	| [$60b1: jp   nz,$60B8]
	move.b	#0x13,d3                        	| [$60b4: ld   d,$13]
	add.b	#0x0C,d0                         	| [$60b6: add  a,$0C]
l_60b8:
	lea	table_60DE+0x12A-0xDE,a0                          	| [$60b8: ld   hl,$612A]
	tst.b	d0                             	| [$60bb: or   a]
	jmi	l_60cf                             	| [$60bc: jp   m,$60CF]
	lea	table_60DE+0xFA-0xDE,a0                          	| [$60bf: ld   hl,$60FA]
	cmp.b	d3,d0                            	| [$60c2: cp   d]
	jcc	l_60cf                             	| [$60c3: jp   nc,$60CF]
	clr.w	d5                               	| [$60c6: ld   h,$00]
	add.b	d0,d0                            	| [$60c8: add  a,a]
	add.b	d0,d0                            	| [$60c9: add  a,a]
	move.b	d0,d5                           	| [$60ca: ld   l,a]
	lea	table_60DE,a0                      	    | [$60cb: ld   de,table_60DE]
	add.w	d5,a0                            	| [$60ce: add  hl,de]
l_60cf:
	LOAD_POINTER	elevator_tile_address_copy_850F(a6),a1             	| [$60cf: ld   de,($850F)]
	move.b	(a0)+,(a1)+                               	| [$60d3: ldi]
	move.b	(a0)+,(a1)+                               	| [$60d5: ldi]
	move.b	(a0)+,(a1)+                               	| [$60d7: ldi]
	STORE_POINTER	a1,elevator_tile_address_copy_850F(a6)            	| [$60d9: ld   ($850F),de]
	rts                                    	| [$60dd: ret]

table_60DE:
	.byte	0x3A
	.byte	0xFC
	.byte	0x38
	.byte	0x00
	.byte	0x3B
	.byte	0x3B
	.byte	0x3B
	.byte	0x00
	.byte	0x3B
	.byte	0x3B
	.byte	0x3B
	.byte	0x00
	.byte	0x3B
	.byte	0x3B
	.byte	0x3B
	.byte	0x00
	.byte	0x3B
	.byte	0x3B
	.byte	0x3B
	.byte	0x00
	.byte	0x3B
	.byte	0x3B
	.byte	0x3B
	.byte	0x00
	.byte	0x3E,0x3D
	.byte	0x3C
	.byte	0x00
	.byte	0x3F
	.byte	0x37
	.byte	0x3F
	.byte	0x00
	.byte	0x3F
	.byte	0x37
	.byte	0x3F
	.byte	0x00
	.byte	0x3F
	.byte	0x37
	.byte	0x3F
	.byte	0x00
	.byte	0x3F
	.byte	0x37
	.byte	0x3F
	.byte	0x00
	.byte	0x3F
	.byte	0x37
	.byte	0x3F
	.byte	0x00
	.byte	0x3A,0xFC,0x38
	.byte	0x00
	.byte	0x3B
	.byte	0x3B
	.byte	0x3B
	.byte	0x00
	.byte	0x3B
	.byte	0x3B
	.byte	0x3B
	.byte	0x00
	.byte	0x3B
	.byte	0x3B
	.byte	0x3B
	.byte	0x00
	.byte	0x3B
	.byte	0x3B
	.byte	0x3B
	.byte	0x00
	.byte	0x3B
	.byte	0x3B
	.byte	0x3B
	.byte	0x00
	.byte	0x3E,0x3D
	.byte	0x3C
	.byte	0x00
	.byte	0x3F
	.byte	0x3F
	.byte	0x3F
	.byte	0x00
	.align	2

l_612e:
	lea	elevator_array_837D(a6),a0         	| [$612e: ld   hl,elevator_array_837D]
	lea	l_83E1(a6),a1                      	| [$6131: ld   de,$83E1]
	move.b	#0x0B,d1                        	| [$6134: ld   b,$0B]
l_6136:
	move.w	d1,-(sp)                    	| [$6136: push bc]
	move.b	(a1),d0                         	| [$6137: ld   a,(de)]
	add.b	(a0),d0                          	| [$6138: add  a,(hl)]
	move.b	d0,(a0)                         	| [$6139: ld   (hl),a]
	jmi	l_6154                             	| [$613a: jp   m,$6154]
	sub.b	#0x30,d0                         	| [$613d: sub  $30]
	jcs	l_6146                             	| [$613f: jp   c,$6146]
	move.b	d0,(a0)+                         	| [$6142: ld   (hl),a]
	                           	| [$6143: inc  hl]
	addq.b	#1,(a0)                         	| [$6144: inc  (hl)]
l_6145:
	subq.w	#1,a0                           	| [$6145: dec  hl]
l_6146:
	move.w	#0x0008,d1                      	| [$6146: ld   bc,$0008] 8
	add.w	d1,a0                            	| [$6149: add  hl,bc]
	exg	a1,a0                              	| [$614a: ex   de,hl]
	move.w	#0x0015,d1                      	| [$614b: ld   bc,$0015] 21
	add.w	d1,a0                            	| [$614e: add  hl,bc]
	exg	a1,a0                              	| [$614f: ex   de,hl]
	move.w	(sp)+,d1                    	| [$6150: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_6136                             	| [$6151: djnz $6136]
	rts                                    	| [$6153: ret]

l_6154:
	add.b	#0x30,d0                         	| [$6154: add  a,$30]
	move.b	d0,(a0)+                         	| [$6156: ld   (hl),a]
												| [$6157: inc  hl]
	subq.b	#1,(a0)                         	| [$6158: dec  (hl)]
	jra	l_6145                             	| [$6159: jp   $6145]

animate_elevators_615C:
	jbsr	set_elevator_column_scroll_6163   	| [$615c: call set_elevator_column_scroll_6163]
	jbsr	feed_elevator_columns_6177        	| [$615f: call feed_elevator_columns_6177]
	rts                                    	| [$6162: ret]

set_elevator_column_scroll_6163:
	    	| [$6163: ld   hl,column_scroll_layer_3_D040+2]
	lea	elevator_scroll_array_8513(a6),a1  	| [$6166: ld   de,elevator_scroll_array_8513]
	moveq	#0,d1                        	| [$6169: ld   b,$07] 4*7 = 28 columns, set 3 out of 4
l_616b:
	move.b	(a1)+,d0                         	| [$616b: ld   a,(de)]
	jbsr	osd_set_column_scroll                         	| [$616c: ld   (hl),a]
	           	| [$616d: inc  hl]
	                         	| [$616e: ld   (hl),a]
	           	| [$616f: inc  hl]
	                         	| [$6170: ld   (hl),a]
	                           	| [$6171: inc  hl] * 2
	                           	| [$6173: inc  de]
	addq.b	#1,d1                           	| [...]
	cmp.b	#7,d1
	jne	l_616b                             	| [$6174: djnz $616B]
	rts                                    	| [$6176: ret]

feed_elevator_columns_6177:
	lea	elevator_tile_address_84BC(a6),a0  	| [$6177: ld   hl,elevator_tile_address_84BC]
l_617a:
	move.b	(a0),d0                         	| [$617a: ld   a,(hl)]
	                             	| [$617b: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$617c: ret  z] [...]
0:
* not zero: copy to update elevator tile columns
	move.b	d0,d3                           	| [$617d: ld   d,a]
	addq.w	#1,a0                           	| [$617e: inc  hl]
	move.b	(a0)+,d4                         	| [$617f: ld   e,(hl)]
	                           	| [$6180: inc  hl]
	LOAD_D3_16_FROM_D3D4
	* D3 is now a screen address 0xCCxx
	move.l	a6,a1
	sub.w	#0x8000,d3
	add.w	d3,a1
	exg	a0,a1
	.rept	3
	move.b	(a1)+,d0                               	| [$6181: ldi]
 	jbsr	osd_w_videoram                               	| [$6183: ldi]
	addq	#1,a0
	.endr
 	                               	| [$6185: ldi]
	exg	a0,a1
	jra	l_617a                             	| [$6187: jp   $617A]

l_618a:
	move.b	(enemy_state_09,a2),d0                    	| [$618a: ld   a,(ix+$09)]
	addq.b	#1,d0                           	| [$618d: inc  a]
	jeq	disable_enemy_sprite_61e4                             	| [$618e: jr   z,$61E4]
	jbsr	l_620c                            	| [$6190: call $620C]
	move.b	d5,d0                           	| [$6193: ld   a,h]
	                             	| [$6194: or   a]
	jne	l_61c3                             	| [$6195: jp   nz,$61C3]
	move.b	d6,d0                           	| [$6198: ld   a,l]
	cmp.b	#0x18,d0                         	| [$6199: cp   $18]
	jcs	l_61c3                             	| [$619b: jp   c,$61C3]
	cmp.b	#0xE8,d0                         	| [$619e: cp   $E8]
	jcc	l_61c3                             	| [$61a0: jp   nc,$61C3]
	move.b	d6,d0                           	| [$61a3: ld   a,l]
	move.b	d0,(0x16,a2)                    	| [$61a4: ld   (ix+$16),a]
	add.b	(character_y_offset_down_02,a2),d0                     	| [$61a7: add  a,(ix+$02)]
	sub.b	(character_y_offset_03,a2),d0    	| [$61aa: sub  (ix+character_y_offset_03)]
	move.b	d0,(0x15,a2)                    	| [$61ad: ld   (ix+$15),a]

	move.l	a0,-(sp)                        	| [$61b0: push hl]
	jbsr	l_6247                            	| [$61b1: call $6247]
	move.l	(sp)+,a0                        	| [$61b4: pop  hl]
	move.b	d6,d1                           	| [$61b5: ld   b,l]
	LOAD_POINTER	ram_pointer_85BF(a6),a0             	| [$61b6: ld   hl,($85BF)]
	* characters have 2 parts, upper and lower
 	jbsr	update_character_graphic_properties_61f0           | [$61b9: call $61F0] update character body (when walking)
	jbsr	update_character_graphic_properties_61f0           | [$61bc: call $61F0] update character head (when walking)
	jbsr	l_629c                            	| [$61bf: call $629C]
	rts                                    	| [$61c2: ret]

l_61c3:
	LOAD_POINTER	ram_pointer_85BF(a6),a0             	| [$61c3: ld   hl,($85BF)]
	st.b	d0                                	| [$61c6: ld   a,$FF]
	move.b	d0,(a0)                         	| [$61c8: ld   (hl),a]
	move.w	#0x0005,d3                      	| [$61c9: ld   de,$0005] 5
	add.w	d3,a0                            	| [$61cc: add  hl,de]
	move.b	d0,(a0)                         	| [$61cd: ld   (hl),a]
	move.b	d0,(character_display_priority_04,a2)                    	| [$61ce: ld   (ix+$04),a]
	move.b	d0,(enemy_state_09,a2)                    	| [$61d1: ld   (ix+$09),a]
	clr.b	(0x10,a2)                        	| [$61d4: ld   (ix+$10),$00]
	move.b	(character_situation_06,a2),d0  	| [$61d8: ld   a,(ix+character_situation_06)]
	cmp.b	#CS_IN_STAIRS_04,d0                         	| [$61db: cp   $04]
	beq.b	0f                               	| [...]
	rts                                    	| [$61dd: ret  nz] [...]
0:
	LOAD_POINTER	ram_pointer_85BB(a6),a0             	| [$61de: ld   hl,($85BB)]
 	st	(a0)                      	| [$61e1: ld   (hl),$FF]
	rts                                    	| [$61e3: ret]

disable_enemy_sprite_61e4:
	LOAD_POINTER	ram_pointer_85BF(a6),a0             	| [$61e4: ld   hl,($85BF)]
 	st.b	d0                                	| [$61e7: ld   a,$FF]
	move.b	d0,(a0)                         	| [$61e9: ld   (hl),a]
	move.w	#0x0005,d3                      	| [$61ea: ld   de,$0005] 5
	add.w	d3,a0                            	| [$61ed: add  hl,de]
	move.b	d0,(a0)                         	| [$61ee: ld   (hl),a]
	rts                                    	| [$61ef: ret]

* < A0: output buffer for graphic properties	
* < A1: pointer on a table of properties for character
* < A2: character structure (player or enemy)
* < D1/D2
* (tile code, etc...)

update_character_graphic_properties_61f0:
	move.b	(character_display_priority_04,a2),d0 | [$61f0: ld   a,(ix+$04)]
	move.b	d0,(a0)+                         	  | [$61f3: ld   (hl),a] priority
	                           	                  | [$61f4: inc  hl]
	move.b	(a1)+,d0                         	  | [$61f5: ld   a,(de)]
	add.b	(character_x_00,a2),d0           	  | [$61f6: add  a,(ix+character_x_00)]
	move.b	d0,(a0)+                         	  | [$61f9: ld   (hl),a] X
	                           	                  | [$61fa: inc  de]
	                           	                  | [$61fb: inc  hl]
	move.b	(a1)+,d0                         	  | [$61fc: ld   a,(de)]
	add.b	d1,d0                            	  | [$61fd: add  a,b]
	move.b	d0,(a0)+                         	  | [$61fe: ld   (hl),a] Y
	                                         	  | [$61ff: inc  de]
	                                         	  | [$6200: inc  hl]
	move.b	d2,(a0)                         	  | [$6201: ld   (hl),c]
	move.b	(a1)+,d0                         	  | [$6202: ld   a,(de)]
	or.b	d2,d0                             	  | [$6203: or   c]
	move.b	d0,(a0)+                         	  | [$6204: ld   (hl),a] attribute
	                                        	  | [$6205: inc  de]
	                                        	  | [$6206: inc  hl]
	move.b	(a1)+,(a0)+                         	  | [$6207: ld   a,(de)]
	                         	  | [$6208: ld   (hl),a] code
	                                        	  | [$6209: inc  de]
	                                        	  | [$620a: inc  hl]
	rts                                    	      | [$620b: ret]

l_620c:
	move.b	(character_situation_06,a2),d0  	| [$620c: ld   a,(ix+character_situation_06)]
	subq.b	#1,d0                           	| [$620f: dec  a]
	jeq	l_6222                             	| [$6210: jp   z,$6222]
* not in elevator
	subq.b	#1,d0                           	| [$6213: dec  a]
	jeq	l_622b                             	| [$6214: jp   z,$622B]
	move.b	(0x07,a2),d1                    	| [$6217: ld   b,(ix+$07)]
	clr.b	d2                               	| [$621a: ld   c,$00]
	move.b	(character_y_offset_03,a2),d3   	| [$621c: ld   d,(ix+character_y_offset_03)]
	jra	compute_delta_height_1e6c                             	| [$621f: jp   $1E6C]
l_6222:
	jbsr	load_character_elevator_structure_62CE	| [$6222: call load_character_elevator_structure_62CE]
	move.b	(0x01,a3),d1                    	| [$6225: ld   b,(iy+$01)]
	jra	l_6232                             	| [$6228: jp   $6232]
l_622b:
	jbsr	load_character_elevator_structure_62CE	| [$622b: call load_character_elevator_structure_62CE]
	move.b	(0x01,a3),d1                    	| [$622e: ld   b,(iy+$01)]
	addq.b	#1,d1                           	| [$6231: inc  b]
l_6232:
	clr.b	d2                               	| [$6232: ld   c,$00]
	move.b	(a3),d0                    	| [$6234: ld   a,(iy+$00)]
	add.b	(character_y_offset_03,a2),d0    	| [$6237: add  a,(ix+character_y_offset_03)]
	move.b	d0,d3                           	| [$623a: ld   d,a]
	move.b	(associated_elevator_08,a2),d0                    	| [$623b: ld   a,(ix+$08)]
	roxl.b	#1,d0                           	| [$623e: rla]
	jcc	compute_delta_height_1e6c                             	| [$623f: jp   nc,$1E6C]
	subq.b	#2,d1                           	| [$6242: dec  b] * 2
	jra	compute_delta_height_1e6c                             	| [$6244: jp   $1E6C]


l_6247:
	move.b	current_enemy_index_85BA(a6),d0 	| [$6247: ld   a,(current_enemy_index_85BA)]
	move.b	d0,d1                           	| [$624a: ld   b,a]
	clr.b	d0                               	| [$624b: xor  a]
	sub.b	d1,d0                            	| [$624c: sub  b]
	clr.b	d0                               	| [$624d: ld   a,$00]
	roxl.b	#2,d0                           	| [$624f: rla] * 2
	add.b	(character_facing_direction_0b,a2),d0        | [$6251: add  a,(ix+$0b)]
	lsl.b	#4,d0                            	| [$6254: add  a,a]
												| [$6255: add  a,a]
												| [$6256: add  a,a]
												| [$6257: add  a,a]
	add.b	(character_unknown_0c,a2),d0        | [$6258: add  a,(ix+$0c)]
	clr.w	d5                               	| [$625c: ld   h,$00]
	move.b	d0,d5                           	| [$625b: ld   l,a]
	lsl.w	#3,d5                            	| [$625e: add  hl,hl]
 	                            	            | [$625f: add  hl,hl]
	                            	            | [$6260: add  hl,hl]
	lea	character_sprite_code_table_62E2,a1               | [$6261: ld   de,$62E2]
	add.w	d5,a1                            	| [$6264: add  hl,de]
												| [$6265: ex   de,hl]
	clr.b	d2                               	| [$6266: ld   c,$00]
	tst.b	current_enemy_index_85BA(a6) 	| [$6268: ld   a,(current_enemy_index_85BA)]
	                             	| [$626b: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$626c: ret  z] [...]
0:
	move.b	(character_unknown_0c,a2),d0                    	| [$626d: ld   a,(ix+$0c)]
	cmp.b	#0x0D,d0                         	| [$6270: cp   $0D]
	jeq	l_628f                             	| [$6272: jr   z,$628F]
	move.b	(character_situation_06,a2),d0  	| [$6274: ld   a,(ix+character_situation_06)]
	                             	| [$6277: or   a]
	jeq	l_627d                             	| [$6278: jr   z,$627D]
	cmp.b	#0x04,d0                         	| [$627a: cp   $04]
	beq.b	0f                               	| [...]
	rts                                    	| [$627c: ret  nz] [...]
0:
l_627d:
	move.b	building_is_dark_8242(a6),d0                   	| [$627d: ld   a,($8242)]
	                             	| [$6280: or   a]
	jne	l_628c                             	| [$6281: jr   nz,$628C]
	move.b	(current_floor_07,a2),d0                    	| [$6283: ld   a,(ix+$07)]
	cmp.b	#0x10,d0                         	| [$6286: cp   $10]
	bcs.b	0f                               	| [...]
	rts                                    	| [$6288: ret  nc] [...]
0:
	cmp.b	#0x0B,d0                         	| [$6289: cp   $0B]
	bcc.b	0f                               	| [...]
	rts                                    	| [$628b: ret  c] [...]
0:
l_628c:
	move.b	#0x04,d2                        	| [$628c: ld   c,$04]
	rts                                    	| [$628e: ret]

l_628f:
	move.b	(character_x_00,a2),d0          	| [$628f: ld   a,(ix+character_x_00)]
	move.b	d0,(character_x_right_01,a2)    	| [$6292: ld   (ix+character_x_right_01),a]
	move.b	(character_y_offset_03,a2),d0   	| [$6295: ld   a,(ix+character_y_offset_03)]
	move.b	d0,(character_y_offset_down_02,a2)                    	| [$6298: ld   (ix+$02),a]
	rts                                    	| [$629b: ret]
l_629c:
	move.b	current_enemy_index_85BA(a6),d0 	| [$629c: ld   a,(current_enemy_index_85BA)]
	                             	| [$629f: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$62a0: ret  nz] [...]
0:
	move.b	(0x13,a2),d0                    	| [$62a1: ld   a,(ix+$13)]
	                             	| [$62a4: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$62a5: ret  z] [...]
0:
	LOAD_POINTER	ram_pointer_85BF(a6),a0             	| [$62a6: ld   hl,($85BF)]
 	move.w	#0x0004,d3                      	| [$62a9: ld   de,$0004] 4
	add.w	d3,a0                            	| [$62ac: add  hl,de]
	move.b	(a0),d0                         	| [$62ad: ld   a,(hl)]
	sub.b	#0x40,d0                         	| [$62ae: sub  $40]
	jeq	l_62bf                             	| [$62b0: jr   z,$62BF]
	subq.b	#1,d0                           	| [$62b2: dec  a]
	jeq	l_62c2                             	| [$62b3: jr   z,$62C2]
	subq.b	#1,d0                           	| [$62b5: dec  a]
	jeq	l_62c5                             	| [$62b6: jr   z,$62C5]
	subq.b	#1,d0                           	| [$62b8: dec  a]
	jeq	l_62c8                             	| [$62b9: jr   z,$62C8]
	subq.b	#1,d0                           	| [$62bb: dec  a]
	jeq	l_62cb                             	| [$62bc: jr   z,$62CB]
	rts                                    	| [$62be: ret]
l_62bf:
	move.b	#0x08,(a0)                      	| [$62bf: ld   (hl),$08]
	rts                                    	| [$62c1: ret]
l_62c2:
	move.b	#0x30,(a0)                      	| [$62c2: ld   (hl),$30]
	rts                                    	| [$62c4: ret]
l_62c5:
	move.b	#0x7A,(a0)                      	| [$62c5: ld   (hl),$7A]
	rts                                    	| [$62c7: ret]
l_62c8:
	move.b	#0x7B,(a0)                      	| [$62c8: ld   (hl),$7B]
	rts                                    	| [$62ca: ret]
l_62cb:
	move.b	#0x7C,(a0)                      	| [$62cb: ld   (hl),$7C]
	rts                                    	| [$62cd: ret]

* < ix: character structure
* > iy: associated elevator
load_character_elevator_structure_62CE:
	jbsr	exx                               	| [$62ce: exx]
 	move.b	(associated_elevator_08,a2),d0  	| [$62cf: ld   a,(ix+associated_elevator_08)] elevator next to character?
	and.b	#0x7F,d0                         	| [$62d2: and  $7F]
	lsl.b	#3,d0                            	| [$62d4: add  a,a]
												| [$62d5: add  a,a]
												| [$62d6: add  a,a] times 8
	moveq   #0,d3                               	| [$62d7: ld   d,$00]
	move.b	d0,d3                           	| [$62d9: ld   e,a]
	lea	elevator_array_837D(a6),a3         	| [$62da: ld   iy,elevator_array_837D]
	add.w	d3,a3                            	| [$62de: add  iy,de]
	jbsr	exx                               	| [$62e0: exx]
	rts                                    	| [$62e1: ret]

* sprite table with parts of code "hidden" in it, probably inserted there to save space
* because some offsets weren't used?? WTF
*
* if bogus code parts are removed then the table is bogus as further offsets are fucked up
* that's what happened at first where I didn't realize that the table was "multi-part".
*
* we have to respect the full offsets else enemy character sprites are all bogus
* (player sprite codes are at start so were always OK)

character_sprite_code_table_62E2:
	.byte	0xFB,0x00,0x00,0x40,0xFB,0x10,0x00,0x4E,0xFB,0x00,0x00,0x41,0xFA,0x10,0x00,0x4E | 62E2
	.byte	0xFA,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0xFB,0xFE,0x00,0x43,0xFB,0x0E,0x00,0x4E | 62F2
	.byte	0xFB,0x00,0x00,0x49,0xFB,0x10,0x00,0x4F,0xFC,0x00,0x00,0x44,0x00,0x00,0x00,0x00 | 6302
	.byte	0xFD,0x00,0x03,0x44,0x00,0x00,0x00,0x00,0xFB,0x08,0x00,0x45,0x00,0x00,0x00,0x00 | 6312
	.byte	0xFB,0x08,0x00,0x46,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 | 6322
	.byte	0xFD,0x00,0x00,0x4A,0x00,0x00,0x00,0x00,0xFC,0x00,0x00,0x47,0x00,0x00,0x00,0x00 | 6332
	.byte	0xFC,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0xFD,0x00,0x00,0x4B,0x00,0x00,0x00,0x00 | 6342
	.byte	0xFD,0x7E,0x00,0xB7,0xC8,0xDD,0x7E,0x06,0xB7,0xC3,0xD2,0x63,0xFD,0x7E,0x00,0xC9 | 6352 real code! bogus data but not read
	.byte	0xFE,0x00,0x01,0x40,0xFE,0x10,0x01,0x4E,0xFE,0x00,0x01,0x41,0xFF,0x10,0x01,0x4E | 6362
	.byte	0xFF,0x00,0x01,0x42,0x00,0x00,0x00,0x00,0xFE,0xFE,0x01,0x43,0xFE,0x0E,0x01,0x4E | 6372
	.byte	0xFE,0x00,0x01,0x49,0xFE,0x10,0x01,0x4F,0xFD,0x00,0x01,0x44,0x00,0x00,0x00,0x00 | 6382
	.byte	0xFC,0x00,0x02,0x44,0x00,0x00,0x00,0x00,0xFE,0x08,0x01,0x45,0x00,0x00,0x00,0x00 | 6392
	.byte	0xFE,0x08,0x01,0x46,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 | 63A2
	.byte	0xFC,0x00,0x01,0x4A,0x00,0x00,0x00,0x00,0xFD,0x00,0x01,0x47,0x00,0x00,0x00,0x00 | 63B2
	.byte	0xFD,0x00,0x01,0x48,0x00,0x00,0x00,0x00,0xFC,0x00,0x01,0x4B,0x00,0x00,0x00,0x00 | 63C2
	.byte	0xC2,0x08,0x46,0xDD,0x7E,0x03,0xFE,0x07,0xD8,0xC3,0x08,0x46,0xDD,0x7E,0x03,0xD8 | 63D2 real code! bogus data but not read
	.byte	0xFB,0x00,0x00,0x50,0xFB,0x10,0x00,0x5E,0xFB,0x00,0x00,0x51,0xFA,0x10,0x00,0x5E | 63E2
	.byte	0xFA,0x00,0x00,0x52,0x00,0x00,0x00,0x00,0xFB,0xFE,0x00,0x53,0xFB,0x0E,0x00,0x5E | 63F2
	.byte	0xFB,0x00,0x00,0x59,0xFB,0x10,0x00,0x5F,0xFC,0x00,0x00,0x54,0x00,0x00,0x00,0x00 | 6402
	.byte	0xFD,0x00,0x03,0x54,0x00,0x00,0x00,0x00,0xFB,0x08,0x00,0x55,0x00,0x00,0x00,0x00 | 6412
	.byte	0xFB,0x08,0x00,0x56,0x00,0x00,0x00,0x00,0xF6,0x00,0x00,0x5D,0x06,0x00,0x00,0x5C | 6422
	.byte	0xFD,0x00,0x00,0x5A,0x00,0x00,0x00,0x00,0xFC,0x00,0x00,0x57,0x00,0x00,0x00,0x00 | 6432
	.byte	0xFC,0x00,0x00,0x58,0x00,0x00,0x00,0x00,0xFD,0x00,0x00,0x5B,0x00,0x00,0x00,0x00 | 6442
	.byte	0xFA,0x01,0xFF,0x00,0x19,0x00,0x00,0x01,0x6D,0x00,0xA7,0x00,0x53,0x00,0x0A,0x00 | 6452
	.byte	0xFE,0x00,0x01,0x50,0xFE,0x10,0x01,0x5E,0xFE,0x00,0x01,0x51,0xFF,0x10,0x01,0x5E | 6462
	.byte	0xFF,0x00,0x01,0x52,0x00,0x00,0x00,0x00,0xFE,0xFE,0x01,0x53,0xFE,0x0E,0x01,0x5E | 6472
	.byte	0xFE,0x00,0x01,0x59,0xFE,0x10,0x01,0x5F,0xFD,0x00,0x01,0x54,0x00,0x00,0x00,0x00 | 6482
	.byte	0xFC,0x00,0x02,0x54,0x00,0x00,0x00,0x00,0xFE,0x08,0x01,0x55,0x00,0x00,0x00,0x00 | 6492
	.byte	0xFE,0x08,0x01,0x56,0x00,0x00,0x00,0x00,0xFD,0x00,0x01,0x5C,0x0D,0x00,0x01,0x5D | 64A2
	.byte	0xFC,0x00,0x01,0x5A,0x00,0x00,0x00,0x00,0xFD,0x00,0x01,0x57,0x00,0x00,0x00,0x00 | 64B2
	.byte	0xFD,0x00,0x01,0x58,0x00,0x00,0x00,0x00,0xFC,0x00,0x01,0x5B,0x00,0x00,0x00,0x00 | 64C2

* pieces of code "hidden" in the table above, as 68000 code, moved here
l_6352:
	move.b	(a3),d0                    	| [$6352: ld   a,(iy+$00)]
	                             	| [$6355: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$6356: ret  z] [...]
0:
	move.b	(character_situation_06,a2),d0                    	| [$6357: ld   a,(ix+$06)]
	                             	| [$635a: or   a]
	jra	l_63d2                             	| [$635b: jp   $63D2]

	move.b	(a3),d0                    	| [$635e: ld   a,(iy+$00)]
	rts                                    	| [$6361: ret]

l_63d2:
	jne	l_4608                             	| [$63d2: jp   nz,$4608]
	move.b	(character_y_offset_03,a2),d0   	| [$63d5: ld   a,(ix+character_y_offset_03)]
	cmp.b	#0x07,d0                         	| [$63d8: cp   $07]
	bcc.b	0f                               	| [...]
	rts                                    	| [$63da: ret  c] [...]
0:
	jra	l_4608                             	| [$63db: jp   $4608]


music_control_64d2:
	rts
	
*	move.b	music_state_8779(a6),d0                   	| [$64d2: ld   a,($8779)]
* 1: start music, 0x80: stop, 0xFF ???
*	cmp.b	#0xFF,d0                         	| [$64d5: cp   $FF]
*	jeq	l_64ff                             	| [$64d7: jr   z,$64FF]
*	move.b	d0,d1                           	| [$64d9: ld   b,a]
*	st.b	d0                                	| [$64da: ld   a,$FF]
*	move.b	d0,music_state_8779(a6)                   	| [$64dc: ld   ($8779),a]
*	move.b	l_8761(a6),d0                   	| [$64df: ld   a,($8761)]
*	move.b	d0,d2                           	| [$64e2: ld   c,a]
*	move.b	l_8760(a6),d0                   	| [$64e3: ld   a,($8760)]
*	addq.b	#1,d0                           	| [$64e6: inc  a]
*	and.b	#0x0F,d0                         	| [$64e7: and  $0F]
*	cmp.b	d2,d0                            	| [$64e9: cp   c]
*	jne	l_64ed                             	| [$64ea: jr   nz,$64ED]
*	addq.b	#1,d2                           	| [$64ec: inc  c]
*l_64ed:
*	clr.w	d5                               	| [$64ee: ld   h,$00]
*	move.b	d0,d5                           	| [$64ed: ld   l,a]
*	move.b	d0,l_8760(a6)                   	| [$64f0: ld   ($8760),a]
*	move.b	d2,d0                           	| [$64f3: ld   a,c]
*	and.b	#0x0F,d0                         	| [$64f4: and  $0F]
*	move.b	d0,l_8761(a6)                   	| [$64f6: ld   ($8761),a]
*	move.b	d1,d0                           	| [$64f9: ld   a,b]
*	lea	l_8762(a6),a0                      	| [$64fa: ld   bc,$8762]
*	add.w	d5,a0                            	| [$64fd: add  hl,bc]
* 	move.b	d0,(a0)                         	| [$64fe: ld   (hl),a]
*l_64ff:
	rts                                    	| [$64ff: ret]

handle_music_6500:
	rts
	
 	| [$6500: ld   hl,($85C1)]


	| [$6503: ld   a,($85C3)]
	| [$6506: ld   c,a]
	| [$6507: ld   a,(hl)] protection?? $82F5 read at some point! if set to 0x44 this could go wrong!
	| [$6508: xor  l]
	| [$6509: add  a,c]
	| [$650a: ld   ($85C3),a]
	| [$650d: inc  hl]
	| [$650e: ld   ($85C1),hl]

	| [$6511: ld   a,h]
	| [$6512: cp   $60]
		| [$6514: jp   nz,$6531] bootleg: remove nz cond, always jump
* skip all protection code
	 	| [$6517: ld   hl,$0000] 0
	  	| [$651a: ld   ($85C1),hl]
    
		| [$651d: ld   hl,$85C3]
	 	| [$6520: ld   a,($7FFA)]
		| [$6523: nop]
	
	  	| [$6524: xor  (hl)]
	 	| [$6525: ld   (hl),a]
		| [$6526: jp   z,$6531]

	 	| [$6529: ld   a,$33]
	 	| [$652b: ld   ($85C4),a]
	 	| [$652e: ld   a,$24]
	   	| [$6530: rst  $20]

	| [$6531: ld   ix,$8700]
	| [$6535: ld   hl,dip_switches_D40E]
 	| [$6538: res  6,(ix+$16)]
 	| [$653c: res  7,(ix+$16)]
     	| [$6540: ld   b,$00]

 	| [$6542: push ix]
 	| [$6544: pop  iy]
 	| [$6546: ld   e,(ix+move_direction_0d)]
 	| [$6549: ld   d,(ix+$0e)]
  	| [$654c: ld   (ix+move_direction_0d),$00]
  	| [$6550: ld   (ix+$0e),$00]

  	| [$6554: srl  d]
 	| [$6556: rr   e]
	| [$6558: jr   nc,$6561]
 	| [$655a: ld   a,(iy+$0f)]
 	| [$655d: ld   (hl),b]
 	| [$655e: inc  hl]
 	| [$655f: ld   (hl),a]
 	| [$6560: dec  hl]

 	| [$6561: inc  iy]
 	| [$6563: inc  b]
 	| [$6564: ld   a,b]
  	| [$6565: cp   $10]
	| [$6567: jr   c,$6554]
	| [$6569: ret]

* comment this and music doesn't play anymore
handle_music_656a:
	rts
	
       	| [$656a: ld   a,($8760)]
       	| [$656d: ld   b,a]
       	| [$656e: ld   a,($8761)]
        	| [$6571: cp   b]
      	| [$6572: jr   z,$6590]
       	| [$6574: inc  a]
        	| [$6575: and  $0F]
       	| [$6577: ld   ($8761),a]
      	| [$657a: ld   hl,$8762]
           	| [$657d: ld   b,$00]
       	| [$657f: ld   c,a]
        	| [$6580: add  hl,bc]
       	| [$6581: ld   a,(hl)]
        	| [$6582: cp   $FF]
      	| [$6584: jr   nz,$658D]
       	| [$6586: ld   a,$01]
       	| [$6588: ld   ($8773),a]
      	| [$658b: jr   $6590]

         	| [$658d: call $6591]

      	| [$6590: ret]


             	| [$6591: ld   bc,$0006] 6
				| [$6594: ld   hl,$6BD6]


              	| [$6597: add  hl,bc]
              	| [$6598: cp   (hl)]
            	| [$6599: jr   nc,$6597]

										| [$659b: ccf]
              	| [$659c: sbc  hl,bc]
              	| [$659e: ld   b,(hl)]
              	| [$659f: sub  b]
             	| [$65a0: ld   b,a]
	| [$65a1: inc  hl]
              	| [$65a2: ld   a,(hl)]
              	| [$65a3: cp   b]
            	| [$65a4: jr   nc,$65A8]
                 	| [$65a6: ld   b,$00]

	                           	| [$65a8: inc  hl]
             	| [$65a9: ld   e,(hl)]
| [$65aa: inc  hl]
            	| [$65ab: ld   d,(hl)]

           	| [$65ac: push de]
            	| [$65ad: inc  hl]
             	| [$65ae: ld   e,(hl)]
				| [$65af: inc  hl]
            	| [$65b0: ld   d,(hl)]


				| [$65b1: ld   a,d]  ??? not used
	
                      	| [$65b2: push de]
											| [$65b3: pop  ix]
  	| [$65b5: pop  de]


	
                    	| [$65b6: ld   h,$00]
                   	| [$65b8: ld   l,b]
                    	| [$65b9: add  hl,hl]
                    	| [$65ba: add  hl,de]
                    	| [$65bb: ld   c,(hl)]
     	| [$65bc: inc  hl]
                   	| [$65bd: ld   b,(hl)]

                   	| [$65be: ld   a,(bc)]
                    	| [$65bf: and  $1F]
                   	| [$65c1: ld   d,a]
  	| [$65c2: ld   a,(ix+character_y_offset_03)]
                    	| [$65c5: and  $1F]
                    	| [$65c7: cp   d]
                  	| [$65c8: jr   nc,$65D0]
    	| [$65ca: bit  1,(ix+character_x_00)]
                  	| [$65ce: jr   nz,$65DE]

    	| [$65d0: set  0,(ix+character_x_00)]
    	| [$65d4: res  1,(ix+character_x_00)]
   	| [$65d8: ld   (ix+character_x_right_01),c]
                   	| [$65db: ld   (ix+$02),b]

                  	| [$65de: ret]

l_65df:
	lea	l_8700(a6),a2                      	| [$65df: ld   ix,$8700]
	move.b	#0x01,d0                        	| [$65e3: ld   a,$01]
l_65e5:
	move.b	d0,l_8772(a6)                   	| [$65e5: ld   ($8772),a]
	btst.b	#0,(a2)          	| [$65e8: bit  0,(ix+character_x_00)]
	jeq	l_6614                             	| [$65ec: jr   z,$6614]

	move.l	a2,a1                        	| [$65ee: push ix]
	                        	| [$65f0: pop  de]
	addq.w	#3,a1                           	| [$65f1: inc  de] * 3
	move.b	(0x02,a2),d5                    	| [$65f4: ld   h,(ix+$02)]
	move.b	(0x01,a2),d6    	| [$65f7: ld   l,(ix+character_x_right_01)]
	* points to an address in ROM
	jbsr		load_d5d6_address_from_6bdc_in_a0
	move.w	#0x0008,d1                      	| [$65fa: ld   bc,$0008] 8
	jbsr	ldir                              	| [$65fd: ldir]
 	move.b	(0x05,a2),d0    	| [$65ff: ld   a,(ix+character_delta_x_05)]
	move.b	d0,(0x0c,a2)                    	| [$6602: ld   (ix+$0c),a]
	move.b	#0x01,(0x0b,a2)                 	| [$6605: ld   (ix+$0b),$01]
	bset.b	#1,(a2)          	| [$6609: set  1,(ix+character_x_00)]
	bclr.b	#0,(a2)          	| [$660d: res  0,(ix+character_x_00)]
	jbsr	l_6bc1                            	| [$6611: call $6BC1]
l_6614:
	btst.b	#1,(a2)          	| [$6614: bit  1,(ix+character_x_00)]
	jeq	l_661d                             	| [$6618: jr   z,$661D]
	jbsr	l_663d                            	| [$661a: call $663D]
l_661d:
	btst.b	#1,(a2)          	| [$661d: bit  1,(ix+character_x_00)]
	jeq	l_662f                             	| [$6621: jr   z,$662F]
	move.b	(0x09,a2),d0                    	| [$6623: ld   a,(ix+$09)]
	                               	| [$6626: and  a]
	jeq	l_662c                             	| [$6627: jr   z,$662C]
	jbsr	l_68f4                            	| [$6629: call $68F4]
l_662c:
	jbsr	l_6805                            	| [$662c: call $6805]
l_662f:
	                               	| [$662f: ld   b,$00]
	move.w	#0x60,d1                        	| [$6631: ld   c,$60]
	add.w	d1,a2                            	| [$6633: add  ix,bc]
 	move.b	l_8772(a6),d0                   	| [$6635: ld   a,($8772)]
	subq.b	#1,d0                           	| [$6638: dec  a]
	jne	l_65e5                             	| [$6639: jp   nz,$65E5]
	rts                                    	| [$663c: ret]
l_663d:
	subq.b	#1,(0x0b,a2)                    	| [$663d: dec  (ix+$0b)]
	jne	l_677e                             	| [$6640: jp   nz,$677E]
	move.b	(0x06,a2),d6  					| [$6643: ld   l,(ix+character_situation_06)]
	move.b	(0x07,a2),d5                    	| [$6646: ld   h,(ix+$07)]
	jbsr		load_d5d6_address_from_6bdc_in_a0
	move.b	(a0),d0                         	| [$6649: ld   a,(hl)]
	cmp.b	#0x80,d0                         	| [$664a: cp   $80]
	jne	l_669e                             	| [$664c: jr   nz,$669E]
	st.b	d0                                	| [$664e: ld   a,$FF]
	cmp.b	(0x0a,a2),d0                     	| [$6650: cp   (ix+$0a)]
	jeq	l_668b                             	| [$6653: jr   z,$668B]
	subq.b	#1,(0x0a,a2)                    	| [$6655: dec  (ix+$0a)]
	jne	l_668b                             	| [$6658: jr   nz,$668B]
	subq.b	#1,(0x0c,a2)                    	| [$665a: dec  (ix+$0c)]
	jne	l_6677                             	| [$665d: jr   nz,$6677]
	st.b	d0                                	| [$665f: ld   a,$FF]
	cmp.b	(0x04,a2),d0                     	| [$6661: cp   (ix+$04)]
	jeq	l_666b                             	| [$6664: jr   z,$666B]
	subq.b	#1,(0x04,a2)                    	| [$6666: dec  (ix+$04)]
	jeq	l_6673                             	| [$6669: jr   z,$6673]
l_666b:
	move.b	(character_delta_x_05,a2),d0    	| [$666b: ld   a,(ix+character_delta_x_05)]
	move.b	d0,(0x0c,a2)                    	| [$666e: ld   (ix+$0c),a]
	jra	l_6677                             	| [$6671: jr   $6677]
l_6673:
	bclr.b	#1,(character_x_00,a2)          	| [$6673: res  1,(ix+character_x_00)]
l_6677:
	jbsr	l_678f                            	| [$6677: call $678F]
	move.b	d0,(0x0a,a2)                    	| [$667a: ld   (ix+$0a),a]
	move.b	d1,(0x07,a2)                    	| [$667d: ld   (ix+$07),b]
	move.b	d2,(0x06,a2)                    	| [$6680: ld   (ix+$06),c]
	move.b	d3,(0x09,a2)                    	| [$6683: ld   (ix+$09),d]
	move.b	d4,(0x08,a2)                    	| [$6686: ld   (ix+$08),e]
	jra	l_6694                             	| [$6689: jr   $6694]
l_668b:
	jbsr	l_678f                            	| [$668b: call $678F]
	move.b	d1,(0x07,a2)                    	| [$668e: ld   (ix+$07),b]
	move.b	d2,(0x06,a2)                    	| [$6691: ld   (ix+$06),c]
l_6694:
	move.b	#0x01,(0x0b,a2)                 	| [$6694: ld   (ix+$0b),$01]
	jbsr	l_6bc1                            	| [$6698: call $6BC1]
	jra	l_677e                             	| [$669b: jp   $677E]
l_669e:
	and.b	#0x7F,d0                         	| [$669e: and  $7F]
	move.b	d0,(0x0b,a2)                    	| [$66a0: ld   (ix+$0b),a]
l_66a3:
	addq.w	#1,a0                           	| [$66a3: inc  hl]
	move.b	(a0),d0                         	| [$66a4: ld   a,(hl)]
	btst.b	#7,d0                           	| [$66a5: bit  7,a]
	jne	l_6778                             	| [$66a7: jp   nz,$6778]
	move.b	d0,d1                           	| [$66aa: ld   b,a]
	and.b	#0x0F,d0                         	| [$66ab: and  $0F]
	move.b	d0,d2                           	| [$66ad: ld   c,a]
	move.b	d1,d0                           	| [$66ae: ld   a,b]
	and.b	#0x70,d0                         	| [$66af: and  $70]
	move.b	d0,d1                           	| [$66b1: ld   b,a]

	move.l	a2,-(sp)                        	| [$66b2: push ix]
	moveq   #0,d3                               	| [$66b5: ld   d,$00]
	move.b	d2,d3                           	| [$66b4: ld   e,c]
	add.w	d3,a2                            	| [$66b7: add  ix,de]
	addq.w	#1,a0                           	| [$66b9: inc  hl]
	move.b	(a0),d0                         	| [$66ba: ld   a,(hl)]
	move.b	d0,(0x0f,a2)                    	| [$66bb: ld   (ix+$0f),a]
	move.l	(sp)+,a2                        	| [$66be: pop  ix]
	move.b	d1,d0                           	| [$66c0: ld   a,b]
	lsr.b	#3,d0                            	| [$66c1: srl  a] * 3
	moveq   #0,d3                               	| [$66c8: ld   d,$00]
	move.b	d0,d3                           	| [$66c7: ld   e,a]
	lea	jump_table_677F,a3                      	| [$66ca: ld   iy,jump_table_677F]
	add.w	d3,a3                            	| [$66ce: add  iy,de]
	add.w	d3,a3                            	| [$66ce: add  iy,de]
	move.l	(a3),a3                    	| [$66d0: ld   e,(iy+$00)]
	                        	| [$66d3: inc  iy]
	                   	| [$66d5: ld   d,(iy+$00)]

	                    	| [$66d8: push de]
	                     	| [$66d9: pop  iy]
	moveq	#0,d1                               	| [$66db: ld   b,$00]
	jra	(a3)                               	| [$66dd: jp   (iy)]
	
l_66DF:
	jbsr	l_67b2                            	| [$66df: call $67B2]
	tst.b	d0                               	| [$66e2: cp   $00]
	jeq	l_66ea                             	| [$66e4: jr   z,$66EA]
	move.b	#0x01,(a3)                 	| [$66e6: ld   (iy+$00),$01]
l_66ea:
	jra	l_6761                             	| [$66ea: jr   $6761]

l_66EC:
	jbsr	l_67b2                            	| [$66ec: call $67B2]
	tst.b	d0                               	| [$66ef: cp   $00]
	jeq	l_6703                             	| [$66f1: jr   z,$6703]
	move.b	#0x50,d1                        	| [$66f3: ld   b,$50]
	jbsr	l_67da                            	| [$66f5: call $67DA]
	move.b	d1,(a3)                    	| [$66f8: ld   (iy+$00),b]
	addq.b	#1,(a3)                    	| [$66fb: inc  (iy+$00)]
	addq.w	#1,a0                           	| [$66fe: inc  hl]
	move.b	(a0),d0                         	| [$66ff: ld   a,(hl)]
	move.b	d0,(0x01,a3)                    	| [$6700: ld   (iy+$01),a]
l_6703:
	jra	l_6761                             	| [$6703: jr   $6761]
	
l_6705:
	jbsr	l_67b2                            	| [$6705: call $67B2]
	tst.b	d0                               	| [$6708: cp   $00]
	jeq	l_671c                             	| [$670a: jr   z,$671C]
	move.b	#0x40,d1                        	| [$670c: ld   b,$40]
	jbsr	l_67da                            	| [$670e: call $67DA]
	move.b	d1,(a3)                    	| [$6711: ld   (iy+$00),b]
	addq.b	#1,(a3)                    	| [$6714: inc  (iy+$00)]
	addq.w	#1,a0                           	| [$6717: inc  hl]
	move.b	(a0),d0                         	| [$6718: ld   a,(hl)]
	move.b	d0,(0x01,a3)                    	| [$6719: ld   (iy+$01),a]
l_671c:
	jra	l_6761                             	| [$671c: jr   $6761]
	
l_671E:
	addq.w	#1,a0                           	| [$671e: inc  hl]
	move.b	d2,d0                           	| [$671f: ld   a,c]
	cmp.b	#0x0F,d0                         	| [$6720: cp   $0F]
	jeq	l_6731                             	| [$6722: jr   z,$6731]

	move.l	a2,-(sp)                        	| [$6724: push ix]
	moveq   #0,d3                               	| [$6727: ld   d,$00]
	move.b	d2,d3                           	| [$6726: ld   e,c]
	add.w	d3,a2                            	| [$6729: add  ix,de]
	move.b	(a0),d0                         	| [$672b: ld   a,(hl)]
	move.b	d0,(0x10,a2)                    	| [$672c: ld   (ix+$10),a]
	move.l	(sp)+,a2                        	| [$672f: pop  ix]
l_6731:
	jbsr	l_67b2                            	| [$6731: call $67B2]
	tst.b	d0                               	| [$6734: cp   $00]
	jeq	l_673c                             	| [$6736: jr   z,$673C]
	move.b	#0x81,(a3)                 	| [$6738: ld   (iy+$00),$81]
l_673c:
	move.b	#0x80,d1                        	| [$673c: ld   b,$80]
	jra	l_6761                             	| [$673e: jr   $6761]
	
l_6740:
	jbsr	l_67b2                            	| [$6740: call $67B2]
	tst.b	d0                               	| [$6743: cp   $00]
	jeq	l_6761                             	| [$6745: jr   z,$6761]
	move.b	#0x60,d1                        	| [$6747: ld   b,$60]
	jbsr	l_67da                            	| [$6749: call $67DA]
	move.b	d1,(a3)                    	| [$674c: ld   (iy+$00),b]
	addq.b	#1,(a3)                    	| [$674f: inc  (iy+$00)]
	addq.w	#1,a0                           	| [$6752: inc  hl]
	move.b	(a0)+,d0                         	| [$6753: ld   a,(hl)]
	move.b	d0,(0x01,a3)                    	| [$6754: ld   (iy+$01),a]
	                           	| [$6757: inc  hl]
	move.b	(a0)+,d0                         	| [$6758: ld   a,(hl)]
	move.b	d0,(0x02,a3)                    	| [$6759: ld   (iy+$02),a]
	                           	| [$675c: inc  hl]
	move.b	(a0),d0                         	| [$675d: ld   a,(hl)]
	move.b	d0,(0x03,a3)                    	| [$675e: ld   (iy+$03),a]
l_6761:
	move.b	d1,d0                           	| [$6761: ld   a,b]
	or.b	d2,d0                             	| [$6762: or   c]
	move.b	d0,d2                           	| [$6763: ld   c,a]
	jbsr	l_67ec                            	| [$6764: call $67EC]
	move.b	(move_direction_0d,a2),d0       	| [$6767: ld   a,(ix+move_direction_0d)]
	or.b	d4,d0                             	| [$676a: or   e]
	move.b	d0,(move_direction_0d,a2)       	| [$676b: ld   (ix+move_direction_0d),a]
	move.b	(0x0e,a2),d0                    	| [$676e: ld   a,(ix+$0e)]
	or.b	d3,d0                             	| [$6771: or   d]
	move.b	d0,(0x0e,a2)                    	| [$6772: ld   (ix+$0e),a]
	jra	l_66a3                             	| [$6775: jp   $66A3]
l_6778:
	move.b	d5,(0x07,a2)                    	| [$6778: ld   (ix+$07),h]
	move.b	d6,(0x06,a2)                    	| [$677b: ld   (ix+$06),l]
l_677e:
	rts                                    	| [$677e: ret]

jump_table_677F:
	.long	l_66DF
	.long	l_66EC
	.long	l_6705
	.long	l_671E
	.long	l_6740
	.long	l_66EC
	.long	l_6705
	.long	l_671E
	

l_678f:
	move.b	(character_x_right_01,a2),d4    	| [$678f: ld   e,(ix+character_x_right_01)]
	move.b	(0x02,a2),d3                    	| [$6792: ld   d,(ix+$02)]
	LOAD_D3_16_FROM_D3D4
	addq.w	#3,d3                           	| [$6795: inc  de] * 3
	move.b	(character_delta_x_05,a2),d0    	| [$6798: ld   a,(ix+character_delta_x_05)]
	move.b	(0x0c,a2),d1                    	| [$679b: ld   b,(ix+$0c)]
	sub.b	d1,d0                            	| [$679e: sub  b]
	moveq	#0,d1                               	| [$679f: ld   b,$00]
	move.b	d0,d1                           	| [$67a1: ld   c,a]
	move.w	d1,d5                    	| [$67a2: push bc]
	                        	| [$67a3: pop  hl]
	add.w	d5,d5                            	| [$67a4: add  hl,hl]
	add.w	d5,d5                            	| [$67a5: add  hl,hl]
	add.w	d1,d5                            	| [$67a6: add  hl,bc]
	add.w	d3,d5                            	| [$67a7: add  hl,de]
	move.b	(a0)+,d2                         	| [$67a8: ld   c,(hl)]
	                           	| [$67a9: inc  hl]
	move.b	(a0)+,d1                         	| [$67aa: ld   b,(hl)]
	                           	| [$67ab: inc  hl]
	move.b	(a0)+,d4                         	| [$67ac: ld   e,(hl)]
	                           	| [$67ad: inc  hl]
	move.b	(a0)+,d3                         	| [$67ae: ld   d,(hl)]
	                           	| [$67af: inc  hl]
	move.b	(a0),d0                         	| [$67b0: ld   a,(hl)]
	rts                                    	| [$67b1: ret]

l_67b2:
	movem.w	d3/d4,-(sp)                    	| [$67b2: push de]
	lea	table_67CA,a3                      	| [$67b3: ld   iy,table_67CA]
	moveq   #0,d3                               	| [$67b8: ld   d,$00]
	move.b	d2,d3                           	| [$67b7: ld   e,c]
	add.w	d3,a3                            	| [$67ba: add  iy,de]
	move.b	(a3),d0                    	| [$67bc: ld   a,(iy+$00)]
	moveq   #0,d3                               	| [$67c0: ld   d,$00]
	move.b	d0,d3                           	| [$67bf: ld   e,a]

	move.l	a2,a3                        	| [$67c2: push ix]
	                        	| [$67c4: pop  iy]
	add.w	d3,a3                            	| [$67c6: add  iy,de]
	movem.w	(sp)+,d3/d4                    	| [$67c8: pop  de]
	rts                                    	| [$67c9: ret]

table_67CA:
	.byte	0x1F
	.byte	0x00
	.byte	0x23
	.byte	0x00
	.byte	0x27
	.byte	0x00
	.byte	0x2B
	.byte	0x00
	.byte	0x2F
	.byte	0x33
	.byte	0x37
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x3B
	.byte	0x3F
	.align	2

l_67da:
	move.b	d2,d0                           	| [$67da: ld   a,c]
	                               	| [$67db: cp   $00]
	jeq	l_67e9                             	| [$67dd: jr   z,$67E9]
	cmp.b	#0x02,d0                         	| [$67df: cp   $02]
	jeq	l_67e9                             	| [$67e1: jr   z,$67E9]
	cmp.b	#0x04,d0                         	| [$67e3: cp   $04]
	jeq	l_67e9                             	| [$67e5: jr   z,$67E9]
	jra	l_67eb                             	| [$67e7: jr   $67EB]
l_67e9:
	bset.b	#7,d1                           	| [$67e9: set  7,b]
l_67eb:
	rts                                    	| [$67eb: ret]

l_67ec:
	move.w	#0x0001,d3                      	| [$67ec: ld   de,$0001] 1
	btst.b	#7,d2                           	| [$67ef: bit  7,c]
	jeq	l_67f6                             	| [$67f1: jr   z,$67F6]
	move.w	#0x0003,d3                      	| [$67f3: ld   de,$0003] 3
l_67f6:
	move.b	d2,d0                           	| [$67f6: ld   a,c]
	and.b	#0x0F,d0                         	| [$67f7: and  $0F]
l_67f9:
	                               	| [$67f9: cp   $00]
	jeq	l_6804                             	| [$67fb: jr   z,$6804]
	asl.b	#1,d4                            	| [$67fd: sla  e]
	roxl.b	#1,d3                           	| [$67ff: rl   d]
	subq.b	#1,d0                           	| [$6801: dec  a]
	jra	l_67f9                             	| [$6802: jr   $67F9]
l_6804:
	rts                                    	| [$6804: ret]

l_6805:
	moveq	#0,d0                            	| [$6805: sub  a]
l_6806:
	move.b	d0,l_8774(a6)                   	| [$6806: ld   ($8774),a]
	move.b	d0,d2                           	| [$6809: ld   c,a]
	jbsr	l_67b2                            	| [$680a: call $67B2]
	tst.b	d0                               	| [$680d: cp   $00]
	jeq	l_68cc                             	| [$680f: jp   z,$68CC]
	btst.b	#6,(a3)                    	| [$6812: bit  6,(iy+$00)]
	jeq	l_68cc                             	| [$6816: jp   z,$68CC]
	subq.b	#1,(a3)                    	| [$6819: dec  (iy+$00)]
	move.b	(a3),d0                    	| [$681c: ld   a,(iy+$00)]
	and.b	#0x0F,d0                         	| [$681f: and  $0F]
	jne	l_68cc                             	| [$6821: jp   nz,$68CC]
	move.b	(0x01,a3),d0                    	| [$6824: ld   a,(iy+$01)]
	and.b	#0xF0,d0                         	| [$6827: and  $F0]
	lsr.b	#4,d0                            	| [$6829: srl  a] * 4
	or.b	(a3),d0                      	| [$6831: or   (iy+$00)]
	move.b	d0,(a3)                    	| [$6834: ld   (iy+$00),a]
	move.b	l_8774(a6),d0                   	| [$6837: ld   a,($8774)]
	btst.b	#7,(a3)                    	| [$683a: bit  7,(iy+$00)]
	jeq	l_6842                             	| [$683e: jr   z,$6842]
	bset.b	#7,d0                           	| [$6840: set  7,a]
l_6842:
	move.b	d0,d2                           	| [$6842: ld   c,a]
	jbsr	l_67ec                            	| [$6843: call $67EC]
	move.b	d4,d0                           	| [$6846: ld   a,e]
	or.b	(move_direction_0d,a2),d0         	| [$6847: or   (ix+move_direction_0d)]
	move.b	d0,(move_direction_0d,a2)       	| [$684a: ld   (ix+move_direction_0d),a]
	move.b	d3,d0                           	| [$684d: ld   a,d]
	or.b	(0x0e,a2),d0                      	| [$684e: or   (ix+$0e)]
	move.b	d0,(0x0e,a2)                    	| [$6851: ld   (ix+$0e),a]

	move.l	a2,-(sp)                        	| [$6854: push ix]
	move.b	l_8774(a6),d0                   	| [$6856: ld   a,($8774)]
	moveq   #0,d3                               	| [$685a: ld   d,$00]
	move.b	d0,d3                           	| [$6859: ld   e,a]
	add.w	d3,a2                            	| [$685c: add  ix,de]
 	move.b	(0x0f,a2),d6                    	| [$685e: ld   l,(ix+$0f)]
	move.b	(0x10,a2),d5                    	| [$6861: ld   h,(ix+$10)]
	* this is a value (ex: 0x50)
	LOAD_D5_16_FROM_D5D6
	move.l	(sp)+,a2                        	| [$6864: pop  ix]
	btst.b	#5,(a3)                    	| [$6866: bit  5,(iy+$00)]
	jeq	l_689f                             	| [$686a: jr   z,$689F]
	move.b	(0x02,a3),d4                    	| [$686c: ld   e,(iy+$02)]
	move.b	(0x03,a3),d3                    	| [$686f: ld   d,(iy+$03)]
	jbsr		load_d3d4_address_from_6bdc_in_a1
	move.b	(a1)+,d0                         	| [$6872: ld   a,(de)]
	move.b	d0,d2                           	| [$6873: ld   c,a]
	                           	| [$6874: inc  de]
	move.b	(a1),d0                         	| [$6875: ld   a,(de)]
	sub.l	#table_6BDC,a1
	move.l	a1,d3
	LOAD_D3D4_FROM_D3_16
	* update d3 and d4
	move.b	d4,(0x02,a3)                    	| [$6876: ld   (iy+$02),e]
	move.b	d3,(0x03,a3)                    	| [$6879: ld   (iy+$03),d]
	tst.b	d0                               	| [$687c: cp   $00]
	jeq	l_6899                             	| [$687e: jr   z,$6899]
	move.b	(0x01,a3),d0                    	| [$6880: ld   a,(iy+$01)]
	and.b	#0x0F,d0                         	| [$6883: and  $0F]
	jbsr	compute_d1w_from_d0b_68d6                            	| [$6885: call $68D6]
	LOAD_D1D2_FROM_D1_16
	jbsr	compute_d1w_6bb9                            	| [$6888: call $6BB9]
	add.w	d1,d5                            	| [$688b: add  hl,bc]
	move.b	(a1),d0                         	| [$688c: ld   a,(de)]
	move.b	d0,d2                           	| [$688d: ld   c,a]
	move.b	(0x01,a3),d0                    	| [$688e: ld   a,(iy+$01)]
	and.b	#0x0F,d0                         	| [$6891: and  $0F]
	jbsr	compute_d1w_from_d0b_68d6                            	| [$6893: call $68D6]
	add.w	d1,d5                            	| [$6896: add  hl,bc]
	jra	l_689d                             	| [$6897: jr   $689D]
l_6899:
	bclr.b	#6,(a3)                    	| [$6899: res  6,(iy+$00)]
l_689d:
	jra	l_68b4                             	| [$689d: jr   $68B4]
l_689f:
	move.b	(0x01,a3),d0                    	| [$689f: ld   a,(iy+$01)]
	and.b	#0x0F,d0                         	| [$68a2: and  $0F]
	moveq	#0,d1                               	| [$68a5: ld   b,$00]
	move.b	d0,d1                           	| [$68a4: ld   c,a]
	btst.b	#4,(a3)                    	| [$68a7: bit  4,(iy+$00)]
	jeq	l_68b0                             	| [$68ab: jr   z,$68B0]
	add.w	d1,d5                            	| [$68ad: add  hl,bc]
	jra	l_68b4                             	| [$68ae: jr   $68B4]
l_68b0:
	LOAD_D1D2_FROM_D1_16
	jbsr	compute_d1w_6bb9                            	| [$68b0: call $6BB9]
	add.w	d1,d5                            	| [$68b3: add  hl,bc]
l_68b4:

	move.l	a2,-(sp)                        	| [$68b4: push ix]
	move.b	l_8774(a6),d0                   	| [$68b6: ld   a,($8774)]
	moveq   #0,d3                               	| [$68ba: ld   d,$00]
	move.b	d0,d3                           	| [$68b9: ld   e,a]
	add.w	d3,a2                            	| [$68bc: add  ix,de]
 	move.b	d5,(0x0f,a2)                    	| [$68be: ld   (ix+$0f),l]
	btst.b	#7,(a3)                    	| [$68c1: bit  7,(iy+$00)]
	jeq	l_68ca                             	| [$68c5: jr   z,$68CA]
	rol.w	#8,d5
	move.b	d5,(0x10,a2)                    	| [$68c7: ld   (ix+$10),h]
	rol.w	#8,d5
l_68ca:
	move.l	(sp)+,a2                        	| [$68ca: pop  ix]
l_68cc:
	move.b	l_8774(a6),d0                   	| [$68cc: ld   a,($8774)]
	addq.b	#1,d0                           	| [$68cf: inc  a]
	cmp.b	#0x10,d0                         	| [$68d0: cp   $10]
	jcs	l_6806                             	| [$68d2: jp   c,$6806]
	rts                                    	| [$68d5: ret]
	
* < d0.B, d2.b
* > D1.W
compute_d1w_from_d0b_68d6:
	move.w	d5,-(sp)                        	| [$68d6: push hl]
	                        	| [$68d7: push af]
	                        	| [$68d8: ld   a,c]
	add.b	#0x80,d2            | [$68d9: add  a,$80]
	                        	| [$68db: ld   c,a]
	                        	| [$68dc: pop  af]
	moveq	#0,d1               | [$68dd: ld   b,$00]
	move.b	d2,d1              	| [$68df: bit  7,c]
	                            | [$68e1: jr   z,$68E5]
	ext.w	d1                  | [$68e3: ld   b,$FF]
l_68e5:
	moveq	#0x0000,d5                      	| [$68e5: ld   hl,$0000] 0
l_68e8:
	tst.b	d0                               	| [$68e8: cp   $00]
	jeq	l_68f0                             	| [$68ea: jr   z,$68F0]
	add.w	d1,d5                            	| [$68ec: add  hl,bc]
	subq.b	#1,d0                           	| [$68ed: dec  a]
	jra	l_68e8                             	| [$68ee: jr   $68E8]
l_68f0:

	move.w	d5,d1                        	| [$68f0: push hl]
	                    	| [$68f1: pop  bc]
	move.w	(sp)+,d5                        	| [$68f2: pop  hl]
	rts                                    	| [$68f3: ret]

l_68f4:
	STORE_POINTER	a2,ram_pointer_8775(a6)            	| [$68f4: ld   ($8775),ix]
	move.l	a2,a3                        	| [$68f8: push ix]
											| [$68fa: pop  iy]
	move.w	#0x0043,d3                      	| [$68fc: ld   de,$0043] 67
	add.w	d3,a3                            	| [$68ff: add  iy,de]
 	move.b	(0x08,a2),d4                    	| [$6901: ld   e,(ix+$08)]
	move.b	(0x09,a2),d3                    	| [$6904: ld   d,(ix+$09)]
	jbsr	load_d3d4_address_from_6bdc_in_a1
	move.l	a1,a2                        	| [$6907: push de]
	sub.b	d0,d0                            	| [$690a: sub  a]
l_690b:
	move.b	d0,l_8774(a6)                   	| [$690b: ld   ($8774),a]
	cmp.b	#0x08,d0                         	| [$690e: cp   $08]
	jcc	l_6a31                             	| [$6910: jp   nc,$6A31]
	move.b	(0x00,a2),d0                    	| [$6913: ld   a,(ix+$00)]
	and.b	#0x70,d0                         	| [$6916: and  $70]
	jeq	l_6a31                             	| [$6918: jp   z,$6A31]
	move.b	(0x00,a2),d2                    	| [$691b: ld   c,(ix+$00)]
	jbsr	l_6a58                            	| [$691e: call $6A58]
	jcs	l_6a25                             	| [$6921: jp   c,$6A25]
	jbsr	l_67ec                            	| [$6924: call $67EC]

	move.l	a2,-(sp)                        	| [$6927: push ix]
	LOAD_POINTER	ram_pointer_8775(a6),a2             	| [$6929: ld   ix,($8775)]
	move.b	(0x0d,a2),d0                    	| [$692d: ld   a,(ix+$0d)]
	and.b	d4,d0                            	| [$6930: and  e]
	jne	l_6a03                             	| [$6931: jp   nz,$6A03]
	move.b	(0x0e,a2),d0                    	| [$6934: ld   a,(ix+$0e)]
	and.b	d3,d0                            	| [$6937: and  d]
	jne	l_6a03                             	| [$6938: jp   nz,$6A03]
	move.l	(sp)+,a2                        	| [$693b: pop  ix]
	subq.b	#1,(a3)                    	| [$693d: dec  (iy+$00)]
	move.b	(a3),d0                    	| [$6940: ld   a,(iy+$00)]
	and.b	#0x0F,d0                         	| [$6943: and  $0F]
	jne	l_6a01                             	| [$6945: jp   nz,$6A01]
	move.b	(0x01,a2),d0                    	| [$6948: ld   a,(ix+$01)]
	and.b	#0xF0,d0                         	| [$694b: and  $F0]
	lsr.b	#4,d0                            	| [$694d: srl  a] * 4
	or.b	(a3),d0                      	| [$6955: or   (iy+$00)]
	move.b	d0,(a3)                    	| [$6958: ld   (iy+$00),a]
	move.b	d2,d0                           	| [$695b: ld   a,c]
	and.b	#0x70,d0                         	| [$695c: and  $70]
	lsr.b	#2,d0                            	| [$695e: srl  a] * 3 but 2 as longword now
	moveq   #0,d3                               	| [$6965: ld   d,$00]
	move.b	d0,d3                           	| [$6964: ld   e,a]
	lea	jump_table_64A8(pc),a0                      	| [$6967: ld   hl,table_6A48]
	move.l	(a0,d3.w),a0                            	| [$696a: add  hl,de]
	                         	| [$696b: ld   e,(hl)]
	                           	| [$696c: inc  hl]
	                         	| [$696d: ld   d,(hl)]
	                    	| [$696e: push de]
	                     	| [$696e: push de]
	                     	| [$696f: pop  hl]

	move.l	a2,-(sp)                        	| [$6970: push ix]
	move.b	d2,d0                           	| [$6972: ld   a,c]
	and.b	#0x0F,d0                         	| [$6973: and  $0F]
	moveq   #0,d3                               	| [$6976: ld   d,$00]
	move.b	d0,d3                           	| [$6975: ld   e,a]
	LOAD_POINTER	ram_pointer_8775(a6),a2             	| [$6978: ld   ix,($8775)]
	add.w	d3,a2                            	| [$697c: add  ix,de]
 	move.b	(0x0f,a2),d4                    	| [$697e: ld   e,(ix+$0f)]
	move.b	(0x10,a2),d3                    	| [$6981: ld   d,(ix+$10)]
	LOAD_D3_16_FROM_D3D4
	move.l	(sp)+,a2                        	| [$6984: pop  ix]
	jra	(a0)                               	| [$6986: jp   (hl)]
jump_6987:
	jra	jump_end_69d3                             	| [$6987: jr   $69D3]

* < D3.W
jump_6989:
	jbsr	l_6a8d                            	| [$6989: call $6A8D]
	jcc	l_69a6                             	| [$698c: jr   nc,$69A6]
	move.b	(0x03,a2),d0                    	| [$698e: ld   a,(ix+$03)]
	not.b	d0                               	| [$6991: cpl]
	move.b	d0,d6                           	| [$6992: ld   l,a]
	st.b	d5                                	| [$6993: ld   h,$FF]
	LOAD_D5_16_FROM_D5D6
	addq.w	#1,d5                           	| [$6995: inc  hl]
	move.b	d5,(0x01,a3)                    	| [$6996: ld   (iy+$01),l]
	bset.b	#5,(a3)                    	| [$6999: set  5,(iy+$00)]
	tst.w	d5                           	| [$699d: bit  7,h]
	jmi	l_69a5                             	| [$699f: jr   nz,$69A5]
	bclr.b	#5,(a3)                    	| [$69a1: res  5,(iy+$00)]
l_69a5:
	add.w	d3,d5                            	| [$69a5: add  hl,de]
l_69a6:
	jra	jump_end_69d3                             	| [$69a6: jr   $69D3]
jump_69a8:
	jbsr	l_6acb                            	| [$69a8: call $6ACB]
	jcc	l_69ba                             	| [$69ab: jr   nc,$69BA]
	clr.w	d5                               	| [$69b0: ld   h,$00]
	move.b	(0x02,a2),d5                    	| [$69ad: ld   l,(ix+$02)]
	move.b	d5,(0x01,a3)                    	| [$69b2: ld   (iy+$01),l]
	bclr.b	#5,(a3)                    	| [$69b5: res  5,(iy+$00)]
	add.w	d3,d5                            	| [$69b9: add  hl,de]
l_69ba:
	jra	jump_end_69d3                             	| [$69ba: jr   $69D3]
jump_69BC:
	jbsr	l_6b0e                            	| [$69bc: call $6B0E]
	jra	jump_end_69d3                             	| [$69bf: jr   $69D3]
jump_69C1:
	jbsr	l_6b0e                            	| [$69c1: call $6B0E]
	jra	jump_end_69d3                             	| [$69c4: jr   $69D3]
jump_69C6:
	jbsr	l_6b51                            	| [$69c6: call $6B51]
	jra	jump_end_69d3                             	| [$69c9: jr   $69D3]
jump_69CB:
	jbsr	l_6b51                            	| [$69cb: call $6B51]
	jra	jump_end_69d3                             	| [$69ce: jr   $69D3]
jump_69D0:
	* called when???
	jbsr	l_6b7e                            	| [$69d0: call $6B7E]

* jump end < D5.W
jump_end_69d3:
	move.b	(a2),d2                    	| [$69d3: ld   c,(ix+0x00)]

	move.l	a2,-(sp)                        	| [$69d6: push ix]
	move.b	d2,d0                           	| [$69d8: ld   a,c]
	and.b	#0x0F,d0                         	| [$69d9: and  $0F]
	moveq   #0,d3                               	| [$69dc: ld   d,$00]
	move.b	d0,d3                           	| [$69db: ld   e,a]
	LOAD_POINTER	ram_pointer_8775(a6),a2             	| [$69de: ld   ix,($8775)]
	add.w	d3,a2                            	| [$69e2: add  ix,de]
	move.b	d6,(0x0f,a2)                    	| [$69e4: ld   (ix+$0f),l]
	btst.b	#7,d2                           	| [$69e7: bit  7,c]
	jeq	l_69ee                             	| [$69e9: jr   z,$69EE]
	move.b	d5,(0x10,a2)                    	| [$69eb: ld   (ix+$10),h]
l_69ee:
	move.l	(sp)+,a2                        	| [$69ee: pop  ix]
	jbsr	l_67ec                            	| [$69f0: call $67EC]
	move.b	l_8777(a6),d0                   	| [$69f3: ld   a,($8777)]
	or.b	d4,d0                             	| [$69f6: or   e]
	move.b	d0,l_8777(a6)                   	| [$69f7: ld   ($8777),a]
	move.b	l_8778(a6),d0                   	| [$69fa: ld   a,($8778)]
	or.b	d3,d0                             	| [$69fd: or   d]
	move.b	d0,l_8778(a6)                   	| [$69fe: ld   ($8778),a]
l_6a01:
	jra	l_6a21                             	| [$6a01: jr   $6A21]
l_6a03:
	move.l	(sp)+,a2                        	| [$6a03: pop  ix]
	move.b	(character_x_right_01,a2),d0    	| [$6a05: ld   a,(ix+character_x_right_01)]
	and.b	#0xF0,d0                         	| [$6a08: and  $F0]
	lsr.b	#4,d0                            	| [$6a0a: srl  a] * 4
	btst.b	#4,(character_x_00,a2)          	| [$6a12: bit  4,(ix+character_x_00)]
	jeq	l_6a1a                             	| [$6a16: jr   z,$6A1A]
	bset.b	#6,d0                           	| [$6a18: set  6,a]
l_6a1a:
	move.b	d0,(a3)                    	| [$6a1a: ld   (iy+$00),a]
	clr.b	(0x01,a3)                        	| [$6a1d: ld   (iy+$01),$00]
l_6a21:
	addq.w	#1,a3                           	| [$6a21: inc  iy]
	addq.w	#1,a3                           	| [$6a23: inc  iy]
l_6a25:
	move.w	#0x0004,d1                      	| [$6a25: ld   bc,$0004] 4
	add.w	d1,a2                            	| [$6a28: add  ix,bc]
	move.b	l_8774(a6),d0                   	| [$6a2a: ld   a,($8774)]
	addq.b	#1,d0                           	| [$6a2d: inc  a]
	jra	l_690b                             	| [$6a2e: jp   $690B]
l_6a31:
	LOAD_POINTER	ram_pointer_8775(a6),a2             	| [$6a31: ld   ix,($8775)]
	move.b	l_8777(a6),d0                   	| [$6a35: ld   a,($8777)]
	or.b	(move_direction_0d,a2),d0         	| [$6a38: or   (ix+move_direction_0d)]
	move.b	d0,(move_direction_0d,a2)       	| [$6a3b: ld   (ix+move_direction_0d),a]
	move.b	l_8778(a6),d0                   	| [$6a3e: ld   a,($8778)]
	or.b	(0x0e,a2),d0                      	| [$6a41: or   (ix+$0e)]
	move.b	d0,(0x0e,a2)                    	| [$6a44: ld   (ix+$0e),a]
	rts                                    	| [$6a47: ret]

jump_table_64A8:
	.long	jump_6987   
	.long	jump_6989   
	.long	jump_69a8   
	.long	jump_69BC   | in-game: alternates
	.long	jump_69C1   
	.long	jump_69C6   | between those 2
	.long	jump_69CB
	.long	jump_69D0 

l_6a58:

	move.l	a0,-(sp)                        	| [$6a58: push hl]
	movem.w	d3/d4,-(sp)                    	| [$6a59: push de]
	move.l	a1,-(sp)                        	| [$6a59: push de]
	move.b	d2,d0                           	| [$6a5a: ld   a,c]
	and.b	#0x0F,d0                         	| [$6a5b: and  $0F]
	moveq   #0,d3                               	| [$6a5e: ld   d,$00]
	move.b	d0,d3                           	| [$6a5d: ld   e,a]
	lea	table_6A7D,a0                          	| [$6a60: ld   hl,$6A7D]
	add.w	d3,a0                            	| [$6a63: add  hl,de]
	move.b	(a0),d0                         	| [$6a64: ld   a,(hl)]
	                               	| [$6a65: cp   $00]
	jne	l_6a6d                             	| [$6a67: jr   nz,$6A6D]
	SET_XC_FLAGS                           	| [$6a69: scf]
	INVERT_XC_FLAGS                        	| [$6a6a: ccf]
	jra	l_6a7a                             	| [$6a6b: jr   $6A7A]
l_6a6d:
	cmp.b	#0x01,d0                         	| [$6a6d: cp   $01]
	jne	l_6a79                             	| [$6a6f: jr   nz,$6A79]
	SET_XC_FLAGS                           	| [$6a71: scf]
	btst.b	#7,d2                           	| [$6a72: bit  7,c]
	jne	l_6a77                             	| [$6a74: jr   nz,$6A77]
	INVERT_XC_FLAGS                        	| [$6a76: ccf]
l_6a77:
	jra	l_6a7a                             	| [$6a77: jr   $6A7A]
l_6a79:
	SET_XC_FLAGS                           	| [$6a79: scf]
l_6a7a:
	move.l	(sp)+,a1                        	| [$6a7a: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$6a7a: pop  de]
	move.l	(sp)+,a0                        	| [$6a7b: pop  hl]
	rts                                    	| [$6a7c: ret]

table_6A7D:
	.byte	0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x00,0x00,0x01,0x10,0x10,0x10,0x00,0x01
	.align	2
	
l_6a8d:
	exg	d3,d5                              	| [$6a8d: ex   de,hl]
	clr.w	d1                               	| [$6a91: ld   b,$00]
	move.b	(0x01,a3),d1                    	| [$6a8e: ld   c,(iy+$01)]
	btst.b	#5,(a3)                    	| [$6a93: bit  5,(iy+$00)]
	jeq	l_6a9b                             	| [$6a97: jr   z,$6A9B]
	or.w	#0xFF00,d1                          	| [$6a99: ld   b,$FF]
l_6a9b:
	move.w	d1,-(sp)                    	| [$6a9b: push bc]
	LOAD_D1D2_FROM_D1_16
	jbsr	compute_d1w_6bb9                            	| [$6a9c: call $6BB9]
	add.w	d1,d5                            	| [$6a9f: add  hl,bc]
	exg	d3,d5                              	| [$6aa0: ex   de,hl]
	move.w	(sp)+,d5                        	| [$6aa1: pop  hl]
	move.b	(character_x_right_01,a2),d0    	| [$6aa2: ld   a,(ix+character_x_right_01)]
	and.b	#0x0F,d0                         	| [$6aa5: and  $0F]
	moveq	#0,d1                               	| [$6aa8: ld   b,$00]
	move.b	d0,d1                           	| [$6aa7: ld   c,a]
	add.w	d1,d5                            	| [$6aaa: add  hl,bc]
 	bset.b	#5,(a3)                    	| [$6aab: set  5,(iy+$00)]
	LOAD_D5D6_FROM_D5_16
	btst.b	#7,d5                           	| [$6aaf: bit  7,h]
	jne	l_6ac4                             	| [$6ab1: jr   nz,$6AC4]
	bclr.b	#5,(a3)                    	| [$6ab3: res  5,(iy+$00)]
	clr.b	d0                            	| [$6ab7: sub  a]
	LOAD_D1D2_FROM_D1_16			| what the original routine returns
	cmp.b	d5,d0                            	| [$6ab8: cp   h]
	jcs	l_6ac1                             	| [$6ab9: jr   c,$6AC1]
	move.b	(0x02,a2),d0                    	| [$6abb: ld   a,(ix+$02)]
	cmp.b	d6,d0                            	| [$6abe: cp   l]
	jcc	l_6ac4                             	| [$6abf: jr   nc,$6AC4]
l_6ac1:
	SET_XC_FLAGS                           	| [$6ac1: scf]
	jra	l_6aca                             	| [$6ac2: jr   $6ACA]
l_6ac4:
	move.b	d6,(0x01,a3)                    	| [$6ac4: ld   (iy+$01),l]
	LOAD_D5_16_FROM_D5D6
	add.w	d3,d5                            	| [$6ac7: add  hl,de]
	CLEAR_XC_FLAGS                           	| [$6ac8: scf]
												| [$6ac9: ccf]  ??? 
l_6aca:
	rts                                    	| [$6aca: ret]

l_6acb:
	exg	d3,d5                              	| [$6acb: ex   de,hl]
	moveq	#0,d1                               	| [$6acf: ld   b,$00]
	move.b	(0x01,a3),d1                    	| [$6acc: ld   c,(iy+$01)]
	btst.b	#5,(a3)                    	| [$6ad1: bit  5,(iy+$00)]
	jeq	l_6ad9                             	| [$6ad5: jr   z,$6AD9]
	or.w	#0xFF00,d1                                	| [$6ad7: ld   b,$FF]
l_6ad9:
	move.w	d1,-(sp)                    	| [$6ad9: push bc]
	LOAD_D1D2_FROM_D1_16
	jbsr	compute_d1w_6bb9                            	| [$6ada: call $6BB9]
	add.w	d1,d5                            	| [$6add: add  hl,bc]
	exg	d3,d5                              	| [$6ade: ex   de,hl]
	move.w	(sp)+,d5                        	| [$6adf: pop  hl]
	move.b	(character_x_right_01,a2),d0    	| [$6ae0: ld   a,(ix+character_x_right_01)]
	and.b	#0x0F,d0                         	| [$6ae3: and  $0F]
	move.b	d0,d2                           	| [$6ae5: ld   c,a]
	moveq	#0,d1                               	| [$6ae6: ld   b,$00]
	jbsr	compute_d1w_6bb9                            	| [$6ae8: call $6BB9]
	add.w	d1,d5                            	| [$6aeb: add  hl,bc]
	bclr.b	#5,(a3)                    	| [$6aec: res  5,(iy+$00)]
	tst.w	d5                           	| [$6af0: bit  7,h]
	jpl	l_6b07                             	| [$6af2: jr   z,$6B07]
	bset.b	#5,(a3)                    	| [$6af4: set  5,(iy+$00)]
	move.w	d5,d0                           	| [$6af8: ld   a,h]
	rol.w	#8,d0
	cmp.b	#0xFF,d0                         	| [$6af9: cp   $FF]
	jcs	l_6b04                             	| [$6afb: jr   c,$6B04]
	move.b	(character_y_offset_03,a2),d0   	| [$6afd: ld   a,(ix+character_y_offset_03)]
	not.b	d0                               	| [$6b00: cpl]
	cmp.b	d5,d0                            	| [$6b01: cp   l]
	jcs	l_6b07                             	| [$6b02: jr   c,$6B07]
l_6b04:
	SET_XC_FLAGS                           	| [$6b04: scf]
	jra	l_6b0d                             	| [$6b05: jr   $6B0D]
l_6b07:
	move.b	d5,(0x01,a3)                    	| [$6b07: ld   (iy+$01),l]
	add.w	d3,d5                            	| [$6b0a: add  hl,de]
	CLEAR_XC_FLAGS                           	| [$6b0b: scf]
	                        	| [$6b0c: ccf]
l_6b0d:
	rts                                    	| [$6b0d: ret]

l_6b0e:
	btst.b	#6,(a3)                    	| [$6b0e: bit  6,(iy+$00)]
	jeq	l_6b33                             	| [$6b12: jr   z,$6B33]
	jbsr	l_6a8d                            	| [$6b14: call $6A8D]
	jcc	l_6b31                             	| [$6b17: jr   nc,$6B31]
	jbsr	compute_d1w_6bb9                            	| [$6b19: call $6BB9]
	add.w	d1,d5                            	| [$6b1c: add  hl,bc]
	bclr.b	#6,(a3)                    	| [$6b1d: res  6,(iy+$00)]
	move.b	d5,(0x01,a3)                    	| [$6b21: ld   (iy+$01),l]
	bclr.b	#5,(a3)                    	| [$6b24: res  5,(iy+$00)]
	tst.w	d5                           	| [$6b28: bit  7,h]
	jpl	l_6b30                             	| [$6b2a: jr   z,$6B30]
	bset.b	#5,(a3)                    	| [$6b2c: set  5,(iy+$00)]
l_6b30:
	add.w	d3,d5                            	| [$6b30: add  hl,de]
l_6b31:
	jra	l_6b50                             	| [$6b31: jr   $6B50]
l_6b33:
	jbsr	l_6acb                            	| [$6b33: call $6ACB]
	jcc	l_6b50                             	| [$6b36: jr   nc,$6B50]
	jbsr	compute_d1w_6bb9                            	| [$6b38: call $6BB9]
	add.w	d1,d5                            	| [$6b3b: add  hl,bc]
	bset.b	#6,(a3)                    	| [$6b3c: set  6,(iy+$00)]
	move.b	d5,(0x01,a3)                    	| [$6b40: ld   (iy+$01),l]
	bset.b	#5,(a3)                    	| [$6b43: set  5,(iy+$00)]
	tst.w	d5                           	| [$6b47: bit  7,h]
	jmi	l_6b30                             	| [$6b49: jr   nz,$6B30]
	bclr.b	#5,(a3)                    	| [$6b4b: res  5,(iy+$00)]
	add.w	d3,d5                            	| [$6b4f: add  hl,de]
l_6b50:
	rts                                    	| [$6b50: ret]

l_6b51:
	btst.b	#6,(a3)                    	| [$6b51: bit  6,(iy+$00)]
	jeq	l_6b6b                             	| [$6b55: jr   z,$6B6B]
	jbsr	l_6a8d                            	| [$6b57: call $6A8D]
	jcc	l_6b69                             	| [$6b5a: jr   nc,$6B69]
	bclr.b	#6,(a3)                    	| [$6b5c: res  6,(iy+$00)]
	bclr.b	#5,(a3)                    	| [$6b60: res  5,(iy+$00)]
	clr.b	(0x01,a3)                        	| [$6b64: ld   (iy+$01),$00]
	exg	d3,d5                              	| [$6b68: ex   de,hl]
l_6b69:
	jra	l_6b7d                             	| [$6b69: jr   $6B7D]
l_6b6b:
	jbsr	l_6acb                            	| [$6b6b: call $6ACB]
	jcc	l_6b7d                             	| [$6b6e: jr   nc,$6B7D]
	bset.b	#6,(a3)                    	| [$6b70: set  6,(iy+$00)]
	bclr.b	#5,(a3)                    	| [$6b74: res  5,(iy+$00)]
	clr.b	(0x01,a3)                        	| [$6b78: ld   (iy+$01),$00]
	exg	d3,d5                              	| [$6b7c: ex   de,hl]
l_6b7d:
	rts                                    	| [$6b7d: ret]

l_6b7e:
	ILLEGAL		| ??? where/when is it called?
	move.b	(0x2,a2),d6                    	| [$6b7e: ld   l,(ix+$02)]
	move.b	(0x3,a2),d5   	| [$6b81: ld   h,(ix+3)]
	jbsr	load_d5d6_address_from_6bdc_in_a0
	moveq	#0,d1                               	| [$6b87: ld   b,$00]
	move.b	(0x01,a3),d1                    	| [$6b84: ld   c,(iy+$01)]
	add.w	d1,a0                            	| [$6b89: add  hl,bc]
 	                         	| [$6b8a: ld   c,(hl)] useless!!
	move.b	(character_x_right_01,a2),d0    	| [$6b8b: ld   a,(ix+character_x_right_01)]
	and.b	#0x0F,d0                         	| [$6b8e: and  $0F]
	jbsr	compute_d1w_from_d0b_68d6           | [$6b90: call $68D6]
	LOAD_D1D2_FROM_D1_16
	jbsr	compute_d1w_6bb9                            	| [$6b93: call $6BB9]
	exg	d3,a0                              	| [$6b96: ex   de,hl]
	add.w	d1,a0                            	| [$6b97: add  hl,bc]
	exg	d3,a0                              	| [$6b98: ex   de,hl]
	addq.w	#1,a0                           	| [$6b99: inc  hl]
	addq.b	#1,(0x01,a3)                    	| [$6b9a: inc  (iy+$01)]
	move.b	(a0),d0                         	| [$6b9d: ld   a,(hl)]
	                               	| [$6b9e: cp   $00]
	jne	l_6bad                             	| [$6ba0: jr   nz,$6BAD]
	move.b	(0x02,a2),d6                    	| [$6ba2: ld   l,(ix+$02)]
	move.b	(0x03,a2),d5   	| [$6ba5: ld   h,(ix+character_y_offset_03)]
	jbsr	load_d5d6_address_from_6bdc_in_a0
	move.b	(a0),d0                         	| [$6ba8: ld   a,(hl)]
	clr.b	(0x01,a3)                        	| [$6ba9: ld   (iy+$01),$00]
l_6bad:
	                           	| [$6bad: ld   c,a] useless???
	move.b	(character_x_right_01,a2),d0    	| [$6bae: ld   a,(ix+character_x_right_01)]
	and.b	#0x0F,d0                         	| [$6bb1: and  $0F]
	jbsr	compute_d1w_from_d0b_68d6                            	| [$6bb3: call $68D6]
	exg	d3,a0                              	| [$6bb6: ex   de,hl]
	add.w	d1,a0                            	| [$6bb7: add  hl,bc]
	rts                                    	| [$6bb8: ret]
	
* > D1.W
compute_d1w_6bb9:
	move.b	d1,d0                           	| [$6bb9: ld   a,b]
	not.b	d0                               	| [$6bba: cpl]
	move.b	d0,d1                           	| [$6bbb: ld   b,a]
	move.b	d2,d0                           	| [$6bbc: ld   a,c]
	not.b	d0                               	| [$6bbd: cpl]
	move.b	d0,d2                           	| [$6bbe: ld   c,a]
	LOAD_D1_16_FROM_D1D2
	addq.w	#1,d1                           	| [$6bbf: inc  bc]
	rts                                    	| [$6bc0: ret]
l_6bc1:

	move.l	a2,a0                        	| [$6bc1: push ix]
	                        	| [$6bc3: pop  hl]
	move.w	#0x000F,d1                      	| [$6bc4: ld   bc,$000F] 15
	add.w	d1,a0                            	| [$6bc7: add  hl,bc]
	move.b	#0x51,d1                        	| [$6bc8: ld   b,$51]
l_6bca:
	clr.b	(a0)+                             	| [$6bca: ld   (hl),$00]
	                           	| [$6bcc: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_6bca                             	| [$6bcd: djnz $6BCA]
	st.b	(0x16,a2)                 	| [$6bcf: ld   (ix+$16),$FF]
	move.b	#0x7F,(0x0e,a2)                 	| [$6bd3: ld   (ix+$0e),$7F]
	st.b	(move_direction_0d,a2)    	| [$6bd7: ld   (ix+move_direction_0d),$FF]
	rts                                    	| [$6bdb: ret]

table_6BDC:
	.byte	0x80,0x03,0xE3,0x6B,0x00,0x87,0xFF,0xEB,0x6B,0xF3,0x6B,0xFB,0x6B,0x08,0x6C,0x00	| 0x6BDC
	.byte	0x01,0x01,0x10,0x6C,0x00,0x00,0x01,0x01,0x01,0x01,0x2E,0x6C,0xD2,0x6F,0xFF,0x01	| 0x6BEC
	.byte	0x01,0x02,0xE2,0x70,0x00,0x00,0x01,0xDF,0x6F,0xD5,0x70,0xFF,0x01,0x01,0x01,0xDF	| 0x6BFC
	.byte	0x6F,0xD5,0x70,0xFF,0x81,0x00,0x00,0x01,0x00,0x02,0x00,0x03,0x00,0x04,0x00,0x05	| 0x6C0C
	.byte	0x00,0x06,0x00,0x07,0xFF,0x08,0x00,0x09,0x00,0x0A,0x00,0x0B,0x00,0x0C,0x00,0x0D	| 0x6C1C
	.byte	0x00,0x80,0x8F,0x07,0xF8,0x08,0x10,0x09,0x10,0x0A,0x10,0x0B,0x00,0x0C,0x10,0x0D	| 0x6C2C
	.byte	0x00,0x30,0x78,0x00,0x32,0xA0,0x00,0x34,0xBD,0x03,0x8D,0x0C,0x08,0x0D,0x00,0x8F	| 0x6C3C
	.byte	0x07,0xFF,0x9C,0x07,0xF8,0x0C,0x0A,0x0D,0x00,0x00,0x5F,0x02,0xBE,0x34,0xEF,0x00	| 0x6C4C
	.byte	0x9C,0x0D,0x00,0x00,0x50,0x02,0xA0,0x34,0x1C,0x01,0x8E,0x0D,0x00,0x00,0x47,0x02	| 0x6C5C
	.byte	0x8E,0x04,0x3F,0x8E,0x0C,0x0D,0x0D,0x00,0x00,0x43,0x02,0x86,0x04,0x1C,0x8E,0x0D	| 0x6C6C
	.byte	0x00,0x00,0x47,0x02,0x8E,0x04,0x3F,0x8E,0x0D,0x00,0x00,0x50,0x02,0xA0,0x04,0x7C	| 0x6C7C
	.byte	0x8E,0x0D,0x00,0x00,0x55,0x02,0xA9,0x04,0xAA,0x8E,0x08,0x0F,0x09,0x0F,0x0D,0x00	| 0x6C8C
	.byte	0x40,0x50,0x32,0x84,0x6F,0x42,0xA0,0x23,0x84,0x6F,0x04,0xDE,0x8E,0x0D,0x00,0x34	| 0x6C9C
	.byte	0x39,0x02,0x8E,0x08,0x10,0x09,0x10,0x0A,0x0F,0x0D,0x00,0x04,0x7E,0x8E,0x08,0x0F	| 0x6CAC
	.byte	0x09,0x0F,0x0A,0x10,0x0D,0x00,0x00,0x78,0x02,0xEF,0x8F,0x08,0x10,0x09,0x10,0x0C	| 0x6CBC
	.byte	0x10,0x0D,0x00,0x00,0x78,0x02,0xA0,0x34,0xBD,0x03,0x8D,0x0C,0x08,0x0D,0x00,0x8F	| 0x6CCC
	.byte	0x07,0xFF,0x9C,0x07,0xF8,0x0C,0x0A,0x0D,0x00,0x00,0x5F,0x02,0xBE,0x34,0xEF,0x00	| 0x6CDC
	.byte	0x9C,0x0D,0x00,0x00,0x50,0x02,0xA0,0x34,0x1C,0x01,0x8E,0x0D,0x00,0x00,0x47,0x02	| 0x6CEC
	.byte	0x8E,0x04,0x3F,0x8E,0x0C,0x0D,0x0D,0x00,0x00,0x43,0x02,0x86,0x04,0x1C,0x8E,0x0D	| 0x6CFC
	.byte	0x00,0x00,0x47,0x02,0x8E,0x04,0x3F,0x8E,0x0D,0x00,0x00,0x50,0x02,0xA0,0x04,0x7C	| 0x6D0C
	.byte	0x8E,0x0D,0x00,0x00,0x5F,0x02,0xBE,0x04,0xAA,0x8E,0x08,0x0F,0x09,0x0F,0x0D,0x00	| 0x6D1C
	.byte	0x40,0x78,0x33,0x84,0x6F,0x42,0xEF,0x34,0x84,0x6F,0x04,0xDE,0x8E,0x0D,0x00,0x34	| 0x6D2C
	.byte	0x39,0x02,0x8E,0x08,0x10,0x09,0x10,0x0A,0x0F,0x0D,0x00,0x34,0xDE,0x01,0x8E,0x08	| 0x6D3C
	.byte	0x0F,0x09,0x0F,0x0A,0x10,0x0D,0x00,0x30,0x3F,0x01,0x32,0x7E,0x02,0x8F,0x08,0x10	| 0x6D4C
	.byte	0x09,0x10,0x0C,0x10,0x0D,0x00,0x30,0x78,0x00,0x32,0xA0,0x00,0x34,0xBD,0x03,0x8D	| 0x6D5C
	.byte	0x0C,0x08,0x0D,0x00,0x8F,0x07,0xFF,0x9C,0x07,0xF8,0x0C,0x0A,0x0D,0x00,0x00,0x5F	| 0x6D6C
	.byte	0x02,0xBE,0x34,0xEF,0x00,0x9C,0x0D,0x00,0x00,0x50,0x02,0xA0,0x34,0x1C,0x01,0x8E	| 0x6D7C
	.byte	0x0D,0x00,0x00,0x47,0x02,0x8E,0x04,0x3F,0x8E,0x0C,0x0D,0x0D,0x00,0x00,0x43,0x02	| 0x6D8C
	.byte	0x86,0x04,0x1C,0x8E,0x0D,0x00,0x00,0x47,0x02,0x8E,0x04,0x3F,0x8E,0x0D,0x00,0x00	| 0x6D9C
	.byte	0x50,0x02,0xA0,0x04,0x7C,0x8E,0x0D,0x00,0x00,0x55,0x02,0xA9,0x04,0xAA,0x8E,0x08	| 0x6DAC
	.byte	0x0F,0x09,0x0F,0x0D,0x00,0x40,0x50,0x32,0x84,0x6F,0x42,0xA0,0x23,0x84,0x6F,0x04	| 0x6DBC
	.byte	0xDE,0x8E,0x0D,0x00,0x34,0x39,0x02,0x8E,0x08,0x10,0x09,0x10,0x0A,0x0F,0x0D,0x00	| 0x6DCC
	.byte	0x04,0x7E,0x8E,0x08,0x0F,0x09,0x0F,0x0A,0x10,0x0D,0x00,0x00,0x78,0x02,0xEF,0x8F	| 0x6DDC
	.byte	0x08,0x10,0x09,0x10,0x0C,0x10,0x0D,0x00,0x00,0x78,0x02,0xA0,0x34,0xBD,0x03,0x8D	| 0x6DEC
	.byte	0x0C,0x08,0x0D,0x00,0x8F,0x07,0xFF,0x9C,0x07,0xF8,0x0C,0x0A,0x0D,0x00,0x00,0x5F	| 0x6DFC
	.byte	0x02,0xBE,0x34,0xEF,0x00,0x9C,0x0D,0x00,0x00,0x50,0x02,0xA0,0x34,0x1C,0x01,0x8E	| 0x6E0C
	.byte	0x0D,0x00,0x00,0x47,0x02,0x8E,0x04,0x3F,0x8E,0x0C,0x0D,0x0D,0x00,0x00,0x43,0x02	| 0x6E1C
	.byte	0x86,0x04,0x1C,0x8E,0x0D,0x00,0x00,0x47,0x02,0x8E,0x04,0x3F,0x8E,0x0D,0x00,0x00	| 0x6E2C
	.byte	0x50,0x02,0xA0,0x04,0x7C,0x8E,0x0D,0x00,0x00,0x5F,0x02,0xBE,0x04,0xAA,0x9C,0x0C	| 0x6E3C
	.byte	0x20,0x0D,0x00,0x40,0x78,0x33,0x84,0x6F,0x42,0xEF,0x34,0x84,0x6F,0x04,0xDE,0x89	| 0x6E4C
	.byte	0x0C,0x0A,0x0D,0x00,0x00,0x8E,0x32,0x1C,0x01,0x34,0x39,0x02,0x89,0x0D,0x00,0x00	| 0x6E5C
	.byte	0x78,0x32,0xEF,0x00,0x34,0xDE,0x01,0x89,0x0D,0x00,0x00,0x6B,0x02,0xD5,0x04,0xAA	| 0x6E6C
	.byte	0x94,0x0D,0x00,0x00,0x65,0x02,0xC9,0x34,0xBD,0x03,0x88,0x0D,0x00,0x00,0x5F,0x02	| 0x6E7C
	.byte	0xBE,0x94,0x0D,0x00,0x00,0x65,0x02,0xC9,0x34,0xF7,0x02,0x88,0x0D,0x00,0x00,0x5F	| 0x6E8C
	.byte	0x02,0xBE,0x94,0x0D,0x00,0x00,0x50,0x02,0xA0,0x04,0x7E,0x88,0x0D,0x00,0x00,0x5A	| 0x6E9C
	.byte	0x02,0xB3,0x94,0x0D,0x00,0x00,0x5F,0x02,0xBE,0x04,0x39,0x88,0x0D,0x00,0x00,0x78	| 0x6EAC
	.byte	0x02,0xEF,0x04,0x7E,0x94,0x0D,0x00,0x00,0x5F,0x02,0xBE,0x34,0xBD,0x03,0x88,0x0D	| 0x6EBC
	.byte	0x00,0x00,0x5A,0x02,0xB3,0x94,0x0D,0x00,0x00,0x5F,0x02,0xBE,0x34,0xF7,0x02,0x88	| 0x6ECC
	.byte	0x08,0x0F,0x09,0x0F,0x0D,0x00,0x00,0x50,0x02,0xA0,0x94,0x08,0x10,0x09,0x10,0x0D	| 0x6EDC
	.byte	0x00,0x04,0x7E,0x87,0x0D,0x00,0x89,0x0A,0x0F,0x0D,0x00,0x04,0x39,0x89,0x0A,0x10	| 0x6EEC
	.byte	0x0D,0x00,0x00,0x47,0x02,0x8E,0x89,0x0D,0x00,0x00,0x3F,0x02,0x7F,0x04,0x7E,0x9C	| 0x6EFC
	.byte	0x0D,0x00,0x00,0x3C,0x02,0x50,0x34,0xDE,0x01,0x8E,0x08,0x0F,0x09,0x0F,0x0A,0x0D	| 0x6F0C
	.byte	0x00,0x2F,0x02,0x5F,0x8E,0x00,0x2E,0x22,0x5E,0x41,0x94,0x08,0x10,0x09,0x10,0x0D	| 0x6F1C
	.byte	0x00,0x00,0x2C,0x02,0x5A,0x88,0x0D,0x00,0x00,0x2F,0x02,0x5F,0x94,0x0D,0x00,0x00	| 0x6F2C
	.byte	0x3C,0x02,0x78,0x88,0x0D,0x00,0x00,0x50,0x02,0xA0,0x89,0x0A,0x10,0x0D,0x00,0x00	| 0x6F3C
	.byte	0x3C,0x02,0x78,0x34,0xBD,0x03,0x89,0x0D,0x00,0x00,0x43,0x02,0x86,0x34,0xDE,0x01	| 0x6F4C
	.byte	0x89,0x0D,0x00,0x00,0x50,0x02,0xA0,0x34,0x7E,0x02,0x94,0x0D,0x00,0x00,0x3F,0x02	| 0x6F5C
	.byte	0x7F,0x34,0xFB,0x01,0xC0,0x0C,0x30,0x0D,0x00,0x40,0x3C,0x12,0x84,0x6F,0x42,0x78	| 0x6F6C
	.byte	0x13,0x84,0x6F,0x34,0x7E,0x02,0x9C,0x80,0x80,0x81,0x80,0x7F,0x80,0x81,0x80,0x7F	| 0x6F7C
	.byte	0x80,0x81,0x80,0x7F,0x80,0x81,0x80,0x7F,0x80,0x81,0x80,0x7F,0x80,0x81,0x80,0x7F	| 0x6F8C
	.byte	0x80,0x81,0x80,0x7F,0x80,0x81,0x80,0x7F,0x80,0x81,0x80,0x7F,0x80,0x81,0x80,0x7F	| 0x6F9C
	.byte	0x80,0x81,0x80,0x7F,0x80,0x81,0x80,0x7F,0x80,0x81,0x80,0x7F,0x80,0x81,0x80,0x7F	| 0x6FAC
	.byte	0x80,0x81,0x80,0x7F,0x80,0x81,0x80,0x7F,0x80,0x81,0x80,0x7F,0x80,0x81,0x80,0x7F	| 0x6FBC
	.byte	0x80,0x81,0x80,0x7F,0x80,0x00,0xB0,0x11,0x01,0x01,0xB2,0x11,0x01,0x01,0xD4,0x14	| 0x6FCC
	.byte	0x10,0x10,0x00,0x86,0x37,0xF8,0x0F,0x39,0x0D,0x10,0x3B,0x00,0x0A,0x0D,0x00,0x30	| 0x6FDC
	.byte	0x65,0x00,0x32,0xC9,0x00,0x34,0xF6,0x03,0x86,0x00,0x6B,0x02,0xD5,0x86,0x0D,0x00	| 0x6FEC
	.byte	0x00,0x71,0x02,0xE2,0x34,0xA4,0x02,0x86,0x00,0x78,0x02,0xEF,0x8D,0x38,0x10,0x10	| 0x6FFC
	.byte	0x0D,0x00,0x00,0x7F,0x02,0xFD,0x34,0xF6,0x03,0x8D,0x0D,0x00,0x00,0xA9,0x32,0x52	| 0x700C
	.byte	0x01,0x34,0xA4,0x02,0x86,0x38,0x0F,0x0D,0x0D,0x00,0x00,0x65,0x32,0xC9,0x00,0x34	| 0x701C
	.byte	0xF6,0x03,0x86,0x00,0x6B,0x02,0xD5,0x86,0x0D,0x00,0x00,0x71,0x02,0xE2,0x34,0xA4	| 0x702C
	.byte	0x02,0x86,0x00,0x78,0x02,0xEF,0x8D,0x38,0x10,0x10,0x0D,0x00,0x00,0x7F,0x02,0xFD	| 0x703C
	.byte	0x34,0xF6,0x03,0x8D,0x0D,0x00,0x00,0xA9,0x32,0x52,0x01,0x34,0xA4,0x02,0x86,0x38	| 0x704C
	.byte	0x0F,0x0D,0x0D,0x00,0x00,0x55,0x32,0xA9,0x00,0x34,0x49,0x05,0x86,0x00,0x5A,0x02	| 0x705C
	.byte	0xB3,0x86,0x0D,0x00,0x00,0x5F,0x02,0xBE,0x34,0x87,0x03,0x86,0x00,0x65,0x02,0xC9	| 0x706C
	.byte	0x8D,0x38,0x10,0x10,0x0D,0x00,0x00,0x71,0x02,0xE2,0x34,0x49,0x05,0x8D,0x0D,0x00	| 0x707C
	.byte	0x00,0x65,0x02,0xC9,0x34,0x87,0x03,0x87,0x38,0x0F,0x0D,0x0D,0x00,0x00,0x7F,0x02	| 0x708C
	.byte	0xFD,0x34,0xFB,0x01,0x86,0x00,0xB3,0x32,0x66,0x01,0x86,0x0D,0x00,0x00,0xA9,0x02	| 0x709C
	.byte	0x52,0x34,0xA4,0x02,0x86,0x00,0xA0,0x02,0x3F,0x86,0x0D,0x00,0x00,0x97,0x02,0x2D	| 0x70AC
	.byte	0x34,0xF6,0x03,0x86,0x00,0x8E,0x02,0x1C,0x86,0x0D,0x00,0x00,0x86,0x02,0x0C,0x34	| 0x70BC
	.byte	0x49,0x05,0x86,0x00,0x7F,0x32,0xFD,0x00,0x80,0xE0,0x11,0x03,0x03,0xD2,0x12,0x06	| 0x70CC
	.byte	0x06,0xC4,0x14,0x0C,0x0C,0x00,0xFF,0x37,0xFF,0x00,0x39,0x00,0x00,0xF0,0x80,0x31	| 0x70DC
	.byte	0x00,0x88,0x3E,0x01,0x32,0xEA,0x82,0xCD,0x3A,0x71,0x3E,0x00,0x32,0xAC,0x80,0x3E	| 0x70EC
	.byte	0x20,0x32,0x0E,0xD5,0x32,0x4D,0x82,0x3E,0xC0,0x32,0x0B,0xD5,0xCD,0x4D,0x36,0x21	| 0x70FC
	.byte	0x5A,0x71,0x11,0xEE,0xC5,0xCD,0xF9,0x29,0x3E,0x5A,0x32,0xC5,0x85,0xCD,0xC2,0x26	| 0x710C
	.byte	0xCD,0xCF,0x73,0x3A,0x0C,0xD4,0xCB,0x6F,0xC2,0x2C,0x71,0x3E,0x5A,0x32,0xC5,0x85	| 0x711C
	.byte	0x3A,0xC5,0x85,0x3D,0x32,0xC5,0x85,0x20,0xE7,0xF3,0x3E,0x33,0xE7,0xC7,0xAF,0x32	| 0x712C
	.byte	0xAB,0x80,0xFB,0x21,0x07,0x3F,0x22,0x0E,0xD4,0xAF,0x32,0x36,0x82,0xCD,0xE1,0x71	| 0x713C
	.byte	0x3E,0x01,0x32,0xD9,0x81,0xCD,0x0C,0x26,0x3E,0x02,0x32,0xA9,0x80,0xC9,0x31,0x2C	| 0x714C
	.byte	0x1B,0x31,0xFF,0xCD,0x9A,0x71,0xCD,0x50,0x72,0x21,0xA3,0x80,0x7E,0x23,0xB6,0xC2	| 0x715C
	.byte	0x40,0x29,0xCD,0xC2,0x26,0xCD,0x61,0x72,0xCD,0x00,0x74,0x3A,0xA2,0x80,0xB7,0xC0	| 0x716C
	.byte	0x21,0xA3,0x80,0x7E,0x23,0xB6,0xC2,0x40,0x29,0x21,0x3F,0x86,0x34,0x7E,0xFE,0x08	| 0x717C
	.byte	0x38,0xE3,0x36,0x00,0x23,0x34,0x7E,0xFE,0x5A,0x38,0xDA,0xC3,0x40,0x29,0xAF,0x32	| 0x718C
	.byte	0x36,0x82,0xCD,0xE1,0x71,0x3E,0x01,0x32,0xD9,0x81,0xCD,0x0C,0x26,0x3E,0x01,0x32	| 0x719C
	.byte	0xAC,0x80,0x3E,0x01,0x32,0xA9,0x80,0xCD,0x39,0x58,0xCD,0xC6,0x57,0xCD,0xB0,0x10	| 0x71AC
	.byte	0xCD,0xF9,0x71,0xFD,0xE5,0xDD,0xE5,0xDD,0x21,0x99,0xC7,0xFD,0x21,0x76,0x81,0x06	| 0x71BC
	.byte	0x05,0x0E,0x53,0xDD,0x7E,0xAD,0x81,0xFD,0x77,0x53,0xFD,0x23,0xDD,0x23,0x10,0xF3	| 0x71CC
	.byte	0xDD,0xE1,0xFD,0xE1,0xC9,0x3A,0x4E,0x82,0x57,0x3A,0x36,0x82,0xCB,0x7A,0x28,0x01	| 0x71DC
	.byte	0xAF,0x47,0xAF,0xCB,0x72,0x28,0x01,0x3C,0xA8,0x32,0xD8,0x81,0xC9,0x3A,0x50,0x82	| 0x71EC
end_table_6BDC:


title_and_insert_coin_sequence_715F:
	jbsr	init_title_state_719a                            	| [$715f: call $719A]
	jbsr	init_title_screen_7250           | [$7162: call $7250]
	* check both coin slot flags
	lea	coin_slot_1_activated_80A3(a6),a0                      	| [$7165: ld   hl,$80A3]
	move.b	(a0)+,d0                         	| [$7168: ld   a,(hl)]
	                           	| [$7169: inc  hl]
	or.b	(a0),d0                           	| [$716a: or   (hl)]
	jne	goto_next_screen_2940                             	| [$716b: jp   nz,$2940]
	jbsr	reload_8bit_timer_26C2           	| [$716e: call reload_8bit_timer_26C2]
title_screen_loop_7171:
	jbsr	title_animation_7261              	| [$7171: call $7261]
	jbsr	protection_check_7400              	| [$7174: call $7400]
	tst.b	nb_credits_80A2(a6)          	| [$7177: ld   a,(nb_credits_80A2)]
	                             	| [$717a: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$717b: ret  nz] [...]
0:
	* check both coin slot flags
	lea	coin_slot_1_activated_80A3(a6),a0                      	| [$717c: ld   hl,$80A3]
	move.b	(a0)+,d0                         	| [$717f: ld   a,(hl)]
	                           	| [$7180: inc  hl]
	or.b	(a0),d0                           	| [$7181: or   (hl)]
	jne	goto_next_screen_2940     | goto next screen if coin inserted                           	| [$7182: jp   nz,$2940]
	* increase timer for title screen
	lea	title_screen_16bit_timer_836F(a6),a0    | [$7185: ld   hl,$863F]
	addq.b	#1,(a0)                         	| [$7188: inc  (hl)]
	move.b	(a0),d0                         	| [$7189: ld   a,(hl)]
	cmp.b	#0x08,d0                         	| [$718a: cp   $08]
	jcs	title_screen_loop_7171                  | [$718c: jr   c,$7171]
	clr.b	(a0)+                             	| [$718e: ld   (hl),$00]
	                           	                | [$7190: inc  hl]
	addq.b	#1,(a0)                         	| [$7191: inc  (hl)]
	move.b	(a0),d0                         	| [$7192: ld   a,(hl)]
	cmp.b	#0x5A,d0                         	| [$7193: cp   $5A]
	jcs	title_screen_loop_7171                  | [$7195: jr   c,$7171]
	* timeout for title screen
	jra	goto_next_screen_2940                             	| [$7197: jp   $2940]
init_title_state_719a:
	clr.b	d0                               	| [$719a: xor  a]
	move.b	d0,current_player_is_p2_8236(a6)                   	| [$719b: ld   ($8236),a]
	jbsr	l_71e1                            	| [$719e: call $71E1]
	move.b	#0x01,d0                        	| [$71a1: ld   a,$01]
	move.b	d0,menu_or_game_tiles_81D9(a6)  	| [$71a3: ld   (menu_or_game_tiles_81D9),a]
	jbsr	init_hw_scroll_and_charset_260C                            	| [$71a6: call $260C]
	move.b	#GS_TITLE_01,d0                 	| [$71a9: ld   a,GS_TITLE_01]
	move.b	d0,game_state_80AC(a6)          	| [$71ab: ld   (game_state_80AC),a]
	move.b	#0x01,d0                        	| [$71ae: ld   a,$01]
	move.b	d0,timer_8bit_reload_value_80A9(a6)	| [$71b0: ld   (timer_8bit_reload_value_80A9),a]
	jbsr	display_status_bars_5839                            	| [$71b3: call $5839]
	jbsr	update_upper_status_bar_57C6      	| [$71b6: call update_upper_status_bar_57C6]
	jbsr	display_credit_info_10b0          	| [$71b9: call display_credit_info_10b0]
	jbsr	l_71f9                            	| [$71bc: call $71F9]

	move.l	a3,-(sp)                        	| [$71bf: push iy]

	move.l	a2,-(sp)                        	| [$71c1: push ix]
	lea	l_C799(a6),a2                      	| [$71c3: ld   ix,$C799]
	lea	l_8176(a6),a3                      	| [$71c7: ld   iy,$8176]
	move.b	#0x05,d1                        	| [$71cb: ld   b,$05]
	move.b	#0x53,d2                        	| [$71cd: ld   c,$53]
l_71cf:
	move.b	(-0x53,a2),d0                   	| [$71cf: ld   a,(ix-$53)]
	add.b	d2,d0                            	| [$71d2: add  a,c]
	move.b	d0,(0x53,a3)                    	| [$71d3: ld   (iy+$53),a]
	addq.w	#1,a3                           	| [$71d6: inc  iy]
	addq.w	#1,a2                           	| [$71d8: inc  ix]
	subq.b	#1,d1                           	| [...]
	jne	l_71cf                             	| [$71da: djnz $71CF]
	move.l	(sp)+,a2                        	| [$71dc: pop  ix]
	move.l	(sp)+,a3                        	| [$71de: pop  iy]
	rts                                    	| [$71e0: ret]
l_71e1:
	move.b	copy_of_dip_switches_1_824E(a6),d0	| [$71e1: ld   a,(copy_of_dip_switches_1_824E)]
	move.b	d0,d3                           	| [$71e4: ld   d,a]
	move.b	current_player_is_p2_8236(a6),d0                   	| [$71e5: ld   a,($8236)]
	btst.b	#7,d3                           	| [$71e8: bit  7,d]
	jeq	l_71ed                             	| [$71ea: jr   z,$71ED]
	clr.b	d0                               	| [$71ec: xor  a]
l_71ed:
	move.b	d0,d1                           	| [$71ed: ld   b,a]
	clr.b	d0                               	| [$71ee: xor  a]
	btst.b	#6,d3                           	| [$71ef: bit  6,d]
	jeq	l_71f4                             	| [$71f1: jr   z,$71F4]
	addq.b	#1,d0                           	| [$71f3: inc  a]
l_71f4:
	eor.b	d1,d0                            	| [$71f4: xor  b]
	move.b	d0,flip_screen_81D8(a6)                   	| [$71f5: ld   ($81D8),a]
	rts                                    	| [$71f8: ret]
l_71f9:
	move.b	copy_of_dip_switches_3_8250(a6),d0	| [$71f9: ld   a,(copy_of_dip_switches_3_8250)]
	lea	table_720F,a0                      	| [$71fc: ld   hl,table_720F]
	btst.b	#5,d0                           	| [$71ff: bit  5,a]
	jeq	l_7206                             	| [$7201: jr   z,$7206]
	lea	table_7238,a0                      	| [$7203: ld   hl,table_7238]
l_7206:
	lea	l_C744(a6),a1                      	| [$7206: ld   de,$C744]
	move.w	#0x0018,d1                      	| [$7209: ld   bc,$0018] 24
	jbsr	ldir_video                              	| [$720c: ldir]
	rts                                    	| [$720e: ret]

table_720F:
	.byte	0x24
	.byte	0x00
	.byte	0x31,0x1C,0x2C
	.byte	0x31,0x2F,0x00
	.byte	0x2E,0x2F
	.byte	0x1F
	.byte	0x1A
	.byte	0x06,0x00
	.byte	0x20,0x2E
	.byte	0x20,0x1B
	.byte	0x21,0x21,0x21
	.byte	0x2C
	.byte	0x2C
	.byte	0x2C

table_7238:
	.byte	0x24,0x00,0x31,0x1C,0x2C,0x31,0x2F,0x00,0x2E,0x2F,0x1F,0x1A,0x2F,0x1F,0x1C,0x31
	.byte	0x2C,0x2F,0x25,0x00,0x00,0x00,0x00,0x00
	.align	2
	
init_title_screen_7250:
	move.w	#0x0000,d5                      	| [$7250: ld   hl,$0000] 0
	STORE_WORD	d5,title_screen_16bit_timer_836F(a6)            	| [$7253: ld   ($863F),hl]

	lea	title_letters_y_scroll_values_862F(a6),a0                      	| [$7256: ld   hl,$862F]
	move.b	#0x10,d1                        	| [$7259: ld   b,$10]
l_725b:
	clr.b	(a0)+                             	| [$725b: ld   (hl),$00]
	                           	| [$725d: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_725b                             	| [$725e: djnz $725B]
	rts                                    	| [$7260: ret]

title_animation_7261:
	jbsr	update_title_y_scroll_value_72af                            	| [$7261: call $72AF]
	lea	l_CC08(a6),a0                      	| [$7264: ld   hl,$CC08]
	STORE_POINTER	a0,letter_screen_address_8609(a6)            	| [$7267: ld   ($8609),hl]

	moveq	#0,d0                          	| [$726a: ld   hl,$7361]
	STORE_WORD	d0,rom_offset_7361_860B(a6)       	| [$726d: ld   ($860B),hl]
	lea	source_dest_letter_pointers_860F(a6),a0    	| [$7270: ld   hl,$860F]
	STORE_POINTER	a0,ram_pointer_860D(a6)        	| [$7273: ld   ($860D),hl]

	lea	title_letters_y_scroll_values_862F(a6),a1                      	| [$7276: ld   de,$862F]
	move.b	#0x08,d1                        	| [$7279: ld   b,$08]
l_727b:
	move.b	(a1)+,d0                         	| [$727b: ld   a,(de)]
	move.b	d0,l_8608(a6)                   	| [$727c: ld   ($8608),a]
	                           	| [$727f: inc  de]
	move.b	(a1)+,d0                         	| [$7280: ld   a,(de)]
	move.b	d0,l_8607(a6)                   	| [$7281: ld   ($8607),a]
	                           	| [$7284: inc  de]
	movem.w	d3/d4,-(sp)                    	| [$7285: push de]
	move.l	a1,-(sp)                        	| [$7285: push de]
	movem.w	d1/d2,-(sp)                    	| [$7286: push bc]
	jbsr	animate_elevator_letters_7334     	| [$7287: call $7334]
	jbsr	feed_scroll_with_elevator_letters_73a5 	| [$728a: call $73A5]
	* next letter (2 bytes to the right)
	LOAD_POINTER	letter_screen_address_8609(a6),a0             	| [$728d: ld   hl,($8609)]
	addq.w	#2,a0                           	| [$7290: inc  hl] * 2
	STORE_POINTER	a0,letter_screen_address_8609(a6)            	| [$7292: ld   ($8609),hl]
	LOAD_WORD	rom_offset_7361_860B(a6),d5             	| [$7295: ld   hl,($860B)]
	                      	| [$7298: ld   de,$0008] 8
	addq.w	#8,d5                            	| [$729b: add  hl,de]
	STORE_WORD	d5,rom_offset_7361_860B(a6)            	| [$729c: ld   ($860B),hl]
	movem.w	(sp)+,d1/d2                    	| [$729f: pop  bc]
	move.l	(sp)+,a1                        	| [$72a0: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$72a0: pop  de]
	subq.b	#1,d1                           	| [...]
	jne	l_727b                             	| [$72a1: djnz $727B]
	lea	l_863E(a6),a0                      	| [$72a3: ld   hl,$863E]
	move.b	#0x08,d1                        	| [$72a6: ld   b,$08]
l_72a8:
	move.b	(a0),d0                         	| [$72a8: ld   a,(hl)]
	                           	| [$72a9: dec  hl]
	move.b	d0,-(a0)                         	| [$72aa: ld   (hl),a]
	subq.w	#1,a0                           	| [$72ab: dec  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_72a8                             	| [$72ac: djnz $72A8]
	rts                                    	| [$72ae: ret]

update_title_y_scroll_value_72af:
	move.b	action_letter_timer_8640(a6),d0     | [$72af: ld   a,($8640)]
	move.b	d0,d2                           	| [$72b2: ld   c,a]
	lea	title_letters_y_scroll_values_862F(a6),a1                      	| [$72b3: ld   de,$862F]
	lea	table_72D4-2(pc),a0                    	| [$72b6: ld   hl,table_72D4-2]
	move.b	#0x08,d1                        	| [$72b9: ld   b,$08]
l_72bb:
	                    	| [$72bb: push bc]

	move.l	a0,-(sp)                        	| [$72bc: push hl]
	move.b	d2,d0                           	| [$72bd: ld   a,c]
l_72be:
	addq.w	#2,a0                           	| [$72be: inc  hl]
	                          	                | [$72bf: inc  hl]
	cmp.b	(a0),d0                          	| [$72c0: cp   (hl)]
	jcc	l_72be                             	    | [$72c1: jr   nc,$72BE]
	addq.w	#1,a0                           	| [$72c3: inc  hl]
	move.b	(a0),d0                         	| [$72c4: ld   a,(hl)]
	move.b	d0,(a1)+                         	| [$72c5: ld   (de),a]
	                           	| [$72c6: inc  de]
	move.b	(a1),d0                         	| [$72c7: ld   a,(de)]
	add.b	(a0),d0                          	| [$72c8: add  a,(hl)]
	move.b	d0,(a1)+                         	| [$72c9: ld   (de),a]
	                           	| [$72ca: inc  de]
	move.l	(sp)+,a0                        	| [$72cb: pop  hl]
	                      	| [$72cc: ld   bc,$000C] 12
	add.w	#0xC,a0                            	| [$72cf: add  hl,bc]
	                    	| [$72d0: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_72bb                             	| [$72d1: djnz $72BB]
	rts                                    	| [$72d3: ret]

table_72D4:
	.byte	0x01,0x00
	.byte	0x15,0xFF
	.byte	0x1F,0x02
	.byte	0x26,0x00
	.byte	0x31,0xFF
	.byte	0xFF,0x00
	.byte	0x02,0x00
	.byte	0x16,0xFF
	.byte	0x1F,0x01
	.byte	0xFF,0x00
	.byte	0xFF,0x00
	.byte	0xFF,0x00
	.byte	0x03,0x00
	.byte	0x17,0xFF
	.byte	0x21,0x02,0x26
	.byte	0x00
	.byte	0x31,0xFF,0xFF
	.byte	0x00
	.byte	0x04
	.byte	0x00
	.byte	0x18,0xFF
	.byte	0x21,0x01,0xFF
	.byte	0x00
	.byte	0xFF
	.byte	0x00
	.byte	0xFF
	.byte	0x00
	.byte	0x05
	.byte	0x00
	.byte	0x19
	.byte	0xFF
	.byte	0x23
	.byte	0x02
	.byte	0x26,0x00
	.byte	0x31,0xFF,0xFF
	.byte	0x00
	.byte	0x06,0x00
	.byte	0x1A
	.byte	0xFF
	.byte	0x23
	.byte	0x01,0xFF,0x00
	.byte	0xFF
	.byte	0x00
	.byte	0xFF
	.byte	0x00
	.byte	0x07
	.byte	0x00
	.byte	0x1B
	.byte	0xFF
	.byte	0x25
	.byte	0x02
	.byte	0x26,0x00
	.byte	0x31,0xFF,0xFF
	.byte	0x00
	.byte	0x08
	.byte	0x00
	.byte	0x1C
	.byte	0xFF
	.byte	0x25
	.byte	0x01,0xFF,0x00
	.byte	0xFF
	.byte	0x00
	.byte	0xFF
	.byte	0x00
	.align	2


animate_elevator_letters_7334:
	move.b	l_8608(a6),d0                   	| [$7334: ld   a,($8608)]
	move.w	#0x73A1,d3                          	| [$7338: ld   de,$73A1]
	subq.b	#1,d0                           	| [$7337: dec  a]
	jpl	l_7356                             	| [$733b: jp   p,$7356]
	move.b	l_8607(a6),d0                   	| [$733e: ld   a,($8607)]
	neg.b	d0                               	| [$7341: neg]
	move.w	#0x73A3,d3                          	| [$7345: ld   de,$73A3]
	cmp.b	#0x20,d0                         	| [$7343: cp   $20]
	jcc	l_7356                             	| [$7348: jr   nc,$7356]
	and.b	#0xF8,d0                         	| [$734a: and  $F8]
	ror.b	#2,d0                            	| [$734c: rrca] * 2
	moveq   #0,d3                               	| [$734f: ld   d,$00]
	move.b	d0,d3                           	| [$734e: ld   e,a]
	LOAD_WORD	rom_offset_7361_860B(a6),d5    | [$7351: ld   hl,($860B)]
	add.w	d3,d5                            	| [$7354: add  hl,de]
	exg	d3,d5                              	| [$7355: ex   de,hl]
	add.w	#0x7361,d3
l_7356:
	LOAD_POINTER	ram_pointer_860D(a6),a0   | [$7356: ld   hl,($860D)]
	LOAD_D3D4_FROM_D3_16
	
	move.b	d4,(a0)+                         	| [$7359: ld   (hl),e]
	                           	| [$735a: inc  hl]
	move.b	d3,(a0)+                         	| [$735b: ld   (hl),d]
	                           	| [$735c: inc  hl]
	STORE_POINTER	a0,ram_pointer_860D(a6)            	| [$735d: ld   ($860D),hl]
	rts                                    	| [$7360: ret]


feed_scroll_with_elevator_letters_73a5:
	move.b	l_8607(a6),d0                   	| [$73a5: ld   a,($8607)]
	and.b	#0xF8,d0                         	| [$73a8: and  $F8]
	moveq	#0,d5                               	| [$73ab: ld   h,$00]
	move.b	d0,d5                           	| [$73aa: ld   l,a]
	add.w	d5,d5                            	| [$73ad: add  hl,hl]
	add.w	d5,d5                            	| [$73ae: add  hl,hl]
	move.b	l_8608(a6),d0                   	| [$73af: ld   a,($8608)]
	subq.b	#1,d0                           	| [$73b2: dec  a]
	jpl	l_73be                             	| [$73b3: jp   p,$73BE]
	move.w	#0x0020,d3                      	| [$73b6: ld   de,$0020] 32
	add.w	d3,d5                            	| [$73b9: add  hl,de]
	                           	| [$73ba: ld   a,h]
	and.w	#0x03FF,d5                         	| [$73bb: and  $03]
	                           	| [$73bd: ld   h,a]
l_73be:
	LOAD_WORD	letter_screen_address_8609(a6),d3             	| [$73be: ld   de,($8609)]

	add.w	d5,d3                            	| [$73c2: add  hl,de]
	                              	| [$73c3: ex   de,hl]
	LOAD_POINTER	ram_pointer_860D(a6),a0             	| [$73c4: ld   hl,($860D)]
	LOAD_D3D4_FROM_D3_16
	* store address of elevator letter table here
	move.b	d4,(a0)+                         	| [$73c7: ld   (hl),e]
	                           	| [$73c8: inc  hl]
	move.b	d3,(a0)+                         	| [$73c9: ld   (hl),d]
	                           	| [$73ca: inc  hl]
	STORE_POINTER	a0,ram_pointer_860D(a6)            	| [$73cb: ld   ($860D),hl]
	rts                                    	| [$73ce: ret]


elevator_letter_table_7361:
	.byte	0x86,0x87,0x84,0x85,0x82,0x83,0x80,0x81,0x8D,0x8E,0x8B,0x8C,0x8B,0x00,0x89,0x8A
	.byte	0x86,0x87,0x84,0x85,0x82,0x83,0x80,0x81,0x95,0x96,0x93,0x94,0x91,0x92,0x8F,0x90
	.byte	0x9D,0x9D,0x9B,0x9C,0x99,0x9A,0x97,0x98,0xA5,0xA6,0xA3,0xA4,0xA1,0xA2,0x9F,0xA0
	.byte	0xAB,0xAC,0xA9,0xAA,0xA9,0xAA,0xA7,0xA8,0xB3,0xB4,0xB1,0xB2,0xAF,0xB0,0xAD,0xAE
	.byte	0x00,0x00,0xF8,0xF9
	.align	2
	
game_tick_73cf:
	jbsr	check_credits_0fea                            	| [$73cf: call $0FEA]
	move.b	#0x01,d0                        	| [$73d2: ld   a,$01]
	move.b	d0,sync_flag_80AB(a6)                   	| [$73d4: ld   ($80AB),a]
	lea	l_85C6(a6),a0                      	| [$73d7: ld   hl,$85C6]
	btst.b	#6,(a0)                         	| [$73da: bit  6,(hl)]
	jne	l_73f2                             	| [$73dc: jr   nz,$73F2]
l_73de:
	move.b	#0x06,d0                        	| [$73de: ld   a,$06]
	btst.b	#5,(a0)                         	| [$73e0: bit  5,(hl)]
	jeq	l_73e6                             	| [$73e2: jr   z,$73E6]
	move.b	#0x03,d0                        	| [$73e4: ld   a,$03]
l_73e6:
	*jbsr	protection_related_77dd                            	| [$73e6: call $77DD]
	move.b	(a0),d0                         	| [$73e9: ld   a,(hl)]
	addq.b	#1,(a0)                         	| [$73ea: inc  (hl)]
	jbsr	rst_28                            	| [$73eb: rst  $28]
	* this part performs a bank switch and other stuff which installs
	* part of game code in RAM
	* now fuck this, RAM code in 85cf/85ef is already present
											| [$73ec: ld   hl,$85C6]
											| [$73ef: ld   c,(hl)]
												| [$73f0: add  hl,bc]
* bootleg: end original code, replacement code below
	                             	| [$73ec: jp   $34E4]
       	| [$73ef: pop  af]
       	| [$73f0: pop  hl]

       	| [$73f1: ld   (hl),a]
l_73f2:
	.ifndef	RELEASE
	tst.b	no_sync_flag
	jeq		0f
	rts
	.endif
0:
	tst.b	sync_flag_80AB(a6)                   	| [$73f2: ld   a,($80AB)]
	                             	| [$73f5: or   a]
	jne	0b                             	| [$73f6: jr   nz,$73F2]
	rts                                    	| [$73f8: ret]
	
	
table_73F9:
	.byte	0x1E,0x12
	.byte	0x08
	.byte	0x1D
	.byte	0x02
	.byte	0x08
	.byte	0x5E
	.align	2
	

* cannot be skipped, as it does other things
protection_check_7400:
	jbsr	check_credits_0fea                            	| [$7400: call $0FEA]
	move.b	#0x01,d0                        	| [$7403: ld   a,$01]
	move.b	d0,sync_flag_80AB(a6)                   	| [$7405: ld   ($80AB),a]
	lea	l_85C6(a6),a0                      	| [$7408: ld   hl,$85C6]
	btst.b	#6,(a0)                         	| [$740b: bit  6,(hl)]
	jeq	l_73de                             	| [$740d: jr   z,$73DE]
	move.b	#0x09,d0                        	| [$740f: ld   a,$09]
	*jbsr	protection_related_77dd                            	| [$7411: call $77DD]
	move.b	sync_flag_80AB(a6),d0                   	| [$7414: ld   a,($80AB)]
	                             	| [$7417: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$7418: ret  z] [...]
0:
	move.b	pseudo_random_seed_81D6(a6),d0  	| [$7419: ld   a,(pseudo_random_seed_81D6)]
	and.b	#0x07,d0                         	| [$741c: and  $07]
	move.b	d0,d2                           	| [$741e: ld   c,a]
	moveq	#0,d1                               	| [$741f: ld   b,$00]
	jbsr	rst_28                            	| [$7421: rst  $28]
	                   	| [$7422: ld   hl,table_73F9-1]
	                     	| [$7425: add  hl,bc]

	
	                        	| [$7426: xor  (hl)]
* bootleg: should jump inconditionally
	jra	l_73f2                             	| [$7427: jr   z,$73F2] bootleg: should be jr $73F2
* bootleg end. Rest of the code is meant to crash
* protection fails: jump in the woods
   	| [$7429: pop  hl]
   	| [$742a: pop  bc]
  	| [$742a: pop  bc]
   	| [$742b: pop  de]
  	| [$742b: pop  de]
   	| [$742c: pop  ix]
  	| [$742e: jp   (ix)] indirect call!! looks like a protection!

title_animation_7430:
	jbsr	update_title_elevator_scroll_7437                            	| [$7430: call $7437]
	jbsr	display_action_title_7475                            	| [$7433: call $7475]
	rts                                    	| [$7436: ret]


update_title_elevator_scroll_7437:
	lea	title_letters_y_scroll_values_862F(a6),a0	| [$7437: ld   hl,title_letters_y_scroll_values_862F]
	                          	| [$743a: ld   de,$D048]
	moveq 	#0,d1
0:
	move.b	(a0)+,d0
	addq.w	#1,a0		| same value twice
	jbsr	osd_set_column_scroll
	addq	#1,d1
	cmp.b	#8,d1
	jne		0b
									| [$743d: ldi]
									| [$743f: ldi]
	
									| [$7441: ldi]
									| [$7443: ldi]
	
									| [$7445: ldi]
									| [$7447: ldi]
	
									| [$7449: ldi]
									| [$744b: ldi]
	
									| [$744d: ldi]
									| [$744f: ldi]
	
									| [$7451: ldi]
									| [$7453: ldi]
	
									| [$7455: ldi]
									| [$7457: ldi]
	
									| [$7459: ldi]
									| [$745b: ldi]
								
	* copy letter to video (feed "elevator" letter columns)
	lea	source_dest_letter_pointers_860F(a6),a0                      	| [$745d: ld   hl,$860F]
	move.b	#0x08,d1                        	| [$7460: ld   b,$08]
l_7462:
	movem.w	d1/d2,-(sp)                    	| [$7462: push bc]
	* load pointer on elevator_letter_table_7361+offset in A4 (source)
	move.b	(a0)+,d2            | [$7463: ld   c,(hl)]
	                           	| [$7464: inc  hl]
	move.b	(a0)+,d1            | [$7465: ld   b,(hl)]
	LOAD_D1_16_FROM_D1D2
	tst		d1
	jeq		0f				| jotd: race condition between irq and non-irq code?
	lea		elevator_letter_table_7361,a4
	sub.w	#0x7361,d1
	add.w	d1,a4
	
	* load destination (on screen)
	                           	| [$7466: inc  hl]
	move.b	(a0)+,d4                         	| [$7467: ld   e,(hl)]
	                           	| [$7468: inc  hl]
	move.b	(a0)+,d3                         	| [$7469: ld   d,(hl)]
	LOAD_D3_16_FROM_D3D4
	sub.w	#0xC400,d3
	lea		videoram_layer_1_C400(a6),a1
	add.w	d3,a1
	exg		a1,a0
	
								| [$746a: inc  hl] incremented above (a0)+
	move.b	(a4)+,d0           	| [$746b: ld   a,(bc)]
	jbsr	osd_w_videoram     	| [$746c: ld   (de),a]
	                           	| [$746d: inc  bc]
	addq	#1,a0             	| [$746e: inc  de]
	move.b	(a4),d0             | [$746f: ld   a,(bc)]
	jbsr	osd_w_videoram      | [$7470: ld   (de),a]
	exg		a1,a0
0:
	movem.w	(sp)+,d1/d2         | [$7471: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_7462                             	| [$7472: djnz $7462]

	rts                                    	| [$7474: ret]

display_action_title_7475:
	move.b	action_letter_timer_8640(a6),d0                   	| [$7475: ld   a,($8640)]
	lea	action_letter_appear_table_7498(pc),a0                      	| [$7478: ld   hl,action_letter_appear_table_7498]
	cmp.b	(a0),d0                          	| [$747b: cp   (hl)]
	jeq	clear_screen_block_7503                             	| [$747c: jp   z,$7503]
	addq.w	#1,a0                           	| [$747f: inc  hl]
	cmp.b	(a0),d0                          	| [$7480: cp   (hl)]
	jeq	draw_action_a_749f                             	| [$7481: jr   z,$749F]
	addq.w	#1,a0                           	| [$7483: inc  hl]
	cmp.b	(a0),d0                          	| [$7484: cp   (hl)]
	jeq	draw_action_c_74a7                             	| [$7485: jr   z,$74A7]
	addq.w	#1,a0                           	| [$7487: inc  hl]
	cmp.b	(a0),d0                          	| [$7488: cp   (hl)]
	jeq	draw_action_t_74af                             	| [$7489: jr   z,$74AF]
	addq.w	#1,a0                           	| [$748b: inc  hl]
	cmp.b	(a0),d0                          	| [$748c: cp   (hl)]
	jeq	draw_action_i_74cf                             	| [$748d: jr   z,$74CF]
	addq.w	#1,a0                           	| [$748f: inc  hl]
	cmp.b	(a0),d0                          	| [$7490: cp   (hl)]
	jeq	draw_action_o_74b7                             	| [$7491: jr   z,$74B7]
	addq.w	#1,a0                           	| [$7493: inc  hl]
	cmp.b	(a0),d0                          	| [$7494: cp   (hl)]
	jeq	draw_action_n_74e5                             	| [$7495: jr   z,$74E5]
	rts                                    	| [$7497: ret]


action_letter_appear_table_7498:
	.byte	0x30,0x32
	.byte	0x36,0x3A
	.byte	0x3E,0x42
	.byte	0x46
	.align 	2
	
draw_action_a_749f:
	lea	table_7517,a0                      	| [$749f: ld   hl,table_7517]
	lea	a_action_letter_address_C9E6(a6),a1                      	| [$74a2: ld   de,$C9E6]
	jra	l_74bd                             	| [$74a5: jr   $74BD]
draw_action_c_74a7:
	lea	table_7529,a0                      	| [$74a7: ld   hl,table_7529]
	lea	c_action_letter_address_C9E9(a6),a1                      	| [$74aa: ld   de,$C9E9]
	jra	l_74bd                             	| [$74ad: jr   $74BD]
draw_action_t_74af:
	lea	table_753B,a0                      	| [$74af: ld   hl,table_753B]
	lea	t_action_letter_address_C9EC(a6),a1                      	| [$74b2: ld   de,$C9EC]
	jra	l_74bd                             	| [$74b5: jr   $74BD]
draw_action_o_74b7:
	lea	table_7559,a0                      	| [$74b7: ld   hl,table_7559]
	lea	o_action_letter_address_C9F1(a6),a1                      	| [$74ba: ld   de,$C9F1] screen address, first layer
l_74bd:
	move.b	#0x06,d0                        	| [$74bd: ld   a,$06]
l_74bf:
	jbsr	ldi_video                               	| [$74bf: ldi]
	jbsr	ldi_video                               	| [$74c1: ldi]
	jbsr	ldi_video                               	| [$74c3: ldi]
	                              	| [$74c5: ex   de,hl]
	                      	| [$74c6: ld   bc,$001D] 29
	add.w	#0x001D,a1                            	| [$74c9: add  hl,bc]
	                              	| [$74ca: ex   de,hl]
	subq.b	#1,d0                           	| [$74cb: dec  a]
	jne	l_74bf                             	| [$74cc: jr   nz,$74BF]
	rts                                    	| [$74ce: ret]

draw_action_i_74cf:
	lea	table_754D,a0                      	| [$74cf: ld   hl,table_754D]
	lea	i_action_letter_address_C9EF(a6),a1                      	| [$74d2: ld   de,$C9EF]
	move.b	#0x06,d0                        	| [$74d5: ld   a,$06]
l_74d7:
	jbsr	ldi_video                               	| [$74d7: ldi]
	jbsr	ldi_video                               	| [$74d9: ldi]
	                              	| [$74db: ex   de,hl]
									| [$74dc: ld   bc,$001E] 30
	add.w	#0x1E,a1                            	| [$74df: add  hl,bc]
	                              	| [$74e0: ex   de,hl]
	subq.b	#1,d0                           	| [$74e1: dec  a]
	jne	l_74d7                             	| [$74e2: jr   nz,$74D7]
	rts                                    	| [$74e4: ret]

draw_action_n_74e5:
	lea	table_756B,a0                      	| [$74e5: ld   hl,table_756B]
	lea	n_action_letter_address_C9B4(a6),a1                      	| [$74e8: ld   de,$C9B4]
	move.b	#0x08,d1                        	| [$74eb: ld   a,$08]
	exg		a1,a0
l_74ed:
	.rept	6
	move.b	(a1)+,d0
	jbsr	osd_w_videoram
	addq.w	#1,a0
	.endr
	                               	| [$74ed: ldi]
	                               	| [$74ef: ldi]
	                               	| [$74f1: ldi]
	                               	| [$74f3: ldi]
	                               	| [$74f5: ldi]
	                               	| [$74f7: ldi]
	                              	| [$74f9: ex   de,hl]
	                      	| [$74fa: ld   bc,$001A] 26
	add.w	#0x001A,a0                            	| [$74fd: add  hl,bc]
	                              	| [$74fe: ex   de,hl]
	subq.b	#1,d1                           	| [$74ff: dec  a]
	jne	l_74ed                             	| [$7500: jr   nz,$74ED]
	rts                                    	| [$7502: ret]

clear_screen_block_7503:
	lea	l_CFA8(a6),a0                      	| [$7503: ld   hl,$CFA8]
	move.w	#0xFFD0,d3                          	| [$7506: ld   de,$FFD0]
	clr.b	d0                               	| [$7509: xor  a]
	move.b	#0x07,d2                        	| [$750a: ld   c,$07]
l_750c:
	move.b	#0x10,d1                        	| [$750c: ld   b,$10]
l_750e:
	jbsr	osd_w_videoram                         	| [$750e: ld   (hl),a]
	addq.w	#1,a0                           	| [$750f: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_750e                             	| [$7510: djnz $750E]
	add.w	d3,a0                            	| [$7512: add  hl,de]
	subq.w	#1,d2                           	| [$7513: dec  c]
	jne	l_750c                             	| [$7514: jr   nz,$750C]
	rts                                    	| [$7516: ret]

table_7517:
	.byte	0x9E
	.byte	0xB5
	.byte	0x00
	.byte	0xC8
	.byte	0xC9
	.byte	0xCA,0xDC,0xDD
	.byte	0xDE,0xF0
	.byte	0xF1
	.byte	0xF2,0x53,0x54
	.byte	0x55
	.byte	0x66
	.byte	0x67
	.byte	0x68

table_7529:
	.byte	0xB7
	.byte	0xB8
	.byte	0xB9
	.byte	0xCB,0xCC
	.byte	0xCD,0xDF,0xE0
	.byte	0xE1
	.byte	0xF3
	.byte	0xF4,0xF5,0x56
	.byte	0x57
	.byte	0x58
	.byte	0x69
	.byte	0x6A
	.byte	0x6B
table_753B:
	.byte	0xBA
	.byte	0xBB
	.byte	0xBC
	.byte	0xCE,0xCF
	.byte	0xD0
	.byte	0xE2,0xE3,0xE4
	.byte	0xF6,0xF7
	.byte	0x00
	.byte	0x59
	.byte	0x5A
	.byte	0x00
	.byte	0x6C
	.byte	0x6D
	.byte	0x6E
table_754D:
	.byte	0xBD
	.byte	0xBE
	.byte	0xD1
	.byte	0xD2,0xE5,0xE6
	.byte	0xE5
	.byte	0xE6,0x5B
	.byte	0x5C
	.byte	0x6F
	.byte	0x70

table_7559:
	.byte	0xBF
	.byte	0xC0
	.byte	0xC1
	.byte	0xD3,0xD4
	.byte	0xD5
	.byte	0xE7
	.byte	0xE8
	.byte	0xE9
	.byte	0xFA,0xFB,0xFC
	.byte	0x5D
	.byte	0x5E
	.byte	0x5F
	.byte	0x71
	.byte	0x72
	.byte	0x73
table_756B:
	.byte	0x7A
	.byte	0x7B
	.byte	0x7C
	.byte	0x7D
	.byte	0x7E
	.byte	0x00
	.byte	0x7F
	.byte	0xB6
	.byte	0x52
	.byte	0x65
	.byte	0x79
	.byte	0x00
	.byte	0xC2,0xC3,0xC4
	.byte	0xC5
	.byte	0xC6,0xC7
	.byte	0xD6,0xD7
	.byte	0xD8
	.byte	0xD9
	.byte	0xDA,0xDB,0xEA
	.byte	0xEB
	.byte	0xEC,0xED,0xEE
	.byte	0xEF
	.byte	0xFD
	.byte	0xFE,0xFF
	.byte	0x50
	.byte	0x51
	.byte	0x00
	.byte	0x60
	.byte	0x61
	.byte	0x62
	.byte	0x63
	.byte	0x64
	.byte	0x00
	.byte	0x74
	.byte	0x75
	.byte	0x76
	.byte	0x77
	.byte	0x78
	.byte	0x00

start_next_level_759B:
	jbsr	display_playfield_layout_7660                            	| [$759b: call $7660]
start_level_759e:
	jbsr	l_767a                            	| [$759e: call $767A]
	clr.b	d0                               	| [$75a1: xor  a]
	move.b	d0,l_8641(a6)                   	| [$75a2: ld   ($8641),a]

mainloop_75A5:
	jbsr	perform_all_in_game_tasks_76A2    	| [$75a5: call perform_all_in_game_tasks_76A2]
	jbsr	game_tick_73cf                            	| [$75a8: call $73CF]
	move.b	game_in_play_flag_823B(a6),d0   	| [$75ab: ld   a,(game_in_play_flag_823B)]
												| [$75ae: or   a]
	jeq	l_75b6                             	| [$75af: jr   z,$75B6] 0: game really playing (else demo)
	move.b	nb_credits_80A2(a6),d0          	| [$75b1: ld   a,(nb_credits_80A2)]
											| [$75b4: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$75b5: ret  nz] [...]
0:
l_75b6:
	lea	player_structure_851A(a6),a2       	| [$75b6: ld   ix,player_structure_851A]
	jbsr	l_75e8                            	| [$75ba: call $75E8]
	move.b	(enemy_state_09,a2),d0          	| [$75bd: ld   a,(ix+enemy_state_09)]
	cmp.b	#0xFF,d0                         	| [$75c0: cp   $FF]
	jeq	player_died_75fe                             	| [$75c2: jp   z,$75FE]
	cmp.b	#CS_IN_ROOM_05,d0                    	| [$75c5: cp   $05]
	jcc	mainloop_75A5                      	| [$75c7: jp   nc,mainloop_75A5]
	move.b	(character_situation_06,a2),d0  	| [$75ca: ld   a,(ix+character_situation_06)]
	cmp.b	#CS_ABOVE_ELEVATOR_02,d0         	| [$75cd: cp   CS_ABOVE_ELEVATOR_02]
	jcc	mainloop_75A5                      	| [$75cf: jp   nc,mainloop_75A5]
	move.b	(current_floor_07,a2),d0        	| [$75df: ld   a,(ix+current_floor_07)] character current floor ix=851A
	                             	| [$75e2: or   a]
	jne	mainloop_75A5                      	| [$75e3: jr   nz,mainloop_75A5]
	jra	ground_floor_reached_764E          	| [$75e5: jp   ground_floor_reached_764E] ground, now check documents

l_75e8:
	move.b	(enemy_state_09,a2),d0          	| [$75e8: ld   a,(ix+enemy_state_09)]
	cmp.b	#CS_IN_ROOM_05,d0                         	| [$75eb: cp   $05]
	bcc.b	0f                               	| [...]
	rts                                    	| [$75ed: ret  c] [...]
0:
	cmp.b	#0x07,d0                         	| [$75ee: cp   $07]
	bcs.b	0f                               	| [...]
	rts                                    	| [$75f0: ret  nc] [...]
0:
	move.b	l_8641(a6),d0                   	| [$75f1: ld   a,($8641)]
	                             	| [$75f4: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$75f5: ret  nz] [...]
0:
	addq.b	#1,d0                           	| [$75f6: inc  a]
	move.b	d0,l_8641(a6)                   	| [$75f7: ld   ($8641),a]
	jbsr	l_364d                            	| [$75fa: call $364D]
	rts                                    	| [$75fd: ret] reaches here when player is shot

player_died_75fe:
	jbsr	l_364d                            	| [$75fe: call $364D]
	
	* looks like a RAM checksum... removing it
                  	| [$7601: ld   de,$8194]
	| [$7604: ld   l,$39]
					| [$7606: ld   h,$00]
  	| [$7608: add  hl,de]
    	| [$7609: ex   de,hl]
    	| [$760a: ex   de,hl]
              	| [$760b: ld   b,$05]
               	| [$760d: xor  a]

                	| [$760e: add  a,(hl)]
 	| [$760f: dec  hl]
              	| [...]
             	| [$7610: djnz $760E]
               	| [$7612: cp   $78]
          	| [$7614: nop]
             	| [$7615: jr   z,$7626]


              	| [$7617: ld   e,$81]
     	| [$7619: ld   d,$00]
             	| [$761b: ld   hl,$85C1]
               	| [$761e: add  hl,de]
              	| [$761f: ld   (hl),e]
 	| [$7620: ld   a,(protection_variable_8648)]
               	| [$7623: xor  $99]
                	| [$7625: rst  $20]
l_7626:
	* removed busy wait
							| [$7626: ld   bc,$2000]
							| [$7626: ld   bc,$2000]
				
							| [$7629: dec  bc]
							| [$762a: ld   a,b]
							| [$762b: or   c]
						| [$762c: jr   nz,$7629]
	move.b	#0xC0,d0                        	| [$762e: ld   a,$C0]
	jbsr	play_sound             	| [$7630: ld   (sound_latch_D50B),a]
	move.b	player_structure_851A+current_floor_07(a6),d0	| [$7633: ld   a,(player_structure_851A+current_floor_07)]
	cmp.b	#0x05,d0                         	| [$7636: cp   $05]
	jcc	l_763d                             	| [$7638: jp   nc,$763D]
	move.b	#0x05,d0                        	| [$763b: ld   a,$05]
l_763d:
	move.b	d0,viewed_floor_802C(a6)                   	| [$763d: ld   ($802C),a]
	move.b	copy_of_dip_switches_3_8250(a6),d0	| [$7640: ld   a,(copy_of_dip_switches_3_8250)]
	btst.b	#6,d0                           	| [$7643: bit  6,a]
	jne	l_764b                             	| [$7645: jr   nz,$764B] no hit? infinite lives too
	lea	nb_lives_8234(a6),a0               	| [$7647: ld   hl,nb_lives_8234]
	subq.b	#1,(a0)                         	| [$764a: dec  (hl)]
l_764b:
	move.b	#0x01,d0                        	| [$764b: ld   a,$01]
	rts                                    	| [$764d: ret]

ground_floor_reached_764E:
	jbsr	check_if_all_documents_collected_09A3	| [$764e: call check_if_all_documents_collected_09A3]
	                        	| [$7651: push af]
	                        	| [$7652: ld   a,$C0]
	move.b	#0xC0,sound_latch_D50B             	| [$7654: ld   (sound_latch_D50B),a]
	                        	| [$7657: pop  af]
	tst.b	d0                             	| [$7658: or   a]
	bne.b	0f                               	| [...]
	rts                                    	| [$7659: ret  z] [...]
0:
	jbsr	start_music_if_in_game_363f                            	| [$765a: call $363F]
	jra	start_level_759e                             	| [$765d: jp   $759E]

display_playfield_layout_7660:
	jbsr	l_71e1                            	| [$7660: call $71E1]
	clr.b	d0                               	| [$7663: xor  a]
	move.b	d0,menu_or_game_tiles_81D9(a6)  	| [$7664: ld   (menu_or_game_tiles_81D9),a]
	jbsr	init_hw_scroll_and_charset_260C                            	| [$7667: call $260C]
	jbsr	display_bottom_bricks_582e                            	| [$766a: call $582E]
	jbsr	l_28b3                            	| [$766d: call $28B3]
	jbsr	l_2a68                            	| [$7670: call $2A68]
	jbsr	compute_end_level_points_5793     	| [$7673: call compute_end_level_points_5793]
	jbsr	set_player_initial_state_2f72                            	| [$7676: call $2F72]
	rts                                    	| [$7679: ret]

l_767a:
	clr.b	d0                               	| [$767a: xor  a]
	move.b	d0,sync_flag_80AB(a6)                   	| [$767b: ld   ($80AB),a]
	jbsr	l_0bdc                            	| [$767e: call $0BDC]
	jbsr	l_2f3a                            	| [$7681: call $2F3A]
	jbsr	l_4b95                            	| [$7684: call $4B95]
	jbsr	l_31ad                            	| [$7687: call $31AD]
	jbsr	init_moving_door_slots_1287                            	| [$768a: call $1287]
	jbsr	compute_end_level_points_5793     	| [$768d: call compute_end_level_points_5793]
	jbsr	l_30ca                            	| [$7690: call $30CA]
	move.b	l_8233(a6),d0                   	| [$7693: ld   a,($8233)]
	move.b	d0,timer_8bit_reload_value_80A9(a6)	| [$7696: ld   (timer_8bit_reload_value_80A9),a]
	move.b	#GS_IN_GAME_05,d0               	| [$7699: ld   a,GS_IN_GAME_05]
	move.b	d0,game_state_80AC(a6)          	| [$769b: ld   (game_state_80AC),a]
	jbsr	reload_8bit_timer_26C2           	| [$769e: call reload_8bit_timer_26C2]
	rts                                    	| [$76a1: ret]

perform_all_in_game_tasks_76A2:
	jbsr	handle_player_controls_30CF       	| [$76a2: call handle_player_controls_30CF]
	jbsr	handle_main_scrolling_017F        	| [$76a5: call handle_main_scrolling_017F]
	jbsr	handle_elevators_0EBF             	| [$76a8: call handle_elevators_0EBF]
	jbsr	handle_moving_doors_12A2               	| [$76ab: call handle_moving_doors_12A2]
	jbsr	update_shot_lamp_31BA          	| [$76ae: call update_shot_lamp_31BA]
	jbsr	handle_enemies_0B68                	| [$76b1: call handle_enemies_0B68] if skipped, enemy lies down and stays there, then no enemies appear
	jbsr	l_2fe8                            	| [$76b4: call $2FE8]
	jbsr	l_3127                            	| [$76b7: call $3127]
	jbsr	update_enemies_3081               	| [$76ba: call update_enemies_3081]
	jbsr	update_bullets_4bba                 | [$76bd: call update_bullets_4bba]
	jbsr	l_0be1                            	| [$76c0: call $0BE1]
	jbsr	update_sprite_shadow_ram_15a0                            	| [$76c3: call $15A0]
	rts                                    	| [$76c6: ret]

l_76c7:
	jbsr	l_572f                            	| [$76c7: call $572F]
	move.b	#0xC0,d0                        	| [$76ca: ld   a,$C0]
	jbsr	play_sound             	| [$76cc: ld   (sound_latch_D50B),a]
	clr.b	d0                               	| [$76cf: xor  a]
	move.b	d0,l_8645(a6)                   	| [$76d0: ld   ($8645),a]
	jra	l_76e1                             	| [$76d3: jr   $76E1]
l_76d5:
	move.b	number_of_players_8235(a6),d0                   	| [$76d5: ld   a,($8235)]
	subq.b	#1,d0                           	| [$76d8: dec  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$76d9: ret  z] [...]
0:
	move.b	#0x01,d0                        	| [$76da: ld   a,$01]
	move.b	d0,l_8645(a6)                   	| [$76dc: ld   ($8645),a]
	jra	l_76e1                             	| [$76df: jr   $76E1]

l_76e1:
	jbsr	l_76f6                            	| [$76e1: call $76F6]
	jbsr	reload_8bit_timer_26C2           	| [$76e4: call reload_8bit_timer_26C2]
l_76e7:
	jbsr	game_tick_73cf                            	| [$76e7: call $73CF]
	LOAD_WORD	a_16bit_value_8643(a6),d5             	| [$76ea: ld   hl,($8643)]
	subq.w	#1,d5                           	| [$76ed: dec  hl]
	STORE_WORD	d5,a_16bit_value_8643(a6)            	| [$76ee: ld   ($8643),hl]
	tst.w	d5                           	| [$76f1: ld   a,h]
	                             	| [$76f2: or   l]
	jne	l_76e7                             	| [$76f3: jr   nz,$76E7]
	rts                                    	| [$76f5: ret]

l_76f6:
	clr.b	d0                               	| [$76f6: xor  a]
	move.b	d0,sync_flag_80AB(a6)                   	| [$76f7: ld   ($80AB),a]
	jbsr	l_71e1                            	| [$76fa: call $71E1]
	move.b	#0x01,d0                        	| [$76fd: ld   a,$01]
	move.b	d0,menu_or_game_tiles_81D9(a6)  	| [$76ff: ld   (menu_or_game_tiles_81D9),a]
	jbsr	init_hw_scroll_and_charset_260C                            	| [$7702: call $260C]
	move.b	#GS_GAME_OVER_08,d0             	| [$7705: ld   a,GS_GAME_OVER_08]
	move.b	d0,game_state_80AC(a6)          	| [$7707: ld   (game_state_80AC),a]
	move.b	#0x02,d0                        	| [$770a: ld   a,$02]
	move.b	d0,timer_8bit_reload_value_80A9(a6)	| [$770c: ld   (timer_8bit_reload_value_80A9),a]
	jbsr	display_status_bars_5839                            	| [$770f: call $5839]
	jbsr	update_upper_status_bar_57C6      	| [$7712: call update_upper_status_bar_57C6]
	jbsr	display_credit_info_10b0                            	| [$7715: call $10B0]
	move.b	l_8645(a6),d0                   	| [$7718: ld   a,($8645)]
	tst.b	d0                             	| [$771b: or   a]
	jne	l_7722                             	| [$771c: jr   nz,$7722]
	jbsr	l_772c                            	| [$771e: call $772C]
	rts                                    	| [$7721: ret]

l_7722:
	jbsr	l_7783                            	| [$7722: call $7783]
	move.w	#0x003C,d5                      	| [$7725: ld   hl,$003C] 60
	STORE_WORD	d5,a_16bit_value_8643(a6)            	| [$7728: ld   ($8643),hl]
	rts                                    	| [$772b: ret]

l_772c:
	move.b	l_8646(a6),d0                   	| [$772c: ld   a,($8646)]
	tst.b	d0                             	| [$772f: or   a]
	jne	l_7738                             	| [$7730: jr   nz,$7738]
	move.b	number_of_players_8235(a6),d0                   	| [$7732: ld   a,($8235)]
	subq.b	#1,d0                           	| [$7735: dec  a]
	jne	l_774d                             	| [$7736: jr   nz,$774D]
l_7738:
	lea	game_over_string_7765,a0                     	| [$7738: ld   hl,game_over_string_7765]
	lea	l_C5AB(a6),a1                      	| [$773b: ld   de,$C5AB]
	jbsr	copy_string_to_screen_29F9        	| [$773e: call copy_string_to_screen_29F9]
	move.b	#0xCA,d0                        	| [$7741: ld   a,$CA]
	jbsr	play_sound             	| [$7743: ld   (sound_latch_D50B),a]
	move.w	#0x0078,d5                      	| [$7746: ld   hl,$0078] 120
	STORE_WORD	d5,a_16bit_value_8643(a6)            	| [$7749: ld   ($8643),hl]
 	rts                                    	| [$774c: ret]
l_774d:
	lea	player_x_game_over_string_776F,a0                     	| [$774d: ld   hl,player_x_game_over_string_776F]
	lea	l_C627(a6),a1                      	| [$7750: ld   de,$C627]
	jbsr	copy_string_to_screen_29F9        	| [$7753: call copy_string_to_screen_29F9]
	move.b	current_player_is_p2_8236(a6),d0                   	| [$7756: ld   a,($8236)]
	add.b	#0x11,d0                         	| [$7759: add  a,$11]
	lea		l_C62E(a6),a0
	jbsr	osd_w_videoram                   	| [$775b: ld   ($C62E),a]
	move.w	#0x003C,d5                      	| [$775e: ld   hl,$003C] 60
	STORE_POINTER	d5,a_16bit_value_8643(a6)            	| [$7761: ld   ($8643),hl]
	rts                                    	| [$7764: ret]

game_over_string_7765:
	.byte	0x28,0x1C
	.byte	0x20,0x1E
	.byte	0x00
	.byte	0x2F
	.byte	0x23
	.byte	0x1E,0x1F
	.byte	0xFF

player_x_game_over_string_776F:
	.byte	0x1A
	.byte	0x1B
	.byte	0x1C
	.byte	0x1D
	.byte	0x1E,0x1F
	.byte	0x04
	.byte	0x00
	.byte	0x05
	.byte	0x00
	.byte	0x28,0x1C
	.byte	0x20,0x1E
	.byte	0x00
	.byte	0x2F
	.byte	0x23
	.byte	0x1E,0x1F
	.byte	0xFF
	.align	2
	
l_7783:
	lea	player_500_message_7795,a0         	| [$7783: ld   hl,player_500_message_7795]
	lea	l_C5CC(a6),a1                      	| [$7786: ld   de,$C5CC]
	jbsr	copy_string_to_screen_29F9        	| [$7789: call copy_string_to_screen_29F9]
	move.b	current_player_is_p2_8236(a6),d0                   	| [$778c: ld   a,($8236)]
	move.b	current_player_is_p2_8236(a6),d0                   	| [$778c: ld   a,($8236)]
	add.b	#0x11,d0                         	| [$778f: add  a,$11]
	lea		l_C5D3(a6),a0
	jbsr	osd_w_videoram                   	| [$7791: ld   ($C5D3),a]
	rts                                    	| [$7794: ret]

player_500_message_7795:
	.byte	0x1A
	.byte	0x1B
	.byte	0x1C
	.byte	0x1D
	.byte	0x1E,0x1F
	.byte	0x04
	.byte	0x00
	.byte	0x05
	.byte	0xFF

l_7FF4:
	.byte 0x52,0xC9,0xD5,0x16

table_7FF8:
	.byte	0x73,0x1E,0xBD,0x19,0x3E,0xE4,0xD1,0xC9
	.align	2
	
* this sets important variables. Can't be skipped properly
* else game sets itself in a strange mode (title screen but
* nothing happening on screen)
* if disabled runs OK (on bootleg, as long as extra routines are
* installed properly in RAM)
hardware_test_779F:
	rts
	
									| [$779f: ld   a,(mcu_read_8800)]
									| [$77a2: ld   a,($7FF4)]
									| [$77a5: ld   hl,$8647]
									| [$77a8: ld   (hl),$00]
									
									| [$77aa: push hl]
									| [$77ab: call mcu_comm_routine_77CF]
									| [$77ae: call mcu_comm_routine_77BD]
									| [$77b1: pop  hl]
									| [$77b2: cp   $17] must be 0x17 else fails check
									| [$77b4: ld   a,$58]
									| [$77b6: ld   (hl),a]
* bootleg: original code
												| [$77b7: set  0,a]
												| [$77b9: ld   (protection_variable_8648),a]
* bootleg: replacement code: seems to do the same
								| [$77b7: ld   hl,protection_variable_8648] useless patch
									| [$77ba: ld   (hl),$59]
* bootleg: end replacement code
	rts                                    	| [$77bc: ret]

* communicates with MC68705 MCU for protection
* can be disabled on bootleg
mcu_comm_routine_77BD:
	rts
	
	                  	| [$77bd: ld   a,($8647)]
	  	| [$77c0: ld   hl,mcu_status_8801]
	   	| [$77c3: bit  1,(hl)]
	  	| [$77c5: jr   z,$77C3]
	   	| [$77c7: dec  hl]
	   	| [$77c8: ld   l,(hl)]
	    	| [$77c9: add  a,l]
	   	| [$77ca: push af]
	   	| [$77cb: ld   a,l]
	                  	| [$77cc: rst  $10]
	   	| [$77cd: pop  af]
	  	| [$77ce: ret]

mcu_comm_routine_77CF:
* can be disabled on bootleg
	rts
	
	                      	| [$77cf: ld   hl,$8647]
           	| [$77d2: sub  (hl)]
         	| [$77d3: ld   hl,mcu_status_8801]

          	| [$77d6: bit  0,(hl)]
         	| [$77d8: jr   z,$77D6]
          	| [$77da: dec  hl]
          	| [$77db: ld   (hl),a]
         	| [$77dc: ret]


           	| [$77dd: and  $7F]
            	| [$77df: or   $40]
            	| [$77e1: rst  $20]
         	| [$77e2: ret]



palette_data_77E3:
	.byte	0x01,0xFF,0x00,0x19,0x00,0x00,0x01,0x6D,0x00,0xA7,0x00,0x53,0x00,0x0A,0x00,0x3F
	.byte	0x01,0xFF,0x00,0x92,0x01,0x92,0x00,0x49,0x01,0xB1,0x00,0x3F,0x00,0x00,0x01,0x6D
	.byte	0x00,0x98,0x01,0xA4,0x01,0xB6,0x00,0x92,0x00,0x11,0x00,0x92,0x00,0x49,0x01,0xF8
	.byte	0x01,0xFF,0x01,0xE2,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x00,0x3F,0x01,0x24,0x01,0xFF
	.byte	0x01,0xFF,0x00,0x3F,0x00,0xA7,0x00,0x53,0x00,0x0A,0x00,0x00,0x00,0x0B,0x01,0xFF
	.byte	0x01,0xFF,0x01,0xFA,0x01,0xE2,0x01,0xFF,0x01,0xFF,0x01,0x24,0x01,0xFF,0x01,0xFA
	.byte	0x01,0xFF,0x00,0x3F,0x00,0xA7,0x00,0x53,0x00,0x0A,0x00,0x00,0x00,0x0B,0x01,0x6D
	.byte	0x01,0xFF,0x01,0xF8,0x00,0x92,0x00,0x49,0x01,0x92,0x00,0x00,0x01,0x6D,0x01,0xFA

	.byte	0x01,0xFF,0x00,0x19,0x00,0x00,0x01,0x6D,0x00,0xA7,0x00,0x53,0x00,0x0A,0x00,0x03
	.byte	0x01,0xFF,0x00,0x92,0x00,0x59,0x00,0x49,0x01,0xB1,0x00,0x3F,0x00,0x00,0x01,0x6D
	.byte	0x00,0x98,0x00,0x08,0x01,0xB6,0x00,0x92,0x00,0x80,0x00,0x92,0x00,0x49,0x01,0xF8
	.byte	0x01,0xFF,0x01,0xE2,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x00,0x3F,0x01,0x24,0x01,0xFF
	.byte	0x01,0xFF,0x00,0x3F,0x00,0xA7,0x00,0x53,0x00,0x0A,0x00,0x00,0x00,0x0B,0x01,0xFF
	.byte	0x01,0xFF,0x01,0xFA,0x01,0xE2,0x01,0xFF,0x01,0xFF,0x01,0x24,0x01,0xFF,0x01,0xFA
	.byte	0x01,0xFF,0x00,0x3F,0x00,0xA7,0x00,0x53,0x00,0x0A,0x00,0x00,0x00,0x0B,0x01,0x6D
	.byte	0x01,0xFF,0x01,0xF8,0x00,0x92,0x00,0x49,0x00,0x59,0x00,0x00,0x01,0x6D,0x01,0xFA

	.byte	0x01,0xFF,0x00,0x19,0x00,0x00,0x01,0x6D,0x00,0xA7,0x00,0x53,0x00,0x0A,0x00,0x3F
	.byte	0x01,0xFF,0x00,0x92,0x00,0x40,0x00,0x49,0x01,0xB1,0x00,0x3F,0x00,0x00,0x01,0x6D
	.byte	0x00,0x98,0x01,0xD1,0x01,0xB6,0x00,0x92,0x00,0x1A,0x00,0x92,0x00,0x49,0x01,0xF8
	.byte	0x01,0xFF,0x01,0xE2,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x00,0x3F,0x01,0x24,0x01,0xFF
	.byte	0x01,0xFF,0x00,0x3F,0x00,0xA7,0x00,0x53,0x00,0x0A,0x00,0x00,0x00,0x0B,0x01,0xFF
	.byte	0x01,0xFF,0x01,0xFA,0x01,0xE2,0x01,0xFF,0x01,0xFF,0x01,0x24,0x01,0xFF,0x01,0xFA
	.byte	0x01,0xFF,0x00,0x3F,0x00,0xA7,0x00,0x53,0x00,0x0A,0x00,0x00,0x00,0x0B,0x01,0x6D
	.byte	0x01,0xFF,0x01,0xF8,0x00,0x92,0x00,0x49,0x00,0x40,0x00,0x00,0x01,0x6D,0x01,0xFA

	.byte	0x01,0xFF,0x00,0x19,0x00,0x00,0x01,0x6D,0x00,0xA7,0x00,0x53,0x00,0x0A,0x00,0x87
	.byte	0x01,0xFF,0x00,0x92,0x00,0xDB,0x00,0x49,0x01,0xB1,0x00,0x3F,0x00,0x00,0x01,0x6D
	.byte	0x00,0x98,0x01,0xFF,0x01,0xB6,0x00,0x92,0x01,0x89,0x00,0x92,0x00,0x49,0x01,0xF8
	.byte	0x01,0xFF,0x01,0xE2,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x00,0x3F,0x01,0x24,0x01,0xFF
	.byte	0x01,0xFF,0x00,0x3F,0x00,0xA7,0x00,0x53,0x00,0x0A,0x00,0x00,0x00,0x0B,0x01,0xFF
	.byte	0x01,0xFF,0x01,0xFA,0x01,0xE2,0x01,0xFF,0x01,0xFF,0x01,0x24,0x01,0xFF,0x01,0xFA
	.byte	0x01,0xFF,0x00,0x3F,0x00,0xA7,0x00,0x53,0x00,0x0A,0x00,0x00,0x00,0x0B,0x01,0x6D
	.byte	0x01,0xFF,0x01,0xF8,0x00,0x92,0x00,0x49,0x00,0xDB,0x00,0x00,0x01,0x6D,0x01,0xFA

* < D0: byte possibly containing lowernibble > 9
* > D0: value corrected to full BCD
daa:
    move.w    d1,-(a7)
    move.b    d0,d1
    and.w    #0xF,d1
    sub.b    #10,d1
    bcs.b    daa_out        | no need to do anything
    * D1 = A-F: correct
    add.b    #0x16,d0
daa_out:
    move.w    (a7)+,d1
    rts

* < A0: source (HL)
* < A1: destination (DE)
* < D1: decremented (16 bit)
lddr:
    subq.w    #1,d1
    addq.w  #1,a0
    addq.w  #1,a1
0:
    move.b    -(a0),-(a1)
    dbf        d1,0b

    subq.w  #1,a0
    subq.w  #1,a1
    clr.w    d1
    rts

* < A0: source (HL)
* < A1: destination (DE)
* < D1: decremented (16 bit)
ldi:
    move.b    (a0)+,(a1)+
    subq.w    #1,d1
    rts

* < A0: source (HL)
* < A1: destination (DE) screen address
* < D1: decremented (16 bit)
ldi_video:
	move.w	d0,-(a7)
    move.b    (a0)+,d0
	exg		a1,a0
	jbsr	osd_w_videoram
	exg		a1,a0
	addq.w	#1,a1
	move.w	(a7)+,d0
    subq.w    #1,d1
    rts

* < A0: source (HL)
* < A1: destination (DE)
* < D1: length (16 bit)
ldir:
    subq.w    #1,d1
0:
    move.b    (a0)+,(a1)+
    dbf        d1,0b
    clr.w    d1
    rts

* < A0: source (HL)
* < A1: destination (DE)
* < D1: length (16 bit)
ldir_video:
	move.w	d0,-(a7)
	exg		a1,a0
    subq.w    #1,d1
0:
    move.b    (a1)+,d0
	jbsr		osd_w_videoram
	addq.w	#1,a0
    dbf        d1,0b
    clr.w    d1
	exg		a1,a0
	move.w	(a7)+,d0
    rts


* < all registers d1-d4/a0/a1/a4
* > all registers swapped
*: note regscopy must be defined somewhere in RAM
*: with a size of 56
exx:
	move.l	a6,-(a7)
    lea     regscopy+28,a6
    * save current regs in region 1
    movem.l d1-d4/a0/a1/a4,-(a6)
    * restore old regs from region 2
    lea     regscopy+28,a6
    movem.l (a6),d1-d4/a0/a1/a4
    * now copy region 1 to region 2
    movem.l d1-d4/a0/a1/a4,-(a7)
    lea     regscopy,a6
    movem.l (a6)+,d1-d4/a0/a1/a4
    movem.l d1-d4/a0/a1/a4,(a6)
    movem.l (a7)+,d1-d4/a0/a1/a4
	move.l	(a7)+,a6
    rts

* the following code is installed in RAM by the protection process
* I don't know exacty how it's done but it's copied and called from
* within the game. 
* We can find this code verbatim in the first bank which is 
* active at some point (when bank switcher gets $81 value after 0x34ee) If it's 
* not installed properly, of course the game is
* going to freeze/crash. For instance dynamic_ram_code_85EF
* is called during demo after a few seconds of play and regularly from then

dynamic_ram_code_805b:
	clr.b	(a0)                             	| [$805b: ld   (hl),$00]
	move.b	d3,d0                           	| [$805d: ld   a,d]
	                             	| [$805e: or   a]
	bpl.b	0f                               	| [...]
	rts                                    	| [$805f: ret  m] [...]
0:
	cmp.b	#0x0C,d0                         	| [$8060: cp   $0C]
	bcs.b	0f                               	| [...]
	rts                                    	| [$8062: ret  nc] [...]
0:
	cmp.b	#0x08,d0                         	| [$8063: cp   $08]
	jcs	dynamic_ram_code_8071              	| [$8065: jr   c,dynamic_ram_code_8071]
	sub.b	#0x08,d0                         	| [$8067: sub  $08]
	add.b	d0,d0                            	| [$8069: add  a,a]
	add.b	d0,d0                            	| [$806a: add  a,a]
	move.b	d0,d4                           	| [$806b: ld   e,a]
	move.b	#0xFA,d0                        	| [$806c: ld   a,$FA]
	sub.b	d4,d0                            	| [$806e: sub  e]
	move.b	d0,(a0)                         	| [$806f: ld   (hl),a]
	rts                                    	| [$8070: ret]

dynamic_ram_code_8071:
	add.b	d0,d0                            	| [$8071: add  a,a]
	add.b	#0xEC,d0                         	| [$8072: add  a,$EC]
	move.b	d0,(a0)                         	| [$8074: ld   (hl),a]
	rts                                    	| [$8075: ret]

dynamic_ram_code_85cf:
	move.b	(enemy_state_09,a2),d0          	| [$85cf: ld   a,(ix+enemy_state_09)]
	clr.b	d1                               	| [$85d2: ld   b,$00]
	cmp.b	#0x04,d0                         	| [$85d4: cp   $04]
	jeq	l_85da                         	| [$85d6: jr   z,$85DA]
	move.b	#0x04,d1                        	| [$85d8: ld   b,$04]
l_85da:
	move.b	d1,d0                           	| [$85da: ld   a,b]
	or.b	d3,d0                             	| [$85db: or   d]
	move.b	d0,(move_direction_0d,a2)       	| [$85dc: ld   (ix+move_direction_0d),a]
	rts                                    	| [$85df: ret]

dynamic_ram_code_85ef:
	move.b	(enemy_state_09,a2),d0          	| [$85ef: ld   a,(ix+enemy_state_09)]
	clr.b	d1                               	| [$85f2: ld   b,$00]
	cmp.b	#0x02,d0                         	| [$85f4: cp   $02]
	jeq	l_85fe                         	| [$85f6: jr   z,$85FE]
	move.b	#0x04,d1                        	| [$85f8: ld   b,$04]
	cmp.b	#0x02,d0
	jcs	l_85fe                         	| [$85fa: jr   c,$85FE]
	move.b	#0x08,d1                        	| [$85fc: ld   b,$08]
l_85fe:
	move.b	d1,d0                           	| [$85fe: ld   a,b]
	or.b	d3,d0                             	| [$85ff: or   d]
	move.b	d0,(move_direction_0d,a2)       	| [$8600: ld   (ix+move_direction_0d),a]
	rts                                    	| [$8603: ret]


table_79E3:
	.byte	0x01,0x20,0x01,0xFF,0x00,0x00,0x01,0x6D,0x00,0xA7,0x00,0x53,0x00,0x0A,0x00,0x3F
	.byte	0x01,0xFF,0x01,0xC7,0x00,0x3F,0x00,0x07,0x00,0x0A,0x00,0x9C,0x01,0xD8,0x00,0x00
	.byte	0x01,0xFF,0x01,0xC7,0x01,0xFF,0x00,0x07,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF
	.byte	0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF
	.byte	0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF
	.byte	0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF
	.byte	0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF
	.byte	0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF

recorded_inputs_7A63:
	.byte	0x05,0xAF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD
	.byte	0xFD,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFB,0xFB,0xFB
	.byte	0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
	.byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xF7,0xF7,0xF7,0xFF,0xFF,0xFB,0xFB,0xFB,0xFB,0xFB,0xFF
	.byte	0xFF,0xF7,0xF7,0xF7,0xFF,0xFF,0xFF,0xEF,0xEF,0xEF,0xFB,0xFB,0xFB,0xFF,0xFF,0xFF
	.byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF7,0xF7,0xF7,0xF7,0xF7,0xF7,0xFF
	.byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFD,0xFD,0xFF,0xFF,0xFF,0xFF,0xFF,0xEF,0xEB,0xEB,0xFB
	.byte	0xFB,0xFB,0xFB,0xFB,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFD,0xF5,0xF5,0xF5
	.byte	0xF5,0xF5,0xF5,0xF5,0xF5,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFE,0xFE,0xFE,0xFE
	.byte	0xDE,0xDE,0xDE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE
	.byte	0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFF,0xFD,0xFD,0xFF,0xFF
	.byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFB,0xFB,0xFB,0xFB,0xFB,0xEB,0xEB,0xFB,0xFB,0xFB,0xFB
	.byte	0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFF,0xFF
	.byte	0xF7,0xF7,0xF7,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xD5,0xD5,0xD5
	.byte	0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5
	.byte	0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5
	.byte	0xF5,0xFD,0xFF,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFF,0xFF,0xFD,0xFD
	.byte	0xFD,0xFD,0xFD,0xFD,0xFE,0xFE,0xFE,0xFE,0xFE,0xDE,0xDE,0xDE,0xDE,0xFE,0xFE,0xFE
	.byte	0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE
	.byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
	.byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
	.byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
	.byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB
recorded_inputs_7BD3:
     .byte	0x02,0x94,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFE,0xFE,0xFE,0xFE
     .byte	0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE
     .byte	0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE
     .byte	0xFE,0xFE,0xFA,0xFA,0xFA,0xFA,0xFA,0xFA,0xFA,0xFA,0xFA,0xFA,0xFA,0xFA,0xFA,0xFA
     .byte	0xFA,0xFA,0xFA,0xFA,0xFA,0xFA,0xFA,0xFA,0xFA,0xFA,0xFA,0xFA,0xFE,0xFF,0xFF,0xFF
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD
     .byte	0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD
     .byte	0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFE,0xFF,0xFF,0xFF,0xFB,0xEB,0xEB,0xFB
     .byte	0xEB,0xEB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFF,0xFF,0xFF,0xFF,0xFF
     .byte	0xFF,0xFF,0xFF,0xFF,0xEB,0xEB,0xFB,0xFB,0xEB,0xFB,0xFB,0xFB,0xFF,0xFF,0xFF,0xFF
     .byte	0xFF,0xFF,0xFF,0xF7,0xF7,0xF7,0xF7,0xF7,0xF7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFD
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFB
     .byte	0xFB,0xFB,0xFB,0xFB,0xFB,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF7,0xF7,0xF7
     .byte	0xF7,0xF7,0xF7,0xF7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB
     .byte	0xFB,0xFB,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF7,0xF7,0xFF,0xFF,0xFF,0xFF,0xFF
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFF
     .byte	0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFF,0xFF,0xFF,0xFF,0xFF,0xFD,0xFD,0xFD,0xFD
     .byte	0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD
     .byte	0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD
     .byte	0xFD,0xFD,0xFD,0xFD,0xFD,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
     .byte	0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD
     .byte	0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFF,0xFB,0xFB,0xFB
     .byte	0xFB,0xEB,0xEB,0xEB,0xFB,0xEB,0xEB,0xFB,0xEB,0xEB,0xFB,0xFB,0xFB,0xFB,0xFB,0xFB
     .byte	0xFB,0xFB,0xFB,0xFF,0xF7,0xF7,0xF7,0xFF,0xFF,0xFF,0xFE,0xFE,0xFE,0xFE,0xFE,0xFF
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
     .byte	0xFF,0xFF,0xFF,0xFF,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE
     .byte	0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE
     .byte	0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFF,0xFF,0xFF
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
recorded_inputs_7DD3:
	.byte	0x69,0xF9,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBD,0xBD,0xBD,0xBD
	.byte	0xBD,0xBF,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBF,0xBF,0xBF,0xBF,0xBF
	.byte	0xBF,0xBF,0xBF,0xBE,0xBE,0xBE,0xBE,0xBE,0xBF,0xBB,0xB9,0xB9,0xB9,0xB9,0xB9,0xA9
	.byte	0xA9,0xB9,0xA9,0xB9,0xB9,0xB9,0xBD,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xB7,0xB7,0xB7
	.byte	0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF
	.byte	0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBE,0xBE,0xBE,0xBE,0xBE,0xBF,0xBF,0xBF,0xBB,0xBB
	.byte	0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBA,0xBE,0xBE,0xBE,0xBE,0xBE
	.byte	0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBD,0xBD,0xBF,0xBF
	.byte	0xBF,0xAB,0xAB,0xBB,0xBB,0xBB,0xBF,0xBF,0x9F,0x9F,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF
	.byte	0xBF,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE
	.byte	0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBD,0xBF,0xBF
	.byte	0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE
	.byte	0xBF,0xBF,0xBF,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBF,0xAB
	.byte	0xBB,0xBB,0xAB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBF,0xBF,0xB7,0xB7
	.byte	0xB5,0xB5,0xB5,0xB5,0xB5,0xB5,0xB5,0xBF,0xBF,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB
	.byte	0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB
	.byte	0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBF,0xBF,0xBF
	.byte	0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0x9D,0x9D,0xBD,0xBD,0xBD,0xBD,0xBD
	.byte	0xBD,0xBD,0xBD,0xBD,0xBF,0xBF,0xBF,0xBF,0x9F,0x9F,0x9F,0xBF,0xBF,0xBF,0xBE,0xBE
	.byte	0xBE,0xBE,0xBE,0xBE,0xBF,0xBF,0xBF,0xBD,0xBD,0x9D,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD
	.byte	0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD
	.byte	0x9D,0x9D,0xBD,0xBD,0xBD,0xBF,0xBF,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE
	.byte	0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBE,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF
	.byte	0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF
	.byte	0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF
	.byte	0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF
	.byte	0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF
	.byte	0		| artificial end
